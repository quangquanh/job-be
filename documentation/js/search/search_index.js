var COMPODOC_SEARCH_INDEX = {
    "index": { "version": "2.3.9", "fields": ["title", "body"], "fieldVectors": [["title/controllers/AppController.html", [0, 1.15, 1, 2.994]], ["body/controllers/AppController.html", [0, 1.984, 1, 5.165, 2, 1.652, 3, 0.173, 4, 0.173, 5, 0.116, 6, 5.161, 7, 0.3, 8, 0.013, 9, 2.928, 10, 5.161, 11, 3.763, 12, 0.883, 13, 4.844, 14, 5.161, 15, 4.338, 16, 3.207, 17, 5.161, 18, 0.173, 19, 0.26, 20, 2.313, 21, 3.109, 22, 2.399, 23, 0.01, 24, 0.01]], ["title/modules/AppModule.html", [25, 0.834, 26, 2.994]], ["body/modules/AppModule.html", [1, 4.308, 2, 1.418, 3, 0.104, 4, 0.104, 5, 0.07, 7, 0.325, 8, 0.013, 12, 0.53, 13, 4.523, 14, 3.1, 15, 3.375, 16, 1.927, 18, 0.104, 19, 0.156, 23, 0.007, 24, 0.007, 25, 1.2, 26, 6.157, 27, 1.441, 28, 1.496, 29, 1.618, 30, 1.618, 31, 1.496, 32, 2.697, 33, 1.618, 34, 3.1, 35, 3.1, 36, 3.1, 37, 4.817, 38, 4.817, 39, 4.817, 40, 4.817, 41, 4.817, 42, 4.817, 43, 4.817, 44, 4.817, 45, 4.817, 46, 4.523, 47, 4.817, 48, 4.523, 49, 2.312, 50, 1.618, 51, 1.555, 52, 3.549, 53, 2.697, 54, 3.549, 55, 1.839, 56, 0.992, 57, 4.43, 58, 3.549, 59, 3.549, 60, 3.549, 61, 1.759, 62, 1.25, 63, 1.759, 64, 0.961, 65, 3.549, 66, 3.549, 67, 3.549, 68, 3.549, 69, 3.549, 70, 3.549, 71, 3.549, 72, 3.549, 73, 3.549, 74, 3.549, 75, 2.805, 76, 3.549, 77, 2.805, 78, 3.549, 79, 3.549, 80, 3.549, 81, 3.549, 82, 3.549, 83, 1.496, 84, 3.549, 85, 3.549, 86, 2.805, 87, 1.169, 88, 3.549, 89, 3.549, 90, 3.549, 91, 3.549, 92, 5.072, 93, 3.549, 94, 0.93, 95, 2.805, 96, 3.549, 97, 3.549, 98, 1.341, 99, 3.549]], ["title/injectables/AppService.html", [13, 2.62, 100, 0.807]], ["body/injectables/AppService.html", [3, 0.174, 4, 0.174, 5, 0.117, 7, 0.234, 8, 0.012, 12, 0.888, 13, 4.534, 18, 0.174, 19, 0.261, 23, 0.01, 24, 0.01, 94, 1.557, 100, 1.397, 101, 2.167, 102, 5.19, 103, 0.681, 104, 1.99, 105, 7.904, 106, 0.856, 107, 5.942, 108, 1.661, 109, 1.064, 110, 5.19, 111, 5.942, 112, 5.942, 113, 5.942, 114, 4.695, 115, 4.695]], ["title/controllers/AuthController.html", [0, 1.15, 116, 2.994]], ["body/controllers/AuthController.html", [0, 0.911, 2, 0.911, 3, 0.096, 4, 0.096, 5, 0.064, 7, 0.298, 8, 0.013, 9, 1.614, 10, 2.846, 11, 4.392, 12, 0.487, 17, 2.846, 18, 0.096, 19, 0.143, 20, 1.275, 21, 2.088, 23, 0.007, 24, 0.007, 51, 1.427, 77, 2.574, 87, 1.856, 94, 1.808, 98, 2.129, 103, 0.374, 104, 1.333, 106, 0.994, 108, 1.928, 116, 3.47, 117, 2.846, 118, 1.547, 119, 2.846, 120, 4.767, 121, 4.767, 122, 4.767, 123, 5.638, 124, 5.638, 125, 4.767, 126, 3.258, 127, 1.751, 128, 4.767, 129, 3.258, 130, 2.125, 131, 0.823, 132, 1.991, 133, 6.025, 134, 3.258, 135, 2.51, 136, 4.164, 137, 2.283, 138, 3.258, 139, 3.258, 140, 0.924, 141, 1.275, 142, 3.258, 143, 4.952, 144, 3.258, 145, 3.258, 146, 3.258, 147, 3.258, 148, 3.258, 149, 4.767, 150, 3.258, 151, 3.258, 152, 3.258, 153, 4.767, 154, 4.164, 155, 3.258, 156, 3.258, 157, 3.258, 158, 3.744, 159, 3.258, 160, 4.164, 161, 4.767, 162, 3.258, 163, 1.688, 164, 6.204, 165, 3.39, 166, 2.574, 167, 2.371, 168, 2.574, 169, 3.258, 170, 2.677, 171, 1.547, 172, 1.427, 173, 2.867, 174, 1.959, 175, 2.209, 176, 1.858, 177, 1.373, 178, 3.06, 179, 2.574, 180, 3.258, 181, 4.767, 182, 1.614, 183, 1.323, 184, 3.258, 185, 3.258, 186, 2.588, 187, 2.846, 188, 3.258, 189, 3.258, 190, 3.258, 191, 2.846, 192, 3.258, 193, 3.258, 194, 5.638, 195, 3.258, 196, 2.371, 197, 3.258, 198, 3.258, 199, 3.258, 200, 3.258, 201, 3.258, 202, 3.258, 203, 3.258, 204, 3.258, 205, 1.21, 206, 2.574, 207, 1.188, 208, 3.258, 209, 3.258, 210, 3.258, 211, 2.574, 212, 3.258, 213, 2.371, 214, 3.258, 215, 3.258, 216, 3.258, 217, 3.258, 218, 3.258]], ["title/modules/AuthModule.html", [25, 0.834, 37, 2.79]], ["body/modules/AuthModule.html", [2, 1.648, 3, 0.13, 4, 0.13, 5, 0.087, 7, 0.32, 8, 0.013, 12, 0.659, 15, 4.042, 16, 2.395, 18, 0.13, 19, 0.194, 23, 0.009, 24, 0.009, 25, 1.346, 27, 1.791, 28, 1.86, 29, 2.011, 30, 2.011, 31, 1.86, 32, 3.026, 33, 3.026, 37, 5.642, 46, 4.839, 48, 4.839, 49, 2.687, 50, 2.011, 51, 1.933, 53, 3.026, 57, 5.15, 86, 3.486, 87, 1.453, 95, 3.486, 116, 4.833, 165, 4.925, 166, 3.486, 219, 3.854, 220, 3.854, 221, 4.412, 222, 3.854, 223, 5.153, 224, 5.153, 225, 4.412, 226, 4.412, 227, 5.895, 228, 2.81, 229, 4.412, 230, 4.412, 231, 3.486, 232, 4.412, 233, 4.658, 234, 4.412, 235, 4.412, 236, 4.412, 237, 3.854, 238, 3.854, 239, 4.412, 240, 3.854, 241, 4.412, 242, 3.854]], ["title/injectables/AuthService.html", [100, 0.807, 165, 2.474]], ["body/injectables/AuthService.html", [3, 0.07, 4, 0.07, 5, 0.047, 7, 0.28, 8, 0.013, 11, 1.511, 12, 0.355, 15, 3.64, 16, 1.288, 18, 0.07, 19, 0.104, 20, 1.466, 21, 2.308, 23, 0.005, 24, 0.005, 87, 2.341, 94, 1.785, 98, 1.753, 100, 0.735, 101, 0.866, 103, 0.272, 104, 1.047, 106, 0.92, 108, 1.297, 109, 1.062, 130, 1.624, 131, 0.875, 132, 1.521, 135, 2.021, 137, 2.168, 140, 0.706, 141, 2.063, 143, 4.348, 154, 5.325, 158, 2.86, 165, 2.253, 174, 1.427, 175, 1.61, 176, 1.354, 177, 1.001, 178, 3.464, 179, 1.875, 186, 1.288, 191, 5.01, 205, 1.925, 206, 2.96, 207, 2.412, 211, 5.379, 213, 5.074, 231, 1.875, 233, 2.96, 237, 3.272, 240, 2.073, 242, 4.053, 243, 2.073, 244, 1.014, 245, 4.641, 246, 4.641, 247, 4.641, 248, 3.272, 249, 3.746, 250, 2.374, 251, 3.309, 252, 6.382, 253, 2.374, 254, 3.746, 255, 2.374, 256, 3.746, 257, 2.374, 258, 3.746, 259, 4.603, 260, 2.374, 261, 2.253, 262, 3.272, 263, 2.955, 264, 3.147, 265, 2.374, 266, 2.374, 267, 2.374, 268, 2.791, 269, 1.875, 270, 2.374, 271, 2.073, 272, 2.073, 273, 1.875, 274, 2.385, 275, 2.519, 276, 1.728, 277, 2.374, 278, 1.176, 279, 1.511, 280, 2.073, 281, 1.875, 282, 2.374, 283, 1.61, 284, 2.374, 285, 3.746, 286, 1.521, 287, 4.641, 288, 2.374, 289, 2.374, 290, 2.374, 291, 2.727, 292, 3.746, 293, 1.674, 294, 3.272, 295, 3.746, 296, 2.374, 297, 2.73, 298, 3.272, 299, 2.073, 300, 1.704, 301, 2.223, 302, 4.053, 303, 3.746, 304, 3.746, 305, 3.746, 306, 1.297, 307, 2.374, 308, 2.374, 309, 2.374, 310, 3.272, 311, 2.374, 312, 3.746, 313, 3.746, 314, 3.746, 315, 4.641, 316, 3.746, 317, 4.641, 318, 2.374, 319, 2.374, 320, 2.374, 321, 1.04, 322, 2.374, 323, 3.746, 324, 2.374, 325, 2.374, 326, 2.374, 327, 2.374, 328, 2.374, 329, 2.374, 330, 2.374, 331, 2.374, 332, 1.43, 333, 2.374, 334, 1.58, 335, 2.374, 336, 2.374, 337, 2.374, 338, 2.374, 339, 3.746, 340, 2.374, 341, 2.033, 342, 2.137, 343, 2.137, 344, 3.746, 345, 3.272, 346, 3.272, 347, 2.727, 348, 3.746, 349, 3.746, 350, 2.374, 351, 1.511, 352, 2.374, 353, 2.374, 354, 2.374, 355, 1.127]], ["title/controllers/CompaniesController.html", [0, 1.15, 356, 2.994]], ["body/controllers/CompaniesController.html", [0, 1.026, 2, 1.026, 3, 0.108, 4, 0.108, 5, 0.072, 7, 0.291, 8, 0.013, 9, 2.987, 11, 2.338, 12, 0.549, 18, 0.108, 19, 0.161, 22, 1.491, 23, 0.008, 24, 0.008, 62, 1.293, 83, 2.763, 94, 1.813, 103, 0.421, 104, 1.452, 106, 0.997, 108, 1.934, 109, 1.23, 118, 1.743, 127, 1.756, 130, 2.132, 131, 0.826, 132, 1.997, 135, 2.74, 137, 2.355, 140, 0.926, 163, 2.691, 170, 2.863, 171, 1.743, 172, 1.608, 177, 1.547, 182, 1.819, 183, 1.491, 306, 1.452, 356, 3.781, 357, 3.207, 358, 3.207, 359, 2.448, 360, 2.448, 361, 2.109, 362, 2.36, 363, 3.671, 364, 4.574, 365, 3.671, 366, 1.608, 367, 2.872, 368, 2.338, 369, 2.088, 370, 2.49, 371, 3.671, 372, 2.276, 373, 1.491, 374, 3.626, 375, 2.49, 376, 3.671, 377, 2.514, 378, 1.491, 379, 2.963, 380, 3.671, 381, 1.743, 382, 5.116, 383, 3.308, 384, 3.671, 385, 1.993, 386, 2.094, 387, 2.19, 388, 3.839, 389, 3.207, 390, 1.491, 391, 4.105, 392, 1.491, 393, 3.671, 394, 3.671, 395, 1.673, 396, 2.49, 397, 3.671, 398, 2.094, 399, 2.208, 400, 2.208, 401, 3.671, 402, 2.094, 403, 3.124, 404, 3.671, 405, 3.671, 406, 2.094, 407, 3.671]], ["title/modules/CompaniesModule.html", [25, 0.834, 38, 2.79]], ["body/modules/CompaniesModule.html", [2, 1.881, 3, 0.159, 4, 0.159, 5, 0.107, 7, 0.31, 8, 0.013, 12, 0.809, 18, 0.159, 19, 0.238, 23, 0.01, 24, 0.01, 25, 1.484, 27, 2.199, 28, 2.283, 29, 2.468, 30, 2.468, 31, 2.283, 32, 3.336, 33, 2.468, 38, 5.443, 49, 3.067, 50, 2.468, 51, 2.372, 53, 2.468, 55, 2.805, 56, 1.514, 131, 0.646, 356, 5.328, 369, 1.725, 388, 5.111, 389, 4.731, 408, 4.731, 409, 4.731, 410, 5.416, 411, 5.416, 412, 4.898, 413, 4.731, 414, 2.94, 415, 4.731, 416, 2.199]], ["title/injectables/CompaniesService.html", [100, 0.807, 388, 2.62]], ["body/injectables/CompaniesService.html", [3, 0.086, 4, 0.086, 5, 0.058, 7, 0.296, 8, 0.013, 12, 0.44, 18, 0.086, 19, 0.13, 20, 1.731, 21, 1.29, 23, 0.006, 24, 0.006, 56, 0.823, 61, 1.459, 62, 1.871, 63, 1.459, 64, 1.438, 83, 2.907, 87, 2.389, 94, 1.808, 100, 0.868, 101, 1.074, 103, 0.338, 104, 1.236, 106, 0.958, 108, 1.769, 109, 1.136, 130, 2.048, 131, 0.793, 132, 1.919, 135, 2.604, 137, 2.095, 140, 0.89, 141, 2.079, 177, 1.241, 205, 1.751, 207, 2.153, 278, 2.926, 293, 1.695, 300, 1.485, 306, 1.236, 332, 1.363, 355, 2.1, 359, 1.796, 360, 1.796, 361, 1.796, 362, 1.731, 364, 3.76, 366, 1.937, 367, 2.327, 369, 1.692, 372, 2.327, 373, 1.796, 377, 2.348, 378, 1.796, 381, 2.1, 382, 4.811, 387, 2.239, 388, 2.816, 390, 1.196, 391, 3.495, 392, 1.196, 413, 2.572, 417, 2.572, 418, 2.945, 419, 3.205, 420, 2.945, 421, 4.423, 422, 4.423, 423, 2.945, 424, 4.423, 425, 3.03, 426, 2.945, 427, 2.945, 428, 2.945, 429, 2.945, 430, 2.143, 431, 1.598, 432, 2.572, 433, 2.572, 434, 1.771, 435, 1.598, 436, 1.679, 437, 2.945, 438, 1.997, 439, 2.945, 440, 2.945, 441, 1.29, 442, 3.194, 443, 3.194, 444, 1.771, 445, 1.771, 446, 1.771, 447, 1.771, 448, 1.771, 449, 1.771, 450, 1.771, 451, 1.771, 452, 1.771, 453, 1.598, 454, 2.66, 455, 1.771, 456, 2.66, 457, 2.945, 458, 2.66, 459, 1.771, 460, 2.66, 461, 2.945, 462, 1.771, 463, 1.771, 464, 1.771, 465, 1.771, 466, 1.771, 467, 1.771, 468, 1.771, 469, 1.771, 470, 2.66, 471, 1.771, 472, 3.194, 473, 1.771, 474, 1.598, 475, 2.66, 476, 2.66, 477, 1.771, 478, 1.771, 479, 2.66, 480, 1.679, 481, 1.771, 482, 1.771, 483, 1.771, 484, 1.771, 485, 1.342, 486, 1.598, 487, 1.771, 488, 2.572, 489, 2.572, 490, 2.945, 491, 2.66, 492, 2.401, 493, 2.66, 494, 2.945, 495, 4.423, 496, 1.29, 497, 1.342, 498, 2.945]], ["title/classes/Company.html", [19, 0.181, 369, 1.31]], ["body/classes/Company.html", [3, 0.113, 4, 0.113, 5, 0.076, 7, 0.211, 8, 0.013, 18, 0.181, 19, 0.169, 23, 0.008, 24, 0.008, 56, 1.074, 64, 1.452, 98, 1.451, 103, 0.441, 106, 1.144, 109, 1.186, 127, 2.015, 131, 0.738, 140, 1.109, 205, 0.975, 244, 1.452, 293, 1.52, 300, 1.727, 321, 2.707, 342, 3.525, 343, 3.525, 355, 1.824, 369, 1.708, 412, 2.797, 416, 2.178, 430, 2.797, 441, 2.707, 492, 2.086, 496, 2.707, 497, 2.817, 499, 0.975, 500, 2.797, 501, 3.354, 502, 3.716, 503, 2.605, 504, 3.716, 505, 4.498, 506, 3.525, 507, 5.012, 508, 3.842, 509, 4.383, 510, 3.842, 511, 3.525, 512, 3.716, 513, 3.072, 514, 3.842, 515, 3.842, 516, 3.842, 517, 3.842, 518, 2.912, 519, 3.842, 520, 3.842, 521, 3.842, 522, 3.842, 523, 3.842, 524, 2.311, 525, 3.059, 526, 2.311, 527, 3.842, 528, 3.716, 529, 3.036, 530, 3.842, 531, 2.797, 532, 3.059, 533, 2.447, 534, 1.904, 535, 2.447, 536, 2.447, 537, 2.509, 538, 3.356]], ["title/classes/Company-1.html", [19, 0.151, 369, 1.093, 453, 1.862]], ["body/classes/Company-1.html", [3, 0.116, 4, 0.116, 5, 0.078, 7, 0.247, 8, 0.013, 18, 0.116, 19, 0.298, 23, 0.008, 24, 0.008, 64, 1.48, 103, 0.453, 106, 0.788, 109, 1.192, 127, 1.388, 131, 0.808, 140, 0.906, 196, 2.874, 244, 1.48, 278, 1.956, 283, 2.678, 286, 3.29, 293, 1.542, 332, 2.497, 355, 2.596, 369, 2.263, 425, 2.491, 474, 2.143, 485, 1.8, 486, 2.143, 492, 2.143, 499, 1.002, 503, 1.664, 505, 3.979, 513, 1.664, 518, 2.143, 529, 3.12, 537, 2.22, 539, 4.954, 540, 2.874, 541, 3.944, 542, 3.949, 543, 3.949, 544, 1.8, 545, 2.709, 546, 2.709, 547, 2.709, 548, 1.73, 549, 2.252, 550, 1.956, 551, 2.374, 552, 2.374, 553, 3.416, 554, 2.045, 555, 2.874, 556, 3.847, 557, 3.12, 558, 2.143, 559, 2.678, 560, 3.707, 561, 3.449, 562, 3.449, 563, 2.678, 564, 2.874, 565, 3.979, 566, 2.678, 567, 3.12, 568, 4.775, 569, 3.449, 570, 2.874, 571, 3.449, 572, 2.874, 573, 2.514, 574, 2.514, 575, 2.252]], ["title/classes/Company-2.html", [19, 0.151, 276, 2.497, 369, 1.093]], ["body/classes/Company-2.html", [3, 0.104, 4, 0.104, 5, 0.07, 7, 0.254, 8, 0.013, 18, 0.173, 19, 0.312, 22, 2.052, 23, 0.007, 24, 0.007, 64, 1.597, 103, 0.405, 106, 0.728, 109, 1.212, 127, 1.283, 131, 0.814, 140, 0.863, 158, 1.917, 173, 2.124, 174, 3.549, 183, 1.434, 186, 2.743, 244, 1.368, 261, 3.039, 275, 1.917, 286, 3.254, 293, 1.451, 300, 1.982, 301, 1.843, 332, 2.486, 355, 1.677, 369, 2.171, 377, 1.203, 492, 1.917, 499, 0.897, 501, 2.743, 503, 2.13, 513, 1.489, 534, 2.924, 537, 2.396, 541, 3.934, 544, 2.69, 545, 2.504, 546, 2.504, 547, 2.504, 548, 1.547, 549, 2.014, 550, 1.75, 551, 2.124, 553, 3.42, 554, 2.618, 556, 3.777, 576, 2.249, 577, 3.532, 578, 3.532, 579, 3.039, 580, 4.002, 581, 4.296, 582, 1.917, 583, 3.218, 584, 3.218, 585, 4.296, 586, 3.427, 587, 3.427, 588, 3.497, 589, 3.679, 590, 3.039, 591, 4.296, 592, 4.296, 593, 3.039, 594, 2.124, 595, 3.679, 596, 2.571, 597, 3.679]], ["title/classes/CreateCVDto.html", [19, 0.181, 598, 2.994]], ["body/classes/CreateCVDto.html", [3, 0.115, 4, 0.115, 5, 0.077, 7, 0.214, 8, 0.013, 18, 0.16, 19, 0.275, 23, 0.008, 24, 0.008, 64, 1.472, 103, 0.449, 106, 1.057, 109, 1.124, 127, 1.862, 140, 0.982, 244, 1.472, 286, 3.326, 300, 1.981, 332, 2.524, 438, 5.101, 499, 0.995, 537, 3.114, 541, 3.743, 544, 1.786, 545, 1.942, 546, 1.942, 547, 1.942, 548, 1.717, 553, 3.282, 556, 3.815, 573, 3.463, 574, 3.463, 579, 4.41, 598, 3.959, 599, 5.943, 600, 2.853, 601, 5.475, 602, 5.475, 603, 3.977, 604, 5.159, 605, 3.981, 606, 5.456, 607, 3.92, 608, 3.92, 609, 3.92, 610, 3.92, 611, 3.92, 612, 3.92, 613, 2.357]], ["title/classes/CreateCompanyDto.html", [19, 0.181, 364, 2.62]], ["body/classes/CreateCompanyDto.html", [3, 0.137, 4, 0.137, 5, 0.092, 7, 0.184, 8, 0.013, 18, 0.137, 19, 0.3, 23, 0.009, 24, 0.009, 103, 0.535, 106, 1.044, 109, 1.192, 127, 1.839, 131, 0.814, 140, 0.97, 244, 1.655, 286, 3.24, 332, 2.459, 355, 2.903, 364, 3.893, 485, 2.787, 492, 3.319, 499, 1.183, 501, 3.703, 503, 2.876, 505, 5.474, 513, 1.965, 541, 3.571, 544, 2.125, 548, 2.042, 550, 2.31, 551, 2.803, 553, 3.053, 554, 3.167, 556, 3.789, 566, 4.146, 594, 3.677, 605, 3.931, 614, 6.569, 615, 3.683, 616, 4.662, 617, 4.662, 618, 4.662, 619, 4.662]], ["title/classes/CreateFileDto.html", [19, 0.181, 620, 2.62]], ["body/classes/CreateFileDto.html", [3, 0.19, 4, 0.19, 5, 0.128, 8, 0.012, 18, 0.19, 19, 0.285, 23, 0.011, 24, 0.011, 499, 1.645, 620, 4.772, 621, 5.661, 622, 5.121]], ["title/classes/CreateJobDto.html", [19, 0.181, 552, 2.474]], ["body/classes/CreateJobDto.html", [3, 0.089, 4, 0.089, 5, 0.06, 7, 0.213, 8, 0.013, 18, 0.089, 19, 0.263, 23, 0.007, 24, 0.007, 64, 1.221, 103, 0.347, 106, 1.088, 109, 1.191, 127, 1.917, 131, 0.714, 140, 1.035, 196, 3.284, 244, 1.221, 278, 2.235, 283, 2.05, 286, 3.337, 293, 0.743, 332, 2.532, 355, 2.841, 369, 2.215, 425, 2.727, 474, 2.449, 485, 2.056, 486, 2.449, 492, 2.449, 499, 0.768, 503, 2.275, 505, 3.284, 513, 1.274, 518, 2.449, 529, 3.564, 537, 1.228, 539, 6.042, 540, 2.201, 541, 3.762, 544, 1.378, 545, 2.235, 546, 2.235, 547, 2.235, 548, 1.324, 549, 1.724, 550, 1.498, 551, 1.818, 552, 2.713, 553, 3.258, 554, 2.337, 555, 3.284, 556, 3.89, 557, 3.564, 558, 2.929, 559, 2.05, 560, 4.058, 561, 3.94, 562, 3.94, 563, 3.66, 564, 3.928, 565, 4.659, 566, 3.059, 567, 3.564, 568, 5.226, 569, 3.94, 570, 3.928, 571, 3.94, 572, 3.928, 573, 2.873, 574, 2.873, 575, 3.078, 605, 4.099, 623, 2.641, 624, 3.023, 625, 3.023, 626, 3.023, 627, 3.023, 628, 3.023, 629, 3.023, 630, 3.023, 631, 3.023, 632, 3.023, 633, 3.023, 634, 3.023]], ["title/classes/CreatePermissionDto.html", [19, 0.181, 635, 2.62]], ["body/classes/CreatePermissionDto.html", [3, 0.14, 4, 0.14, 5, 0.094, 7, 0.187, 8, 0.013, 18, 0.14, 19, 0.272, 23, 0.009, 24, 0.009, 25, 1.534, 103, 0.545, 106, 1.052, 109, 1.197, 127, 1.853, 131, 0.822, 140, 0.977, 244, 1.676, 286, 3.253, 332, 2.469, 435, 3.362, 499, 1.207, 541, 3.593, 544, 2.167, 545, 2.356, 546, 2.356, 547, 2.356, 548, 2.083, 553, 3.076, 554, 3.208, 556, 3.804, 605, 3.961, 635, 3.944, 636, 6.61, 637, 3.757, 638, 4.387, 639, 4.819, 640, 3.944, 641, 4.755, 642, 4.755, 643, 4.755, 644, 4.755]], ["title/classes/CreateResumeDto.html", [19, 0.181, 613, 2.474]], ["body/classes/CreateResumeDto.html", [3, 0.126, 4, 0.126, 5, 0.085, 7, 0.229, 8, 0.013, 18, 0.17, 19, 0.288, 23, 0.008, 24, 0.008, 64, 1.57, 103, 0.494, 106, 0.945, 109, 1.094, 127, 1.665, 140, 0.878, 244, 1.57, 286, 3.313, 300, 1.621, 332, 2.514, 438, 5.229, 499, 1.093, 537, 3.131, 541, 3.812, 544, 1.962, 545, 2.133, 546, 2.133, 547, 2.133, 548, 1.886, 553, 3.349, 556, 3.812, 573, 2.742, 574, 2.742, 579, 4.537, 598, 3.134, 599, 5.545, 600, 3.134, 601, 5.613, 602, 5.613, 603, 2.742, 604, 4.221, 605, 3.56, 606, 5.066, 613, 3.488, 645, 4.306, 646, 4.306, 647, 4.306]], ["title/classes/CreateRoleDto.html", [19, 0.181, 648, 2.62]], ["body/classes/CreateRoleDto.html", [3, 0.125, 4, 0.125, 5, 0.084, 7, 0.227, 8, 0.013, 18, 0.125, 19, 0.254, 23, 0.008, 24, 0.008, 64, 1.561, 98, 1.613, 103, 0.49, 106, 1.008, 109, 1.045, 127, 1.776, 131, 0.78, 140, 0.937, 244, 1.561, 275, 3.796, 286, 3.255, 297, 3.784, 332, 2.411, 485, 2.629, 499, 1.084, 503, 2.753, 513, 2.432, 518, 3.131, 532, 3.29, 534, 2.858, 537, 2.342, 541, 3.468, 544, 1.947, 545, 2.116, 546, 2.116, 547, 2.116, 548, 1.871, 553, 3.173, 554, 2.988, 556, 3.574, 559, 3.912, 566, 3.912, 573, 4.454, 574, 4.454, 575, 3.725, 579, 3.469, 605, 3.796, 648, 3.673, 649, 6.381, 650, 3.375, 651, 4.271, 652, 4.271, 653, 5.768, 654, 5.768, 655, 5.768, 656, 4.271, 657, 5.039, 658, 4.271, 659, 2.629, 660, 4.271, 661, 4.271, 662, 5.768, 663, 5.768, 664, 4.271, 665, 5.039, 666, 5.768, 667, 3.731]], ["title/classes/CreateSubscriberDto.html", [19, 0.181, 668, 2.62]], ["body/classes/CreateSubscriberDto.html", [3, 0.15, 4, 0.15, 5, 0.101, 7, 0.281, 8, 0.012, 18, 0.15, 19, 0.314, 23, 0.009, 24, 0.009, 64, 1.758, 98, 2.453, 103, 0.587, 106, 1.028, 109, 1.182, 127, 1.811, 131, 0.851, 140, 1.005, 196, 4.727, 244, 1.758, 286, 2.637, 300, 1.994, 332, 2.001, 499, 1.299, 541, 3.677, 544, 2.96, 545, 2.536, 546, 2.536, 547, 2.536, 548, 2.242, 549, 2.919, 553, 2.158, 556, 2.43, 557, 5.131, 558, 3.872, 580, 4.404, 605, 2.778, 665, 5.672, 667, 4.471, 668, 4.135, 669, 6.553, 670, 4.044, 671, 5.118, 672, 5.118, 673, 5.118, 674, 5.118, 675, 5.118]], ["title/classes/CreateUserDto.html", [19, 0.181, 582, 2.233]], ["body/classes/CreateUserDto.html", [3, 0.087, 4, 0.087, 5, 0.058, 7, 0.233, 8, 0.013, 18, 0.156, 19, 0.293, 22, 1.798, 23, 0.006, 24, 0.006, 64, 1.599, 103, 0.338, 106, 1.023, 109, 1.211, 127, 1.802, 131, 0.756, 140, 0.99, 158, 1.6, 173, 1.773, 174, 4.365, 183, 1.197, 186, 2.886, 244, 1.198, 261, 2.662, 275, 2.403, 286, 3.304, 293, 0.725, 300, 2.067, 301, 2.309, 332, 2.517, 355, 2.102, 369, 2.197, 377, 1.004, 492, 2.403, 499, 0.749, 501, 3.207, 503, 1.866, 513, 1.243, 534, 3.138, 537, 2.159, 541, 3.813, 544, 2.693, 545, 2.194, 546, 2.194, 547, 2.194, 548, 1.292, 549, 1.682, 550, 1.461, 551, 1.773, 553, 3.348, 554, 2.754, 556, 3.813, 576, 1.878, 579, 2.662, 580, 3.605, 581, 3.869, 582, 2.403, 583, 3.385, 584, 3.385, 585, 4.301, 586, 3.605, 587, 3.605, 588, 3.61, 589, 3.869, 590, 3.553, 591, 4.61, 592, 4.61, 593, 3.553, 594, 1.773, 595, 3.223, 596, 2.146, 597, 3.223, 605, 3.745, 623, 2.575, 676, 2.949, 677, 2.949, 678, 2.949, 679, 2.575, 680, 2.949, 681, 2.949, 682, 2.949, 683, 2.949, 684, 2.949, 685, 2.949]], ["title/controllers/DatabasesController.html", [0, 1.15, 686, 2.994]], ["body/controllers/DatabasesController.html", [0, 1.718, 2, 1.718, 3, 0.18, 4, 0.18, 5, 0.121, 7, 0.286, 8, 0.012, 12, 0.918, 18, 0.18, 19, 0.27, 22, 2.496, 23, 0.011, 24, 0.011, 118, 2.918, 395, 2.801, 686, 5.288, 687, 5.368, 688, 6.146, 689, 4.925, 690, 5.368, 691, 6.146]], ["title/modules/DatabasesModule.html", [25, 0.834, 39, 2.79]], ["body/modules/DatabasesModule.html", [2, 1.772, 3, 0.145, 4, 0.145, 5, 0.097, 7, 0.318, 8, 0.013, 12, 0.737, 18, 0.145, 19, 0.217, 23, 0.009, 24, 0.009, 25, 1.421, 27, 2.002, 28, 2.078, 29, 2.247, 30, 2.247, 31, 2.078, 32, 3.194, 33, 2.247, 39, 5.475, 49, 2.89, 50, 2.247, 51, 2.16, 53, 2.247, 55, 2.554, 56, 1.378, 131, 0.837, 137, 1.423, 251, 4.253, 269, 3.895, 301, 1.798, 414, 2.676, 416, 2.846, 659, 2.247, 686, 5.102, 689, 4.989, 690, 4.306, 692, 4.306, 693, 4.306, 694, 4.93, 695, 4.93, 696, 4.3, 697, 3.895, 698, 4.3, 699, 4.306, 700, 4.038, 701, 3.343, 702, 3.895, 703, 4.306, 704, 3.588]], ["title/injectables/DatabasesService.html", [100, 0.807, 689, 2.62]], ["body/injectables/DatabasesService.html", [3, 0.094, 4, 0.094, 5, 0.063, 7, 0.297, 8, 0.013, 12, 0.479, 15, 4.044, 16, 1.742, 18, 0.094, 19, 0.141, 20, 1.846, 21, 3.187, 22, 2.269, 23, 0.007, 24, 0.007, 56, 0.897, 61, 1.59, 62, 1.131, 63, 1.59, 64, 0.869, 87, 1.84, 98, 1.781, 100, 0.925, 101, 1.17, 103, 0.368, 104, 1.318, 106, 0.806, 108, 0.897, 114, 2.536, 115, 2.536, 130, 0.989, 131, 0.868, 132, 0.926, 137, 1.361, 140, 0.43, 205, 1.8, 207, 2.707, 244, 1.276, 251, 3.849, 263, 2.044, 264, 2.176, 269, 2.536, 278, 1.59, 279, 2.044, 283, 2.176, 291, 2.336, 297, 3.399, 300, 1.562, 301, 2.502, 306, 1.562, 310, 2.803, 332, 0.989, 334, 1.605, 419, 4.097, 431, 1.742, 501, 3.034, 503, 1.987, 550, 1.59, 575, 2.689, 583, 2.044, 588, 3.034, 590, 3.361, 593, 3.361, 594, 1.93, 659, 1.463, 689, 3.002, 697, 2.536, 699, 2.803, 701, 2.176, 705, 2.803, 706, 6.16, 707, 6.861, 708, 3.209, 709, 5.589, 710, 5.589, 711, 4.715, 712, 4.715, 713, 3.209, 714, 4.715, 715, 1.406, 716, 2.044, 717, 2.336, 718, 2.176, 719, 2.044, 720, 2.176, 721, 4.068, 722, 2.536, 723, 4.068, 724, 4.715, 725, 2.336, 726, 2.536, 727, 2.803, 728, 2.803, 729, 3.209, 730, 3.209, 731, 3.209, 732, 5.589, 733, 3.209, 734, 5.589, 735, 3.209, 736, 5.589, 737, 3.209, 738, 4.994, 739, 3.209, 740, 3.209, 741, 3.209, 742, 3.209, 743, 3.725, 744, 3.209, 745, 4.118, 746, 3.209, 747, 3.209, 748, 2.336, 749, 3.209, 750, 3.209, 751, 2.536, 752, 3.209, 753, 3.209, 754, 4.715, 755, 3.209, 756, 5.589, 757, 2.803, 758, 5.589, 759, 5.589, 760, 4.715, 761, 5.589, 762, 5.589, 763, 4.715, 764, 2.803, 765, 3.209, 766, 3.209, 767, 3.209, 768, 2.803, 769, 3.209, 770, 2.803, 771, 3.209]], ["title/classes/File.html", [5, 0.081, 19, 0.181]], ["body/classes/File.html", [3, 0.191, 4, 0.191, 5, 0.156, 8, 0.012, 18, 0.191, 19, 0.286, 23, 0.011, 24, 0.011, 499, 1.65, 772, 5.678]], ["title/controllers/FilesController.html", [0, 1.15, 773, 2.994]], ["body/controllers/FilesController.html", [0, 1.092, 2, 1.092, 3, 0.115, 4, 0.115, 5, 0.133, 7, 0.296, 8, 0.013, 9, 1.935, 12, 0.583, 18, 0.115, 19, 0.172, 22, 1.586, 23, 0.008, 24, 0.008, 62, 1.376, 94, 1.855, 103, 0.448, 104, 1.516, 106, 1.02, 108, 1.978, 109, 1.162, 118, 1.854, 127, 1.797, 130, 2.076, 131, 0.804, 132, 1.945, 140, 0.902, 163, 2.81, 171, 1.854, 172, 1.711, 176, 2.227, 182, 1.935, 183, 1.586, 334, 1.33, 359, 2.735, 360, 2.203, 361, 2.203, 362, 2.124, 373, 1.586, 377, 2.494, 378, 1.586, 379, 3.094, 381, 1.854, 383, 3.455, 385, 2.12, 386, 2.227, 390, 1.586, 392, 1.586, 395, 1.78, 402, 3.094, 406, 2.227, 620, 2.487, 773, 3.949, 774, 3.411, 775, 3.086, 776, 6.234, 777, 3.905, 778, 3.905, 779, 3.905, 780, 5.196, 781, 3.905, 782, 3.905, 783, 6.234, 784, 5.425, 785, 3.905, 786, 3.905, 787, 4.739, 788, 3.905, 789, 5.425, 790, 5.425, 791, 3.905, 792, 3.97, 793, 3.411, 794, 4.287, 795, 3.905, 796, 2.843, 797, 3.905, 798, 3.905, 799, 3.905, 800, 3.905, 801, 3.905, 802, 3.905, 803, 3.905, 804, 3.905, 805, 3.905, 806, 3.905, 807, 3.905, 808, 3.905, 809, 5.425, 810, 3.411, 811, 3.905, 812, 3.905, 813, 3.905, 814, 3.905, 815, 3.905, 816, 3.905, 817, 3.905, 818, 3.905, 819, 3.905]], ["title/modules/FilesModule.html", [25, 0.834, 40, 2.79]], ["body/modules/FilesModule.html", [2, 1.887, 3, 0.16, 4, 0.16, 5, 0.107, 7, 0.311, 8, 0.013, 12, 0.813, 18, 0.16, 19, 0.239, 23, 0.01, 24, 0.01, 25, 1.487, 27, 2.21, 28, 2.295, 29, 2.481, 30, 2.481, 31, 2.295, 32, 3.344, 33, 2.481, 40, 5.45, 49, 3.076, 50, 2.481, 51, 2.384, 53, 2.481, 176, 3.105, 773, 5.34, 792, 5.117, 793, 4.755, 796, 3.962, 820, 4.755, 821, 4.755, 822, 5.443, 823, 5.443, 824, 5.443, 825, 4.913, 826, 5.443, 827, 5.443, 828, 5.443]], ["title/injectables/FilesService.html", [100, 0.807, 792, 2.62]], ["body/injectables/FilesService.html", [3, 0.133, 4, 0.133, 5, 0.147, 7, 0.265, 8, 0.013, 12, 0.677, 18, 0.133, 19, 0.199, 23, 0.009, 24, 0.009, 94, 1.953, 100, 1.178, 101, 1.653, 103, 0.52, 104, 1.678, 106, 1.074, 108, 2.183, 109, 1.113, 130, 2.207, 131, 0.855, 132, 2.068, 140, 0.959, 306, 1.678, 334, 1.544, 359, 2.909, 360, 2.437, 361, 2.437, 362, 2.35, 373, 2.437, 377, 2.607, 378, 2.437, 381, 2.85, 390, 1.841, 392, 1.841, 425, 3.658, 620, 4.745, 775, 3.582, 780, 5.297, 792, 3.823, 794, 4.743, 829, 3.96, 830, 6.003, 831, 4.533, 832, 4.533, 833, 4.533, 834, 4.533, 835, 4.533, 836, 7.452, 837, 4.533, 838, 4.533, 839, 4.533]], ["title/controllers/HealthController.html", [0, 1.15, 840, 2.994]], ["body/controllers/HealthController.html", [0, 1.545, 2, 1.545, 3, 0.162, 4, 0.162, 5, 0.109, 7, 0.304, 8, 0.013, 12, 0.826, 18, 0.162, 19, 0.243, 20, 2.164, 21, 2.985, 23, 0.01, 24, 0.01, 94, 1.449, 103, 0.634, 104, 1.905, 106, 0.797, 108, 1.545, 118, 2.625, 127, 1.403, 170, 3.236, 172, 2.421, 182, 2.739, 183, 2.244, 840, 4.96, 841, 4.828, 842, 6.814, 843, 7.712, 844, 5.528, 845, 5.528, 846, 6.814, 847, 6.814, 848, 6.814, 849, 4.368, 850, 5.528, 851, 5.528, 852, 5.528, 853, 5.528, 854, 5.528]], ["title/modules/HealthModule.html", [25, 0.834, 41, 2.79]], ["body/modules/HealthModule.html", [2, 2.017, 3, 0.178, 4, 0.178, 5, 0.12, 7, 0.303, 8, 0.012, 12, 0.908, 18, 0.178, 19, 0.267, 23, 0.011, 24, 0.011, 25, 1.463, 27, 2.467, 41, 4.894, 53, 2.769, 840, 5.603, 849, 4.801, 855, 6.076, 856, 6.076, 857, 7.216]], ["title/interfaces/IUser.html", [135, 1.449, 858, 2.474]], ["body/interfaces/IUser.html", [3, 0.157, 4, 0.157, 5, 0.105, 8, 0.012, 18, 0.157, 23, 0.01, 24, 0.01, 25, 1.084, 103, 0.613, 109, 1.274, 131, 0.955, 132, 1.927, 135, 2.352, 140, 1.108, 244, 1.807, 293, 1.967, 297, 3.949, 300, 2.131, 301, 2.78, 511, 4.348, 638, 3.406, 639, 3.406, 858, 3.216, 859, 4.226, 860, 4.672]], ["title/classes/Job.html", [19, 0.181, 715, 1.802]], ["body/classes/Job.html", [3, 0.094, 4, 0.094, 5, 0.063, 7, 0.186, 8, 0.013, 18, 0.164, 19, 0.141, 23, 0.007, 24, 0.007, 25, 0.651, 56, 0.898, 64, 1.278, 98, 1.214, 103, 0.369, 106, 1.166, 109, 1.187, 127, 2.054, 131, 0.736, 140, 1.117, 205, 0.816, 244, 1.278, 293, 1.516, 300, 1.564, 321, 2.45, 342, 3.19, 343, 3.19, 369, 1.781, 416, 1.917, 425, 2.809, 441, 2.45, 496, 2.45, 497, 2.549, 499, 0.816, 502, 3.364, 503, 2.598, 504, 3.364, 506, 3.19, 507, 5.07, 509, 4.657, 511, 3.516, 512, 3.707, 513, 3.068, 518, 3.564, 524, 1.933, 525, 2.692, 526, 1.933, 528, 2.838, 532, 2.692, 533, 2.047, 534, 1.592, 535, 2.047, 536, 2.047, 537, 2.503, 558, 3.036, 560, 3.793, 563, 3.793, 564, 4.072, 565, 4.487, 570, 4.487, 572, 4.487, 575, 3.516, 715, 2.068, 716, 2.047, 861, 2.339, 862, 3.214, 863, 3.214, 864, 3.214, 865, 3.214, 866, 3.214, 867, 3.214, 868, 3.214, 869, 3.214, 870, 3.214, 871, 3.214, 872, 3.214, 873, 3.214, 874, 3.214, 875, 3.214, 876, 3.214, 877, 3.214, 878, 3.214, 879, 3.214, 880, 3.214, 881, 2.18, 882, 1.933, 883, 2.18, 884, 2.807]], ["title/controllers/JobsController.html", [0, 1.15, 885, 2.994]], ["body/controllers/JobsController.html", [0, 0.959, 2, 0.959, 3, 0.101, 4, 0.101, 5, 0.068, 7, 0.285, 8, 0.013, 9, 2.452, 12, 0.512, 18, 0.101, 19, 0.151, 22, 1.393, 23, 0.007, 24, 0.007, 62, 1.743, 83, 2.679, 87, 1.911, 94, 1.767, 103, 0.393, 104, 1.383, 106, 0.971, 108, 1.884, 109, 1.219, 118, 1.629, 127, 1.711, 130, 2.077, 131, 0.804, 132, 1.946, 135, 2.7, 137, 2.332, 140, 0.903, 141, 1.343, 163, 2.564, 170, 2.757, 171, 1.629, 172, 1.503, 177, 1.446, 182, 1.7, 183, 1.393, 205, 0.871, 207, 1.251, 293, 0.843, 306, 1.383, 321, 1.503, 334, 1.685, 359, 2.357, 360, 2.357, 361, 2.01, 362, 2.488, 366, 1.503, 367, 2.784, 368, 2.184, 369, 1.576, 370, 2.326, 372, 2.168, 373, 1.393, 374, 3.491, 375, 2.326, 377, 2.523, 378, 1.393, 379, 1.956, 381, 1.629, 383, 2.184, 385, 1.862, 386, 1.956, 387, 2.086, 390, 1.393, 392, 1.393, 395, 1.563, 396, 2.326, 398, 2.823, 399, 2.063, 400, 2.063, 402, 1.956, 403, 2.976, 406, 1.956, 552, 4.223, 715, 3.307, 885, 3.602, 886, 2.996, 887, 3.602, 888, 2.996, 889, 3.151, 890, 2.996, 891, 3.43, 892, 3.43, 893, 3.43, 894, 3.151, 895, 3.43, 896, 3.43, 897, 5.025, 898, 3.356, 899, 3.43, 900, 3.43, 901, 3.697, 902, 2.996, 903, 3.91, 904, 3.43, 905, 3.43, 906, 2.996, 907, 3.43, 908, 3.43, 909, 3.43, 910, 3.43, 911, 3.43, 912, 2.976, 913, 3.43, 914, 3.43]], ["title/modules/JobsModule.html", [25, 0.834, 42, 2.79]], ["body/modules/JobsModule.html", [2, 1.855, 3, 0.155, 4, 0.155, 5, 0.104, 7, 0.308, 8, 0.012, 12, 0.791, 18, 0.155, 19, 0.233, 23, 0.01, 24, 0.01, 25, 1.469, 27, 2.15, 28, 2.232, 29, 2.413, 30, 2.413, 31, 2.232, 32, 3.302, 33, 3.302, 42, 5.492, 49, 3.024, 50, 2.413, 51, 2.32, 53, 2.413, 55, 2.743, 56, 1.48, 131, 0.632, 414, 2.874, 416, 2.15, 715, 2.32, 883, 4.5, 885, 5.274, 901, 5.354, 902, 4.625, 915, 4.625, 916, 4.625, 917, 4.625, 918, 5.295, 919, 5.295, 920, 4.625, 921, 4.184]], ["title/injectables/JobsService.html", [100, 0.807, 901, 2.62]], ["body/injectables/JobsService.html", [3, 0.085, 4, 0.085, 5, 0.057, 7, 0.29, 8, 0.013, 12, 0.43, 18, 0.085, 19, 0.127, 20, 1.703, 21, 1.262, 23, 0.006, 24, 0.006, 56, 0.805, 61, 1.428, 62, 1.847, 63, 1.428, 64, 1.419, 83, 2.885, 87, 2.492, 94, 1.728, 100, 0.854, 101, 1.051, 103, 0.33, 104, 1.216, 106, 0.95, 108, 1.753, 109, 1.131, 130, 2.032, 131, 0.841, 132, 1.903, 135, 2.59, 137, 2.082, 140, 0.883, 141, 2.286, 177, 1.215, 205, 1.789, 207, 2.286, 268, 1.733, 278, 2.894, 293, 1.621, 300, 1.216, 306, 1.216, 332, 0.888, 334, 0.981, 341, 1.564, 351, 1.835, 355, 1.368, 359, 1.767, 360, 1.767, 361, 1.767, 362, 1.703, 366, 1.906, 367, 2.296, 369, 1.386, 372, 2.296, 373, 1.767, 377, 2.399, 378, 1.767, 381, 2.066, 387, 2.21, 390, 1.17, 392, 1.17, 419, 3.17, 425, 3.005, 431, 1.564, 434, 1.733, 435, 1.564, 436, 1.643, 442, 2.616, 443, 2.616, 444, 1.733, 445, 1.733, 446, 1.733, 447, 1.733, 448, 1.733, 449, 1.733, 450, 1.733, 451, 1.733, 452, 1.733, 453, 1.564, 454, 2.616, 455, 1.733, 456, 2.616, 458, 2.616, 459, 1.733, 460, 2.616, 462, 1.733, 463, 1.733, 464, 1.733, 465, 1.733, 466, 1.733, 467, 1.733, 468, 1.733, 469, 1.733, 470, 2.616, 471, 1.733, 472, 2.616, 473, 1.733, 474, 1.564, 475, 2.616, 476, 2.616, 477, 1.733, 478, 1.733, 479, 2.616, 480, 1.643, 481, 1.733, 482, 1.733, 483, 1.733, 484, 1.733, 485, 1.313, 486, 1.564, 487, 1.733, 491, 2.616, 493, 1.733, 496, 1.262, 497, 1.313, 503, 1.834, 552, 3.965, 555, 2.097, 558, 2.362, 560, 2.951, 563, 2.951, 564, 3.167, 565, 3.167, 570, 3.167, 572, 3.167, 575, 2.482, 715, 1.906, 716, 1.835, 888, 3.8, 897, 4.779, 901, 2.771, 903, 3.438, 906, 3.8, 920, 2.517, 922, 2.517, 923, 2.881, 924, 2.881, 925, 3.8, 926, 2.881, 927, 2.881, 928, 2.881, 929, 2.881, 930, 2.881, 931, 2.097, 932, 2.517, 933, 2.881, 934, 4.351, 935, 2.881, 936, 2.881, 937, 2.097, 938, 1.954, 939, 2.881, 940, 2.881]], ["title/injectables/JwtAuthGuard.html", [100, 0.807, 941, 3.25]], ["body/injectables/JwtAuthGuard.html", [3, 0.208, 4, 0.115, 5, 0.077, 7, 0.279, 8, 0.013, 11, 3.981, 12, 0.587, 18, 0.115, 19, 0.173, 20, 1.537, 23, 0.008, 24, 0.008, 94, 1.639, 98, 2.057, 100, 1.068, 101, 1.432, 103, 0.45, 104, 1.522, 106, 0.901, 108, 1.522, 109, 0.587, 130, 1.926, 131, 0.746, 132, 1.805, 137, 2.047, 140, 0.837, 172, 1.72, 176, 2.24, 205, 1.863, 211, 4.303, 228, 2.501, 275, 2.131, 286, 2.211, 297, 2.034, 332, 1.926, 334, 1.854, 341, 3.394, 346, 3.43, 347, 2.858, 395, 1.79, 659, 1.79, 745, 3.43, 941, 4.303, 942, 5.898, 943, 3.103, 944, 2.586, 945, 5.446, 946, 5.446, 947, 5.446, 948, 3.43, 949, 5.798, 950, 3.927, 951, 5.446, 952, 5.477, 953, 3.927, 954, 4.915, 955, 5.446, 956, 3.927, 957, 6.752, 958, 3.927, 959, 4.757, 960, 2.858, 961, 3.43, 962, 3.103, 963, 4.303, 964, 3.103, 965, 4.757, 966, 3.927, 967, 4.303, 968, 5.446, 969, 3.927, 970, 3.927, 971, 3.927, 972, 3.927, 973, 3.927, 974, 5.446, 975, 3.927, 976, 3.927, 977, 3.927, 978, 5.446, 979, 3.927, 980, 5.446, 981, 3.927, 982, 3.927, 983, 4.24, 984, 3.927, 985, 3.927, 986, 3.927, 987, 3.927, 988, 3.927, 989, 3.927, 990, 3.43, 991, 3.927, 992, 2.858]], ["title/injectables/JwtStrategy.html", [100, 0.807, 223, 2.79]], ["body/injectables/JwtStrategy.html", [3, 0.136, 4, 0.136, 5, 0.091, 7, 0.303, 8, 0.013, 12, 0.69, 15, 4.391, 16, 2.508, 18, 0.136, 19, 0.203, 20, 2.38, 21, 2.663, 23, 0.009, 24, 0.009, 87, 2.237, 94, 1.211, 100, 1.193, 101, 1.685, 103, 0.53, 104, 1.699, 106, 0.876, 108, 1.292, 109, 0.908, 130, 1.873, 131, 0.895, 132, 1.755, 135, 2.543, 140, 0.814, 141, 2.38, 177, 1.948, 178, 4.26, 179, 3.652, 205, 1.725, 206, 3.652, 207, 1.685, 223, 4.123, 228, 2.943, 238, 4.037, 274, 2.943, 291, 3.364, 293, 1.671, 294, 4.037, 297, 2.394, 298, 4.037, 300, 1.699, 301, 2.478, 302, 5.31, 944, 2.887, 964, 3.652, 993, 4.037, 994, 5.31, 995, 5.31, 996, 4.621, 997, 4.621, 998, 6.08, 999, 4.621, 1000, 4.621, 1001, 4.037, 1002, 4.037, 1003, 4.037, 1004, 4.621, 1005, 4.621, 1006, 4.621, 1007, 3.652, 1008, 4.621]], ["title/injectables/LocalAuthGuard.html", [100, 0.807, 167, 2.994]], ["body/injectables/LocalAuthGuard.html", [3, 0.182, 4, 0.182, 5, 0.122, 7, 0.288, 8, 0.012, 12, 0.926, 18, 0.182, 19, 0.273, 23, 0.011, 24, 0.011, 100, 1.432, 101, 2.261, 167, 5.315, 228, 3.948, 943, 4.898, 944, 3.467, 961, 5.415, 1009, 5.415, 1010, 7.302]], ["title/injectables/LocalStrategy.html", [100, 0.807, 224, 2.79]], ["body/injectables/LocalStrategy.html", [3, 0.145, 4, 0.145, 5, 0.098, 7, 0.292, 8, 0.013, 12, 0.74, 18, 0.145, 19, 0.218, 20, 1.939, 23, 0.009, 24, 0.009, 87, 2.313, 94, 1.298, 100, 1.248, 101, 1.806, 103, 0.568, 104, 1.778, 106, 0.917, 108, 1.384, 109, 1.172, 130, 1.959, 131, 0.759, 132, 1.836, 137, 2.028, 140, 0.852, 165, 4.717, 166, 3.913, 168, 3.913, 186, 3.452, 187, 4.326, 205, 1.257, 207, 1.806, 224, 4.313, 228, 3.154, 261, 2.978, 262, 5.555, 274, 3.154, 332, 1.526, 334, 1.686, 341, 2.688, 347, 3.605, 395, 2.257, 554, 2.565, 586, 3.359, 587, 3.359, 588, 4.023, 944, 3.019, 959, 5.555, 964, 3.913, 994, 5.555, 995, 5.555, 1001, 4.326, 1003, 4.326, 1011, 4.326, 1012, 4.953, 1013, 4.953, 1014, 6.359, 1015, 4.953, 1016, 4.953]], ["title/controllers/MailController.html", [0, 1.15, 1017, 2.994]], ["body/controllers/MailController.html", [0, 1.048, 2, 1.048, 3, 0.11, 4, 0.11, 5, 0.104, 7, 0.311, 8, 0.013, 12, 0.56, 15, 3.478, 16, 2.034, 18, 0.11, 19, 0.165, 20, 1.467, 21, 3.054, 22, 1.522, 23, 0.008, 24, 0.008, 56, 1.048, 61, 1.857, 62, 1.32, 63, 1.857, 64, 1.015, 75, 2.962, 87, 2.008, 94, 0.983, 103, 0.43, 104, 1.474, 106, 0.54, 108, 1.048, 118, 1.78, 127, 0.952, 131, 0.447, 163, 1.942, 170, 2.503, 171, 1.78, 172, 1.642, 182, 1.857, 183, 1.522, 186, 2.034, 205, 1.836, 207, 2.224, 263, 2.387, 275, 2.034, 286, 1.522, 300, 1.474, 332, 1.155, 334, 1.276, 369, 1.194, 419, 3.31, 431, 2.034, 485, 2.403, 528, 3.17, 558, 2.861, 563, 2.542, 584, 2.387, 715, 2.309, 716, 2.387, 717, 2.728, 738, 4.438, 810, 3.274, 858, 2.254, 882, 2.254, 887, 2.728, 925, 3.274, 932, 3.274, 954, 3.837, 992, 3.837, 1017, 3.837, 1018, 3.274, 1019, 6.098, 1020, 6.616, 1021, 5.272, 1022, 5.272, 1023, 3.748, 1024, 3.748, 1025, 3.883, 1026, 3.274, 1027, 6.098, 1028, 2.728, 1029, 2.962, 1030, 2.138, 1031, 2.542, 1032, 2.387, 1033, 3.274, 1034, 3.274, 1035, 3.748, 1036, 3.748, 1037, 3.748, 1038, 3.274, 1039, 3.274, 1040, 3.748, 1041, 3.748, 1042, 3.748, 1043, 5.272, 1044, 3.748, 1045, 3.748, 1046, 4.605, 1047, 3.748, 1048, 3.748, 1049, 5.272, 1050, 3.748, 1051, 3.748, 1052, 3.748, 1053, 3.748, 1054, 5.272, 1055, 3.748, 1056, 3.748, 1057, 3.748, 1058, 3.748, 1059, 3.748, 1060, 3.748, 1061, 3.748, 1062, 3.748, 1063, 3.748, 1064, 3.748, 1065, 3.748, 1066, 3.748, 1067, 3.748, 1068, 3.748, 1069, 3.748, 1070, 3.748, 1071, 3.748, 1072, 5.326, 1073, 3.748, 1074, 3.748, 1075, 3.748, 1076, 3.748, 1077, 3.748, 1078, 3.274, 1079, 3.748, 1080, 3.748, 1081, 3.748, 1082, 3.748]], ["title/modules/MailModule.html", [25, 0.834, 43, 2.79]], ["body/modules/MailModule.html", [2, 1.678, 3, 0.133, 4, 0.133, 5, 0.089, 7, 0.319, 8, 0.013, 12, 0.677, 15, 4.086, 16, 2.461, 18, 0.133, 19, 0.199, 23, 0.009, 24, 0.009, 25, 1.364, 27, 1.841, 28, 1.911, 29, 2.066, 30, 2.066, 31, 1.911, 32, 3.067, 33, 2.066, 43, 5.193, 49, 2.736, 50, 2.066, 51, 1.986, 53, 2.066, 55, 2.348, 56, 1.267, 86, 3.582, 87, 1.493, 95, 3.582, 98, 2.267, 119, 3.96, 131, 0.716, 137, 1.309, 259, 3.96, 334, 1.544, 414, 2.461, 416, 2.437, 640, 2.887, 715, 1.986, 717, 3.3, 883, 4.071, 921, 3.582, 1007, 3.582, 1017, 4.899, 1025, 4.876, 1026, 3.96, 1028, 4.369, 1029, 3.582, 1030, 2.586, 1032, 3.823, 1033, 3.96, 1072, 3.96, 1083, 3.96, 1084, 3.96, 1085, 4.533, 1086, 4.533, 1087, 4.533, 1088, 6.003, 1089, 4.533, 1090, 3.96, 1091, 3.96, 1092, 4.533, 1093, 4.533, 1094, 4.533, 1095, 4.533, 1096, 4.533, 1097, 4.533, 1098, 4.533, 1099, 4.533, 1100, 3.96, 1101, 4.533, 1102, 4.533, 1103, 4.533, 1104, 4.533, 1105, 4.533]], ["title/injectables/MailService.html", [100, 0.807, 1025, 2.62]], ["body/injectables/MailService.html", [3, 0.187, 4, 0.187, 5, 0.126, 7, 0.252, 8, 0.012, 12, 0.954, 18, 0.187, 19, 0.281, 23, 0.011, 24, 0.011, 100, 1.457, 101, 2.328, 1025, 4.731, 1106, 5.576]], ["title/injectables/MulterConfigService.html", [100, 0.807, 825, 2.994]], ["body/injectables/MulterConfigService.html", [3, 0.12, 4, 0.12, 5, 0.135, 7, 0.283, 8, 0.013, 12, 0.61, 18, 0.12, 19, 0.18, 23, 0.008, 24, 0.008, 94, 1.673, 98, 1.543, 100, 1.098, 101, 1.489, 103, 0.468, 104, 1.564, 106, 0.92, 108, 1.564, 109, 0.954, 130, 1.258, 131, 0.762, 132, 1.179, 133, 4.887, 140, 0.547, 160, 3.567, 176, 2.329, 205, 1.743, 244, 1.514, 263, 4.064, 264, 2.77, 306, 1.142, 351, 4.58, 560, 2.77, 640, 3.563, 659, 1.861, 725, 2.973, 770, 4.887, 787, 3.567, 796, 2.973, 825, 4.073, 1090, 3.567, 1100, 3.567, 1107, 3.567, 1108, 6.382, 1109, 6.865, 1110, 5.595, 1111, 4.084, 1112, 6.382, 1113, 5.595, 1114, 4.084, 1115, 4.084, 1116, 4.084, 1117, 4.084, 1118, 5.595, 1119, 5.595, 1120, 5.595, 1121, 4.084, 1122, 4.084, 1123, 4.084, 1124, 4.084, 1125, 4.084, 1126, 4.084, 1127, 5.595, 1128, 4.084, 1129, 4.084, 1130, 5.595, 1131, 4.084, 1132, 4.084, 1133, 4.084, 1134, 4.084, 1135, 6.382, 1136, 4.084, 1137, 4.084, 1138, 4.084, 1139, 4.084, 1140, 4.084, 1141, 4.084, 1142, 4.084, 1143, 4.084, 1144, 4.084, 1145, 4.084, 1146, 4.084, 1147, 5.595, 1148, 4.084, 1149, 4.084, 1150, 4.084, 1151, 5.595, 1152, 4.084, 1153, 4.084, 1154, 4.084, 1155, 5.595, 1156, 5.595, 1157, 4.084, 1158, 4.084, 1159, 4.084, 1160, 5.595, 1161, 4.084, 1162, 5.595, 1163, 4.084]], ["title/classes/Permission.html", [19, 0.181, 659, 1.875]], ["body/classes/Permission.html", [3, 0.114, 4, 0.114, 5, 0.076, 7, 0.212, 8, 0.013, 18, 0.182, 19, 0.17, 23, 0.008, 24, 0.008, 25, 1.36, 56, 1.082, 64, 1.459, 98, 1.462, 103, 0.444, 106, 1.145, 109, 1.187, 127, 2.017, 131, 0.74, 140, 1.11, 205, 0.982, 244, 1.459, 293, 1.525, 300, 1.734, 321, 2.718, 342, 3.538, 343, 3.538, 416, 2.189, 441, 2.718, 496, 2.718, 497, 2.827, 499, 0.982, 502, 3.731, 504, 3.731, 506, 3.538, 507, 5.016, 509, 4.393, 511, 3.538, 512, 3.731, 513, 3.079, 518, 2.926, 524, 2.327, 525, 3.075, 526, 2.327, 528, 3.242, 532, 3.075, 533, 2.464, 534, 1.917, 535, 2.464, 536, 2.464, 537, 2.519, 638, 3.951, 639, 3.951, 659, 2.457, 696, 2.625, 718, 2.625, 881, 2.625, 882, 2.327, 1164, 2.817, 1165, 3.87, 1166, 3.87, 1167, 3.87, 1168, 3.87, 1169, 3.87, 1170, 3.87, 1171, 3.87, 1172, 3.87, 1173, 3.87, 1174, 3.87, 1175, 3.87, 1176, 3.38]], ["title/controllers/PermissionsController.html", [0, 1.15, 1177, 2.994]], ["body/controllers/PermissionsController.html", [0, 0.953, 2, 0.953, 3, 0.1, 4, 0.1, 5, 0.067, 7, 0.285, 8, 0.013, 9, 2.441, 12, 0.509, 18, 0.1, 19, 0.15, 22, 1.384, 23, 0.007, 24, 0.007, 62, 1.735, 83, 2.671, 87, 1.905, 94, 1.762, 103, 0.391, 104, 1.377, 106, 0.969, 108, 1.879, 109, 1.218, 118, 1.618, 127, 1.707, 130, 2.071, 131, 0.802, 132, 1.941, 135, 2.696, 137, 2.33, 140, 0.9, 141, 1.334, 163, 2.997, 170, 2.747, 171, 1.618, 172, 1.493, 177, 1.437, 182, 1.689, 183, 1.384, 205, 0.865, 207, 1.243, 293, 0.838, 297, 2.552, 306, 1.617, 321, 1.493, 334, 1.677, 359, 2.349, 360, 2.349, 361, 2, 362, 2.481, 366, 1.493, 367, 2.776, 368, 2.17, 370, 2.311, 372, 2.158, 373, 1.384, 374, 3.479, 375, 2.311, 377, 2.519, 378, 1.384, 379, 1.944, 381, 1.618, 383, 2.17, 385, 1.85, 386, 1.944, 387, 2.077, 390, 1.384, 392, 1.384, 395, 1.553, 398, 2.81, 399, 2.05, 400, 2.05, 402, 1.944, 403, 2.962, 406, 1.944, 635, 4.6, 659, 3.488, 715, 1.493, 889, 3.137, 890, 2.977, 894, 3.137, 898, 3.341, 912, 2.962, 1177, 3.586, 1178, 2.977, 1179, 2.977, 1180, 3.408, 1181, 3.408, 1182, 3.408, 1183, 3.408, 1184, 3.408, 1185, 5.016, 1186, 3.408, 1187, 3.408, 1188, 3.684, 1189, 2.977, 1190, 3.892, 1191, 3.408, 1192, 3.408, 1193, 2.977, 1194, 3.408, 1195, 3.408, 1196, 3.408, 1197, 3.408, 1198, 3.408, 1199, 3.408, 1200, 3.408]], ["title/modules/PermissionsModule.html", [25, 0.834, 44, 2.79]], ["body/modules/PermissionsModule.html", [2, 1.843, 3, 0.154, 4, 0.154, 5, 0.103, 7, 0.307, 8, 0.013, 12, 0.783, 18, 0.154, 19, 0.231, 23, 0.01, 24, 0.01, 25, 1.462, 27, 2.129, 28, 2.21, 29, 2.39, 30, 2.39, 31, 2.21, 32, 3.288, 33, 3.288, 44, 5.48, 49, 3.005, 50, 2.39, 51, 2.297, 53, 2.39, 55, 2.716, 56, 1.466, 131, 0.626, 414, 2.846, 416, 2.129, 659, 2.39, 696, 4.472, 702, 4.143, 1177, 5.25, 1188, 5.347, 1189, 4.58, 1201, 4.58, 1202, 4.58, 1203, 4.58, 1204, 5.244, 1205, 5.244, 1206, 4.58]], ["title/injectables/PermissionsService.html", [100, 0.807, 1188, 2.62]], ["body/injectables/PermissionsService.html", [3, 0.082, 4, 0.082, 5, 0.055, 7, 0.292, 8, 0.013, 12, 0.418, 18, 0.082, 19, 0.123, 20, 1.666, 21, 1.226, 23, 0.006, 24, 0.006, 25, 0.863, 56, 0.782, 61, 1.387, 62, 1.814, 63, 1.387, 64, 1.394, 83, 2.857, 87, 2.476, 94, 1.709, 100, 0.835, 101, 1.02, 103, 0.321, 104, 1.19, 106, 0.94, 108, 1.73, 109, 1.124, 130, 2.009, 131, 0.834, 132, 1.882, 135, 2.57, 137, 2.065, 140, 0.873, 141, 2.253, 177, 1.18, 205, 1.816, 207, 2.377, 268, 1.683, 278, 2.851, 293, 1.666, 300, 1.439, 306, 1.19, 332, 0.862, 334, 1.753, 341, 2.795, 351, 1.782, 359, 1.728, 360, 1.728, 361, 1.728, 362, 2.016, 366, 1.864, 367, 2.256, 372, 2.256, 373, 1.728, 377, 2.436, 378, 1.728, 381, 1.329, 387, 2.171, 390, 1.136, 392, 1.136, 419, 3.123, 425, 2.971, 431, 1.519, 432, 2.444, 433, 2.444, 434, 1.683, 435, 1.519, 436, 1.596, 441, 1.226, 442, 3.097, 443, 3.097, 444, 1.683, 445, 1.683, 446, 1.683, 447, 1.683, 448, 1.683, 449, 1.683, 450, 1.683, 451, 1.683, 452, 1.683, 453, 1.519, 454, 2.559, 455, 1.683, 456, 2.559, 458, 2.559, 459, 1.683, 460, 2.559, 462, 1.683, 463, 1.683, 464, 1.683, 465, 1.683, 466, 1.683, 467, 1.683, 468, 1.683, 469, 1.683, 470, 2.559, 471, 1.683, 472, 2.559, 473, 1.683, 474, 1.519, 475, 2.559, 476, 2.559, 477, 1.683, 478, 1.683, 479, 2.559, 480, 1.596, 481, 1.683, 482, 1.683, 483, 1.683, 484, 1.683, 485, 1.275, 486, 1.519, 487, 1.683, 491, 3.097, 493, 1.683, 496, 1.226, 497, 1.275, 635, 4.152, 638, 3.279, 639, 3.279, 659, 2.623, 718, 1.898, 728, 2.444, 931, 2.037, 937, 2.037, 938, 1.898, 983, 2.886, 1179, 3.717, 1185, 4.736, 1188, 2.71, 1190, 3.363, 1193, 3.717, 1206, 2.444, 1207, 2.444, 1208, 2.798, 1209, 2.798, 1210, 4.256, 1211, 2.798, 1212, 2.798, 1213, 2.798, 1214, 2.798, 1215, 2.798, 1216, 2.798, 1217, 2.798, 1218, 2.798, 1219, 2.798, 1220, 2.798, 1221, 2.798, 1222, 4.256, 1223, 2.798, 1224, 2.798, 1225, 2.798, 1226, 2.798]], ["title/classes/RegisterUserDto.html", [19, 0.181, 158, 2.233]], ["body/classes/RegisterUserDto.html", [3, 0.091, 4, 0.091, 5, 0.061, 7, 0.239, 8, 0.013, 18, 0.161, 19, 0.298, 22, 1.867, 23, 0.007, 24, 0.007, 64, 1.483, 103, 0.356, 106, 0.977, 109, 1.219, 127, 1.721, 131, 0.772, 140, 0.965, 158, 2.496, 173, 1.866, 174, 4.218, 183, 1.26, 186, 2.974, 244, 1.245, 261, 2.765, 275, 1.684, 286, 3.299, 293, 0.763, 300, 2.093, 301, 1.677, 332, 2.523, 355, 1.473, 369, 1.93, 377, 1.056, 492, 1.684, 499, 0.788, 501, 3.289, 503, 1.938, 513, 1.308, 534, 3.002, 537, 1.867, 541, 3.841, 544, 2.762, 545, 2.278, 546, 2.278, 547, 2.278, 548, 1.359, 549, 1.769, 550, 1.537, 551, 1.866, 553, 3.374, 554, 2.838, 556, 3.841, 576, 1.976, 579, 2.765, 580, 3.716, 581, 3.988, 582, 1.684, 583, 3.489, 584, 3.489, 585, 3.988, 586, 3.716, 587, 3.716, 588, 3.679, 589, 3.988, 590, 3.644, 591, 4.411, 592, 4.411, 593, 3.644, 594, 2.765, 595, 3.347, 596, 2.258, 597, 3.347, 605, 3.512, 679, 2.71, 1227, 3.102, 1228, 3.102, 1229, 3.102, 1230, 3.102, 1231, 3.102, 1232, 3.102]], ["title/interfaces/Response.html", [143, 2.474, 858, 2.474]], ["body/interfaces/Response.html", [3, 0.148, 4, 0.148, 5, 0.099, 7, 0.304, 8, 0.013, 12, 0.754, 18, 0.189, 19, 0.222, 23, 0.009, 24, 0.009, 94, 1.323, 100, 1.263, 103, 0.579, 109, 1.059, 132, 1.858, 140, 0.949, 143, 3.87, 172, 2.21, 244, 1.742, 395, 2.3, 425, 3.23, 550, 3.906, 553, 3.25, 725, 3.673, 858, 3.034, 859, 3.987, 949, 5.599, 952, 4.684, 954, 3.673, 960, 3.673, 967, 3.987, 1233, 3.987, 1234, 6.734, 1235, 5.621, 1236, 5.621, 1237, 5.621, 1238, 3.987, 1239, 4.407, 1240, 4.407, 1241, 3.673, 1242, 3.673, 1243, 4.407, 1244, 4.407, 1245, 4.407, 1246, 4.407, 1247, 4.407, 1248, 4.407]], ["title/classes/Resume.html", [19, 0.181, 1249, 2.474]], ["body/classes/Resume.html", [3, 0.099, 4, 0.099, 5, 0.066, 7, 0.248, 8, 0.013, 18, 0.169, 19, 0.148, 23, 0.007, 24, 0.007, 25, 0.683, 56, 0.942, 64, 1.323, 98, 1.273, 103, 0.387, 106, 1.146, 109, 1.155, 127, 2.019, 140, 1.116, 205, 0.856, 244, 1.323, 293, 1.55, 300, 2.013, 321, 2.518, 342, 3.279, 343, 3.279, 369, 1.073, 415, 2.944, 416, 1.984, 438, 3.899, 441, 2.518, 496, 2.762, 497, 2.62, 499, 0.856, 502, 3.457, 504, 3.457, 506, 3.279, 507, 4.987, 509, 4.33, 511, 3.596, 512, 4.197, 513, 2.942, 518, 2.653, 524, 2.027, 525, 2.787, 526, 2.027, 528, 2.939, 532, 2.787, 533, 2.146, 534, 1.67, 535, 2.146, 536, 2.146, 537, 3.174, 601, 4.184, 602, 4.184, 603, 4.015, 604, 4.184, 715, 1.477, 717, 2.453, 881, 2.286, 882, 2.027, 921, 2.663, 1249, 2.939, 1250, 2.453, 1251, 5.021, 1252, 5.288, 1253, 4.982, 1254, 3.371, 1255, 3.371, 1256, 3.371, 1257, 3.371, 1258, 3.371, 1259, 3.371, 1260, 3.371, 1261, 3.371, 1262, 3.371, 1263, 3.371, 1264, 3.371, 1265, 3.371, 1266, 3.371, 1267, 3.371, 1268, 3.371, 1269, 2.453, 1270, 3.371, 1271, 3.371, 1272, 2.453, 1273, 2.944]], ["title/controllers/ResumesController.html", [0, 1.15, 1274, 2.994]], ["body/controllers/ResumesController.html", [0, 0.901, 2, 0.901, 3, 0.095, 4, 0.095, 5, 0.064, 7, 0.287, 8, 0.013, 9, 2.344, 12, 0.482, 18, 0.095, 19, 0.142, 22, 1.309, 23, 0.007, 24, 0.007, 62, 1.666, 83, 2.602, 87, 1.845, 94, 1.801, 103, 0.37, 104, 1.322, 106, 0.99, 108, 1.921, 109, 1.225, 118, 1.531, 127, 1.745, 130, 2.117, 131, 0.82, 132, 1.984, 135, 2.757, 136, 2.816, 137, 2.366, 140, 0.92, 141, 1.262, 163, 1.67, 170, 1.531, 171, 1.531, 172, 1.412, 177, 1.359, 182, 1.597, 183, 1.309, 205, 0.818, 207, 1.176, 273, 2.547, 274, 2.053, 293, 0.793, 306, 1.322, 321, 1.412, 334, 1.611, 359, 2.275, 360, 2.275, 361, 1.921, 362, 2.417, 366, 1.412, 367, 2.704, 368, 2.053, 372, 2.072, 373, 1.309, 374, 3.37, 377, 2.48, 378, 1.309, 379, 1.839, 381, 1.531, 383, 2.053, 385, 1.75, 386, 1.839, 387, 1.994, 390, 1.309, 392, 1.309, 395, 1.469, 396, 2.186, 398, 3.196, 399, 1.939, 400, 1.939, 402, 1.839, 403, 2.845, 406, 1.839, 603, 4.376, 613, 4.27, 715, 1.412, 887, 2.346, 889, 3.012, 894, 3.012, 912, 2.845, 1249, 4.27, 1274, 3.443, 1275, 2.816, 1276, 5.742, 1277, 4.73, 1278, 2.816, 1279, 3.224, 1280, 3.224, 1281, 3.224, 1282, 3.224, 1283, 4.73, 1284, 3.224, 1285, 3.224, 1286, 2.816, 1287, 3.224, 1288, 3.224, 1289, 3.224, 1290, 4.73, 1291, 3.224, 1292, 3.224, 1293, 3.568, 1294, 2.816, 1295, 3.738, 1296, 2.186, 1297, 3.224, 1298, 3.224, 1299, 2.816, 1300, 3.224, 1301, 3.224, 1302, 3.224, 1303, 3.224, 1304, 3.224, 1305, 3.224, 1306, 3.224, 1307, 3.224, 1308, 3.224, 1309, 3.224, 1310, 3.224]], ["title/modules/ResumesModule.html", [25, 0.834, 45, 2.79]], ["body/modules/ResumesModule.html", [2, 1.849, 3, 0.155, 4, 0.155, 5, 0.104, 7, 0.308, 8, 0.013, 12, 0.787, 18, 0.155, 19, 0.232, 23, 0.01, 24, 0.01, 25, 1.465, 27, 2.14, 28, 2.221, 29, 2.402, 30, 2.402, 31, 2.221, 32, 3.295, 33, 3.295, 45, 5.486, 49, 3.015, 50, 2.402, 51, 2.308, 53, 2.402, 55, 2.73, 56, 1.473, 131, 0.629, 414, 2.86, 416, 2.14, 1249, 3.169, 1272, 4.815, 1274, 5.262, 1293, 5.35, 1294, 4.603, 1311, 4.603, 1312, 4.603, 1313, 4.603, 1314, 5.269, 1315, 5.269, 1316, 4.603, 1317, 5.269]], ["title/injectables/ResumesService.html", [100, 0.807, 1293, 2.62]], ["body/injectables/ResumesService.html", [3, 0.066, 4, 0.066, 5, 0.045, 7, 0.264, 8, 0.013, 12, 0.338, 18, 0.066, 19, 0.1, 20, 1.412, 21, 0.991, 23, 0.005, 24, 0.005, 56, 0.633, 61, 1.121, 62, 1.584, 63, 1.121, 64, 1.217, 83, 2.641, 87, 2.515, 94, 1.565, 100, 0.708, 101, 0.825, 103, 0.26, 104, 1.008, 106, 0.903, 108, 1.669, 109, 1.111, 130, 1.93, 131, 0.8, 132, 1.809, 135, 2.554, 137, 1.984, 140, 0.839, 141, 2.338, 177, 0.954, 186, 1.228, 205, 1.651, 207, 2.285, 268, 1.361, 275, 1.958, 278, 3.223, 279, 2.297, 281, 1.788, 283, 3.05, 286, 2.276, 293, 1.599, 300, 1.434, 306, 1.008, 321, 0.991, 332, 1.112, 334, 2.133, 341, 1.958, 345, 1.977, 347, 2.626, 359, 1.465, 360, 1.465, 361, 1.465, 362, 1.412, 366, 1.58, 367, 1.97, 372, 1.97, 373, 1.465, 377, 2.133, 378, 1.465, 381, 1.713, 387, 1.896, 390, 0.919, 392, 0.919, 419, 2.785, 425, 2.721, 431, 1.228, 434, 1.361, 435, 1.228, 436, 1.291, 438, 2.446, 442, 3.591, 443, 3.085, 444, 1.361, 445, 1.361, 446, 2.169, 447, 1.361, 448, 1.361, 449, 1.361, 450, 1.361, 451, 1.361, 452, 1.361, 453, 2.441, 454, 2.169, 455, 1.361, 456, 2.169, 458, 2.169, 459, 1.361, 460, 2.169, 462, 1.361, 463, 1.361, 464, 1.361, 465, 1.361, 466, 1.361, 467, 1.361, 468, 1.361, 469, 1.361, 470, 2.169, 471, 2.705, 472, 3.37, 473, 1.361, 474, 1.228, 475, 2.169, 476, 2.169, 477, 2.705, 478, 1.361, 479, 2.169, 480, 1.291, 481, 2.169, 482, 2.169, 483, 1.361, 484, 1.361, 485, 1.031, 486, 1.228, 487, 1.361, 491, 2.169, 493, 1.361, 496, 1.97, 497, 1.031, 506, 3.196, 509, 4.031, 531, 1.647, 559, 1.535, 566, 2.446, 567, 1.788, 573, 1.441, 574, 1.441, 594, 2.169, 601, 3.274, 602, 3.274, 603, 4.142, 604, 2.626, 613, 3.591, 640, 2.297, 748, 2.626, 751, 1.788, 882, 1.361, 938, 1.535, 990, 3.151, 992, 1.647, 1078, 3.151, 1249, 1.361, 1251, 3.151, 1269, 1.647, 1278, 3.151, 1293, 2.297, 1295, 2.85, 1296, 1.535, 1299, 3.151, 1316, 1.977, 1318, 1.977, 1319, 3.607, 1320, 2.263, 1321, 2.263, 1322, 3.607, 1323, 2.263, 1324, 2.263, 1325, 3.607, 1326, 2.263, 1327, 2.263, 1328, 2.263, 1329, 2.263, 1330, 2.263, 1331, 2.263, 1332, 3.607, 1333, 2.263, 1334, 2.263, 1335, 2.263, 1336, 2.263, 1337, 4.498, 1338, 3.554, 1339, 3.607, 1340, 3.607, 1341, 3.607, 1342, 3.151, 1343, 2.263, 1344, 5.131, 1345, 4.498, 1346, 1.977, 1347, 2.263, 1348, 2.263, 1349, 3.607, 1350, 2.263, 1351, 2.263, 1352, 2.263, 1353, 2.263, 1354, 2.263, 1355, 3.607, 1356, 2.263, 1357, 1.977, 1358, 2.263, 1359, 2.263, 1360, 2.263, 1361, 1.977, 1362, 2.263, 1363, 2.263, 1364, 2.263, 1365, 2.263, 1366, 2.263, 1367, 2.263, 1368, 3.607, 1369, 2.263, 1370, 1.788, 1371, 2.263, 1372, 2.263, 1373, 3.607, 1374, 2.263, 1375, 3.607, 1376, 2.263, 1377, 2.263, 1378, 2.263, 1379, 2.263, 1380, 2.263, 1381, 2.263, 1382, 1.977, 1383, 2.85]], ["title/classes/Role.html", [19, 0.181, 301, 1.5]], ["body/classes/Role.html", [3, 0.111, 4, 0.111, 5, 0.075, 7, 0.241, 8, 0.013, 18, 0.18, 19, 0.166, 23, 0.008, 24, 0.008, 25, 0.766, 56, 1.057, 64, 1.436, 98, 1.428, 103, 0.434, 106, 1.14, 109, 1.113, 127, 2.009, 131, 0.731, 140, 1.111, 205, 0.96, 244, 1.436, 293, 1.506, 297, 3.174, 300, 1.713, 301, 1.934, 321, 2.684, 342, 3.494, 343, 3.494, 416, 2.154, 441, 2.684, 496, 2.684, 497, 2.792, 499, 0.96, 502, 3.684, 503, 2.583, 504, 3.684, 506, 3.494, 507, 4.987, 509, 4.361, 511, 3.494, 512, 3.994, 513, 3.057, 518, 3.605, 524, 2.274, 525, 3.025, 526, 2.274, 528, 3.19, 532, 3.025, 533, 2.408, 534, 1.873, 535, 2.408, 536, 2.408, 537, 2.697, 575, 3.494, 659, 2.792, 697, 2.988, 700, 2.408, 702, 2.988, 719, 2.408, 881, 2.564, 882, 2.274, 1252, 4.191, 1253, 4.191, 1384, 2.752, 1385, 3.781, 1386, 3.781, 1387, 3.781, 1388, 3.781, 1389, 3.781, 1390, 3.781, 1391, 3.781, 1392, 3.781, 1393, 3.781, 1394, 3.781, 1395, 3.781, 1396, 3.303]], ["title/controllers/RolesController.html", [0, 1.15, 1397, 2.994]], ["body/controllers/RolesController.html", [0, 0.959, 2, 0.959, 3, 0.101, 4, 0.101, 5, 0.068, 7, 0.285, 8, 0.013, 9, 2.452, 12, 0.512, 18, 0.101, 19, 0.151, 22, 1.393, 23, 0.007, 24, 0.007, 62, 1.743, 83, 2.679, 87, 1.911, 94, 1.767, 103, 0.393, 104, 1.383, 106, 0.971, 108, 1.884, 109, 1.219, 118, 1.629, 127, 1.711, 130, 2.077, 131, 0.804, 132, 1.946, 135, 2.7, 137, 2.332, 140, 0.903, 141, 1.343, 163, 2.564, 170, 2.757, 171, 1.629, 172, 1.503, 177, 1.446, 178, 3.151, 182, 1.7, 183, 1.393, 205, 0.871, 207, 1.251, 293, 0.843, 301, 2.753, 306, 1.383, 321, 1.503, 334, 1.685, 359, 2.357, 360, 2.357, 361, 2.01, 362, 2.488, 366, 1.503, 367, 2.784, 368, 2.184, 370, 2.326, 372, 2.168, 373, 1.393, 374, 3.491, 375, 2.326, 377, 2.523, 378, 1.393, 379, 1.956, 381, 1.629, 383, 2.184, 385, 1.862, 386, 1.956, 387, 2.086, 390, 1.393, 392, 1.393, 395, 1.563, 396, 2.326, 398, 2.823, 399, 2.063, 400, 2.063, 402, 1.956, 403, 2.976, 406, 1.956, 648, 4.471, 715, 2.543, 889, 3.151, 894, 3.151, 898, 3.356, 912, 2.976, 1397, 3.602, 1398, 2.996, 1399, 2.996, 1400, 2.996, 1401, 3.43, 1402, 3.43, 1403, 3.43, 1404, 3.43, 1405, 3.43, 1406, 3.43, 1407, 5.025, 1408, 3.43, 1409, 3.43, 1410, 2.996, 1411, 3.91, 1412, 3.43, 1413, 3.43, 1414, 2.996, 1415, 3.43, 1416, 3.43, 1417, 3.43, 1418, 3.43, 1419, 3.43, 1420, 3.43, 1421, 3.43]], ["title/modules/RolesModule.html", [25, 0.834, 46, 2.62]], ["body/modules/RolesModule.html", [2, 1.849, 3, 0.155, 4, 0.155, 5, 0.104, 7, 0.308, 8, 0.013, 12, 0.787, 18, 0.155, 19, 0.232, 23, 0.01, 24, 0.01, 25, 1.465, 27, 2.14, 28, 2.221, 29, 2.402, 30, 2.402, 31, 2.221, 32, 3.295, 33, 3.295, 46, 5.151, 49, 3.015, 50, 2.402, 51, 2.308, 53, 2.402, 55, 2.73, 56, 1.473, 131, 0.629, 178, 4.56, 301, 1.922, 414, 2.86, 416, 2.14, 700, 4.212, 704, 3.835, 1397, 5.262, 1410, 4.603, 1422, 4.603, 1423, 4.603, 1424, 4.603, 1425, 5.269, 1426, 5.269, 1427, 4.603]], ["title/injectables/RolesService.html", [100, 0.807, 178, 2.233]], ["body/injectables/RolesService.html", [3, 0.079, 4, 0.079, 5, 0.053, 7, 0.289, 8, 0.013, 12, 0.4, 18, 0.079, 19, 0.118, 20, 1.61, 21, 1.172, 23, 0.006, 24, 0.006, 25, 0.542, 56, 0.748, 61, 1.326, 62, 1.765, 63, 1.326, 64, 1.356, 83, 2.812, 87, 2.533, 94, 1.679, 100, 0.807, 101, 0.976, 103, 0.307, 104, 1.15, 106, 0.923, 108, 1.696, 109, 1.112, 130, 1.974, 131, 0.888, 132, 1.849, 135, 2.54, 137, 2.039, 140, 0.858, 141, 2.375, 177, 1.128, 178, 2.232, 205, 1.83, 207, 2.511, 268, 1.609, 278, 2.786, 279, 1.704, 293, 1.64, 297, 2.595, 300, 1.4, 301, 1.827, 306, 1.15, 332, 1.267, 334, 1.706, 341, 2.719, 351, 1.704, 355, 1.271, 359, 1.67, 360, 1.67, 361, 1.67, 362, 1.61, 366, 1.802, 367, 2.194, 372, 2.194, 373, 1.67, 377, 2.272, 378, 1.67, 381, 1.953, 387, 2.112, 390, 1.087, 392, 1.087, 419, 3.052, 425, 2.92, 431, 1.453, 434, 1.609, 435, 1.453, 436, 1.526, 441, 1.172, 442, 3.012, 443, 3.012, 444, 1.609, 445, 1.609, 446, 1.609, 447, 1.609, 448, 1.609, 449, 1.609, 450, 1.609, 451, 1.609, 452, 1.609, 453, 3.477, 454, 2.473, 455, 1.609, 456, 2.473, 458, 2.473, 459, 1.609, 460, 2.473, 462, 1.609, 463, 1.609, 464, 1.609, 465, 1.609, 466, 1.609, 467, 1.609, 468, 1.609, 469, 1.609, 470, 2.473, 471, 1.609, 472, 3.012, 473, 1.609, 474, 1.453, 475, 2.473, 476, 2.473, 477, 1.609, 478, 1.609, 479, 2.473, 480, 2.346, 481, 1.609, 482, 1.609, 483, 1.609, 484, 1.609, 485, 1.22, 486, 1.453, 487, 1.609, 491, 2.473, 493, 2.473, 496, 1.172, 497, 1.22, 503, 1.734, 531, 1.948, 555, 1.948, 559, 1.815, 575, 2.346, 638, 1.704, 639, 1.704, 640, 1.704, 648, 4.079, 657, 2.337, 719, 1.704, 721, 2.994, 726, 2.114, 743, 3.25, 931, 1.948, 937, 1.948, 938, 1.815, 983, 2.789, 1370, 2.114, 1383, 2.114, 1400, 3.592, 1407, 4.67, 1411, 3.25, 1414, 3.592, 1427, 2.337, 1428, 2.337, 1429, 2.676, 1430, 2.676, 1431, 3.592, 1432, 2.676, 1433, 2.676, 1434, 2.676, 1435, 2.676, 1436, 2.676, 1437, 2.337, 1438, 2.337, 1439, 2.676, 1440, 2.676, 1441, 4.113, 1442, 2.676, 1443, 2.676, 1444, 2.676, 1445, 3.592, 1446, 2.676, 1447, 2.676, 1448, 2.676, 1449, 2.676]], ["title/classes/Subscriber.html", [19, 0.181, 1030, 2.346]], ["body/classes/Subscriber.html", [3, 0.147, 4, 0.147, 5, 0.099, 7, 0.252, 8, 0.013, 18, 0.207, 19, 0.22, 23, 0.009, 24, 0.009, 25, 1.013, 56, 1.397, 64, 1.732, 98, 1.888, 103, 0.573, 106, 1.072, 109, 1.194, 127, 1.888, 131, 0.842, 140, 1.071, 205, 1.269, 244, 1.732, 293, 1.229, 300, 2.079, 342, 2.851, 343, 2.851, 416, 2.598, 441, 3.09, 499, 1.269, 507, 4.868, 511, 2.851, 512, 3.006, 513, 2.697, 524, 3.006, 525, 3.649, 526, 3.006, 537, 2.03, 558, 3.829, 881, 3.39, 882, 3.006, 1030, 3.649, 1031, 3.39, 1032, 3.183, 1450, 3.639, 1451, 4.999, 1452, 4.999, 1453, 4.999, 1454, 4.999, 1455, 4.366]], ["title/controllers/SubscribersController.html", [0, 1.15, 1456, 2.994]], ["body/controllers/SubscribersController.html", [0, 0.908, 2, 0.908, 3, 0.095, 4, 0.095, 5, 0.064, 7, 0.288, 8, 0.013, 9, 2.357, 12, 0.485, 18, 0.095, 19, 0.143, 22, 1.319, 23, 0.007, 24, 0.007, 62, 1.676, 83, 2.612, 87, 1.853, 94, 1.806, 103, 0.372, 104, 1.33, 106, 0.993, 108, 1.926, 109, 1.189, 118, 1.542, 127, 1.749, 130, 2.123, 131, 0.822, 132, 1.989, 135, 2.761, 137, 2.339, 140, 0.923, 141, 1.272, 143, 1.953, 163, 2.915, 170, 2.672, 171, 1.542, 172, 1.423, 176, 1.853, 177, 1.369, 182, 1.609, 183, 1.319, 205, 0.825, 207, 1.184, 293, 0.799, 306, 1.573, 334, 1.62, 359, 2.285, 360, 2.285, 361, 1.931, 362, 2.425, 366, 1.423, 367, 2.714, 368, 2.068, 369, 1.515, 370, 2.203, 372, 2.084, 373, 1.319, 374, 3.384, 375, 2.203, 377, 2.346, 378, 1.319, 379, 1.853, 385, 2.582, 386, 1.853, 387, 2.005, 390, 1.319, 392, 1.319, 395, 1.48, 398, 2.713, 399, 1.953, 400, 1.953, 402, 1.853, 403, 1.953, 406, 1.853, 441, 1.423, 558, 1.763, 668, 4.533, 889, 3.029, 894, 3.029, 898, 3.226, 912, 2.86, 1030, 4.247, 1046, 4.155, 1456, 3.462, 1457, 2.837, 1458, 4.757, 1459, 2.837, 1460, 3.248, 1461, 3.248, 1462, 3.248, 1463, 3.248, 1464, 3.248, 1465, 3.248, 1466, 4.757, 1467, 3.248, 1468, 3.248, 1469, 3.248, 1470, 3.248, 1471, 2.837, 1472, 4.673, 1473, 3.248, 1474, 3.248, 1475, 3.584, 1476, 2.837, 1477, 3.758, 1478, 4.447, 1479, 3.248, 1480, 3.248, 1481, 2.837, 1482, 3.248, 1483, 3.248, 1484, 3.248, 1485, 3.248, 1486, 3.248, 1487, 3.248, 1488, 3.248, 1489, 3.248, 1490, 3.248, 1491, 3.248, 1492, 3.248]], ["title/modules/SubscribersModule.html", [25, 0.834, 47, 2.79]], ["body/modules/SubscribersModule.html", [2, 1.843, 3, 0.154, 4, 0.154, 5, 0.103, 7, 0.307, 8, 0.013, 12, 0.783, 18, 0.154, 19, 0.231, 23, 0.01, 24, 0.01, 25, 1.462, 27, 2.129, 28, 2.21, 29, 2.39, 30, 2.39, 31, 2.21, 32, 3.288, 33, 3.288, 47, 5.48, 49, 3.005, 50, 2.39, 51, 2.297, 53, 2.39, 55, 2.716, 56, 1.466, 131, 0.626, 414, 2.846, 416, 2.129, 1030, 2.991, 1032, 4.199, 1091, 4.58, 1456, 5.25, 1475, 5.347, 1476, 4.58, 1493, 4.58, 1494, 4.58, 1495, 4.58, 1496, 5.244, 1497, 4.58, 1498, 5.244]], ["title/injectables/SubscribersService.html", [100, 0.807, 1475, 2.62]], ["body/injectables/SubscribersService.html", [3, 0.077, 4, 0.077, 5, 0.052, 7, 0.283, 8, 0.013, 12, 0.394, 18, 0.077, 19, 0.116, 20, 1.592, 21, 1.155, 23, 0.006, 24, 0.006, 56, 0.737, 61, 1.306, 62, 1.748, 63, 1.306, 64, 1.343, 83, 2.797, 87, 2.525, 94, 1.74, 98, 0.996, 100, 0.798, 101, 0.961, 103, 0.302, 104, 1.137, 106, 0.957, 108, 1.78, 109, 1.051, 130, 2.045, 131, 0.839, 132, 1.916, 135, 2.647, 137, 2.11, 140, 0.889, 141, 2.359, 177, 1.111, 205, 1.823, 207, 2.322, 268, 1.585, 278, 2.986, 293, 1.566, 300, 2.043, 306, 1.137, 332, 0.812, 334, 1.384, 341, 2.207, 351, 1.679, 359, 1.651, 360, 1.651, 361, 1.651, 362, 1.943, 366, 1.781, 367, 2.174, 372, 2.174, 373, 1.651, 377, 2.168, 378, 1.651, 387, 2.092, 390, 1.071, 392, 1.071, 419, 3.028, 425, 2.902, 431, 1.431, 434, 1.585, 435, 1.431, 436, 1.504, 441, 1.155, 442, 2.984, 443, 3.355, 444, 1.585, 445, 1.585, 446, 1.585, 447, 1.585, 448, 1.585, 449, 1.585, 450, 1.585, 451, 1.585, 452, 1.585, 453, 2.207, 454, 2.445, 455, 1.585, 456, 2.445, 458, 2.445, 459, 1.585, 460, 2.445, 462, 1.585, 463, 1.585, 464, 1.585, 465, 1.585, 466, 1.585, 467, 1.585, 468, 1.585, 469, 1.585, 470, 2.445, 471, 1.585, 472, 3.624, 473, 1.585, 474, 1.431, 475, 3.355, 476, 3.355, 477, 1.585, 478, 1.585, 479, 2.445, 480, 1.504, 481, 1.585, 482, 1.585, 483, 1.585, 484, 1.585, 485, 1.202, 486, 1.431, 487, 1.585, 488, 2.303, 491, 2.445, 493, 3.355, 496, 1.155, 497, 1.202, 558, 2.694, 668, 4.055, 748, 1.919, 931, 1.919, 937, 1.919, 938, 1.788, 983, 2.757, 992, 1.919, 1030, 2.831, 1031, 1.788, 1038, 2.303, 1039, 3.552, 1338, 2.083, 1342, 2.303, 1357, 3.552, 1459, 3.552, 1471, 3.552, 1472, 4.318, 1475, 2.589, 1477, 3.213, 1481, 3.552, 1497, 2.303, 1499, 2.303, 1500, 4.066, 1501, 2.636, 1502, 2.636, 1503, 2.636, 1504, 2.636, 1505, 2.636, 1506, 4.066, 1507, 2.636, 1508, 2.636, 1509, 2.636, 1510, 4.963, 1511, 2.636, 1512, 2.303, 1513, 2.636, 1514, 4.066, 1515, 2.636, 1516, 2.636, 1517, 4.066, 1518, 2.636, 1519, 2.636, 1520, 2.636, 1521, 2.636]], ["title/injectables/TransformInterceptor.html", [100, 0.807, 1242, 2.994]], ["body/injectables/TransformInterceptor.html", [3, 0.144, 4, 0.144, 5, 0.097, 7, 0.301, 8, 0.013, 12, 0.735, 18, 0.186, 19, 0.216, 20, 1.925, 23, 0.009, 24, 0.009, 94, 1.289, 100, 1.242, 101, 1.794, 103, 0.564, 104, 1.77, 106, 0.913, 108, 1.375, 109, 0.735, 130, 1.951, 131, 0.756, 132, 1.828, 140, 0.848, 143, 2.958, 172, 2.155, 395, 2.242, 425, 2.242, 550, 3.469, 553, 2.669, 725, 3.58, 858, 2.958, 948, 4.296, 949, 6.187, 952, 5.381, 954, 4.608, 960, 3.58, 967, 3.886, 1233, 3.886, 1234, 5.53, 1235, 5.53, 1236, 6.457, 1237, 6.115, 1238, 3.886, 1239, 4.296, 1240, 4.296, 1241, 3.58, 1242, 4.608, 1243, 6.115, 1244, 6.115, 1245, 4.296, 1246, 4.296, 1247, 4.296, 1248, 4.296, 1522, 4.918, 1523, 4.918, 1524, 4.918]], ["title/classes/UpdateCompanyDto.html", [19, 0.181, 382, 2.79]], ["body/classes/UpdateCompanyDto.html", [3, 0.181, 4, 0.181, 5, 0.122, 7, 0.287, 8, 0.012, 18, 0.181, 19, 0.272, 23, 0.011, 24, 0.011, 306, 1.728, 364, 3.936, 382, 4.944, 391, 4.884, 499, 1.569, 615, 4.884, 944, 3.461, 1525, 5.399, 1526, 7.29, 1527, 3.526, 1528, 3.355, 1529, 3.355]], ["title/classes/UpdateFileDto.html", [19, 0.181, 780, 2.79]], ["body/classes/UpdateFileDto.html", [3, 0.181, 4, 0.181, 5, 0.122, 7, 0.287, 8, 0.012, 18, 0.181, 19, 0.272, 23, 0.011, 24, 0.011, 306, 1.728, 499, 1.569, 620, 3.936, 622, 4.884, 780, 4.944, 794, 4.884, 944, 3.461, 1527, 3.526, 1528, 3.355, 1529, 3.355, 1530, 5.399, 1531, 7.29]], ["title/classes/UpdateJobDto.html", [19, 0.181, 897, 2.79]], ["body/classes/UpdateJobDto.html", [3, 0.181, 4, 0.181, 5, 0.122, 7, 0.287, 8, 0.012, 18, 0.181, 19, 0.272, 23, 0.011, 24, 0.011, 306, 1.728, 499, 1.569, 540, 4.499, 552, 3.717, 897, 4.944, 903, 4.884, 944, 3.461, 1527, 3.526, 1528, 3.355, 1529, 3.355, 1532, 5.399, 1533, 7.29]], ["title/classes/UpdatePermissionDto.html", [19, 0.181, 1185, 2.79]], ["body/classes/UpdatePermissionDto.html", [3, 0.181, 4, 0.181, 5, 0.122, 7, 0.287, 8, 0.012, 18, 0.181, 19, 0.272, 23, 0.011, 24, 0.011, 306, 1.728, 499, 1.569, 635, 3.936, 637, 4.884, 944, 3.461, 1185, 4.944, 1190, 4.884, 1527, 3.526, 1528, 3.355, 1529, 3.355, 1534, 5.399, 1535, 7.29]], ["title/classes/UpdateResumeDto.html", [19, 0.181, 1296, 2.79]], ["body/classes/UpdateResumeDto.html", [3, 0.181, 4, 0.181, 5, 0.122, 7, 0.287, 8, 0.012, 18, 0.181, 19, 0.272, 23, 0.011, 24, 0.011, 306, 1.728, 499, 1.569, 600, 4.499, 613, 3.717, 944, 3.461, 1295, 4.884, 1296, 4.944, 1527, 3.526, 1528, 3.355, 1529, 3.355, 1536, 5.399, 1537, 7.29]], ["title/classes/UpdateRoleDto.html", [19, 0.181, 1407, 2.79]], ["body/classes/UpdateRoleDto.html", [3, 0.181, 4, 0.181, 5, 0.122, 7, 0.287, 8, 0.012, 18, 0.181, 19, 0.272, 23, 0.011, 24, 0.011, 306, 1.728, 499, 1.569, 648, 3.936, 650, 4.884, 944, 3.461, 1407, 4.944, 1411, 4.884, 1527, 3.526, 1528, 3.355, 1529, 3.355, 1538, 5.399, 1539, 7.29]], ["title/classes/UpdateSubscriberDto.html", [19, 0.181, 1472, 2.79]], ["body/classes/UpdateSubscriberDto.html", [3, 0.181, 4, 0.181, 5, 0.122, 7, 0.287, 8, 0.012, 18, 0.181, 19, 0.272, 23, 0.011, 24, 0.011, 306, 1.728, 499, 1.569, 668, 3.936, 670, 4.884, 944, 3.461, 1472, 4.944, 1477, 4.884, 1527, 3.526, 1528, 3.355, 1529, 3.355, 1540, 5.399, 1541, 7.29]], ["title/classes/UpdateUserDto.html", [19, 0.181, 1542, 2.79]], ["body/classes/UpdateUserDto.html", [3, 0.17, 4, 0.17, 5, 0.114, 7, 0.276, 8, 0.012, 18, 0.17, 19, 0.255, 23, 0.01, 24, 0.01, 103, 0.665, 106, 0.836, 109, 1.048, 140, 0.776, 175, 3.931, 205, 1.781, 244, 1.899, 293, 1.855, 306, 1.62, 499, 1.472, 576, 3.691, 582, 3.147, 588, 3.808, 944, 3.331, 1527, 3.306, 1528, 3.147, 1529, 3.147, 1542, 4.757, 1543, 6.128, 1544, 7.015, 1545, 5.797, 1546, 5.797]], ["title/classes/User.html", [19, 0.181, 137, 1.188]], ["body/classes/User.html", [3, 0.098, 4, 0.098, 5, 0.066, 7, 0.225, 8, 0.013, 18, 0.168, 19, 0.146, 23, 0.007, 24, 0.007, 56, 0.93, 64, 1.311, 98, 2.515, 103, 0.382, 106, 1.159, 109, 1.214, 127, 2.042, 131, 0.748, 137, 1.398, 140, 1.118, 205, 0.845, 213, 4.155, 244, 1.311, 293, 1.541, 300, 1.943, 301, 2.286, 321, 2.5, 342, 2.762, 343, 2.762, 369, 1.818, 416, 1.966, 441, 2.5, 496, 2.5, 497, 2.601, 499, 0.845, 501, 3.098, 502, 3.432, 504, 3.432, 506, 3.255, 507, 5.019, 509, 4.179, 511, 3.575, 512, 4.005, 513, 3.098, 518, 2.629, 524, 2.002, 525, 2.762, 526, 2.002, 528, 2.912, 532, 2.762, 533, 2.12, 534, 1.649, 535, 2.12, 536, 2.12, 537, 2.912, 588, 3.098, 590, 3.432, 593, 3.432, 698, 2.258, 701, 2.258, 704, 2.423, 720, 2.258, 1252, 3.826, 1253, 3.826, 1547, 2.423, 1548, 3.329, 1549, 3.329, 1550, 3.329, 1551, 3.329, 1552, 3.329, 1553, 3.329, 1554, 3.329, 1555, 4.843, 1556, 3.329, 1557, 3.329, 1558, 3.329, 1559, 3.329, 1560, 3.329, 1561, 3.329, 1562, 3.329, 1563, 3.329, 1564, 3.329, 1565, 4.843, 1566, 2.908]], ["title/classes/UserLoginDto.html", [19, 0.181, 173, 2.474]], ["body/classes/UserLoginDto.html", [3, 0.102, 4, 0.102, 5, 0.068, 7, 0.252, 8, 0.013, 18, 0.172, 19, 0.31, 22, 2.862, 23, 0.007, 24, 0.007, 64, 1.581, 103, 0.398, 106, 0.719, 109, 1.215, 127, 1.267, 131, 0.697, 140, 0.856, 158, 1.883, 173, 3, 174, 3.514, 183, 1.409, 186, 2.708, 244, 1.35, 261, 4.071, 275, 1.883, 286, 3.245, 293, 0.853, 300, 1.97, 301, 1.819, 332, 2.479, 355, 1.647, 369, 2.035, 377, 1.181, 492, 1.883, 499, 0.881, 501, 2.708, 503, 2.693, 513, 1.462, 534, 2.895, 537, 2.026, 541, 3.897, 544, 2.663, 545, 2.472, 546, 2.472, 547, 2.472, 548, 1.52, 549, 1.979, 550, 1.719, 551, 2.086, 553, 3.411, 554, 2.584, 556, 3.765, 576, 2.209, 579, 3, 580, 3.962, 581, 4.253, 582, 1.883, 583, 3.177, 584, 3.177, 585, 4.253, 586, 3.384, 587, 3.384, 588, 3.942, 589, 3.632, 590, 3, 591, 4.253, 592, 4.253, 593, 3, 594, 2.086, 595, 3.632, 596, 3.632, 597, 4.651, 1567, 4.989, 1568, 3.469, 1569, 3.469]], ["title/controllers/UsersController.html", [0, 1.15, 1570, 2.994]], ["body/controllers/UsersController.html", [0, 0.99, 2, 0.99, 3, 0.104, 4, 0.104, 5, 0.07, 7, 0.294, 8, 0.013, 9, 2.51, 12, 0.529, 18, 0.104, 19, 0.156, 22, 1.439, 23, 0.007, 24, 0.007, 62, 1.248, 83, 2.72, 87, 1.947, 94, 1.789, 103, 0.406, 104, 1.416, 106, 0.984, 108, 1.908, 109, 1.206, 118, 1.683, 127, 1.733, 130, 2.103, 131, 0.815, 132, 1.97, 135, 2.719, 137, 2.406, 140, 0.914, 141, 1.387, 163, 1.836, 170, 2.405, 171, 1.683, 172, 1.552, 175, 3.436, 182, 1.756, 183, 1.439, 205, 0.9, 207, 1.292, 251, 3.209, 273, 2.8, 274, 2.257, 293, 0.871, 306, 1.416, 321, 1.552, 334, 1.725, 359, 2.401, 360, 2.401, 361, 2.057, 362, 1.983, 366, 1.552, 367, 2.826, 372, 2.219, 373, 1.439, 374, 3.556, 377, 2.324, 378, 1.439, 379, 2.021, 385, 2.75, 386, 2.021, 387, 2.135, 390, 1.439, 392, 1.439, 395, 1.615, 396, 2.403, 398, 2.021, 399, 2.131, 400, 2.131, 402, 2.021, 403, 2.131, 406, 2.021, 582, 3.853, 889, 3.226, 894, 3.226, 898, 3.436, 1286, 3.095, 1542, 4.815, 1570, 3.687, 1571, 3.095, 1572, 4.425, 1573, 3.095, 1574, 3.544, 1575, 3.544, 1576, 3.544, 1577, 3.544, 1578, 3.544, 1579, 3.544, 1580, 3.544, 1581, 3.544, 1582, 3.095, 1583, 3.544, 1584, 3.544, 1585, 3.095, 1586, 3.095, 1587, 3.544, 1588, 3.544, 1589, 3.544, 1590, 3.544, 1591, 3.544, 1592, 3.544, 1593, 3.544, 1594, 3.544, 1595, 3.544, 1596, 3.544, 1597, 3.544]], ["title/modules/UsersModule.html", [25, 0.834, 48, 2.62]], ["body/modules/UsersModule.html", [2, 1.81, 3, 0.15, 4, 0.15, 5, 0.1, 7, 0.311, 8, 0.013, 12, 0.761, 18, 0.15, 19, 0.224, 23, 0.009, 24, 0.009, 25, 1.443, 27, 2.068, 28, 2.147, 29, 2.322, 30, 2.322, 31, 2.147, 32, 3.244, 33, 3.244, 48, 5.113, 49, 2.951, 50, 2.322, 51, 2.231, 53, 2.322, 55, 2.639, 56, 1.424, 131, 0.773, 137, 1.471, 251, 4.54, 301, 1.858, 414, 2.765, 416, 2.629, 698, 4.391, 700, 4.123, 701, 3.455, 703, 4.449, 704, 3.708, 1570, 5.181, 1585, 4.449, 1598, 4.449, 1599, 5.094, 1600, 4.449, 1601, 5.094, 1602, 5.094, 1603, 4.449]], ["title/injectables/UsersService.html", [100, 0.807, 251, 2.233]], ["body/injectables/UsersService.html", [3, 0.057, 4, 0.057, 5, 0.038, 7, 0.275, 8, 0.013, 12, 0.291, 18, 0.057, 19, 0.141, 20, 1.252, 21, 1.401, 23, 0.005, 24, 0.005, 56, 0.545, 61, 0.966, 62, 1.432, 63, 0.966, 64, 1.1, 83, 2.483, 87, 2.463, 94, 1.828, 100, 0.627, 101, 0.711, 103, 0.224, 104, 0.894, 106, 0.988, 108, 1.78, 109, 1.156, 110, 1.703, 130, 2.019, 131, 0.885, 132, 1.892, 135, 2.365, 137, 2.014, 140, 0.878, 141, 2.183, 158, 2.553, 175, 2.169, 205, 1.883, 207, 2.499, 213, 3.423, 244, 0.866, 248, 3.551, 251, 1.736, 261, 1.923, 263, 2.036, 264, 2.169, 268, 2.445, 278, 2.572, 279, 1.242, 291, 1.419, 293, 1.611, 300, 2.031, 301, 2.243, 306, 0.894, 332, 1.253, 334, 1.384, 341, 2.207, 359, 1.299, 360, 2.108, 361, 1.299, 362, 1.252, 366, 1.401, 367, 1.781, 369, 1.018, 372, 1.781, 373, 1.299, 377, 1.768, 378, 1.299, 387, 1.714, 390, 0.792, 392, 0.792, 419, 3.197, 425, 2.542, 431, 1.059, 434, 1.173, 435, 1.059, 436, 1.112, 441, 0.854, 442, 2.445, 443, 2.445, 444, 1.173, 445, 1.173, 446, 1.173, 447, 1.173, 448, 1.173, 449, 1.173, 450, 1.173, 451, 1.173, 452, 1.173, 453, 2.818, 454, 1.923, 455, 1.173, 456, 1.923, 458, 1.923, 459, 1.173, 460, 1.923, 462, 1.173, 463, 1.173, 464, 1.173, 465, 1.173, 466, 1.173, 467, 1.173, 468, 1.173, 469, 1.173, 470, 1.923, 471, 1.173, 472, 3.122, 473, 1.173, 474, 1.059, 475, 1.923, 476, 1.923, 477, 1.173, 478, 1.173, 479, 1.923, 480, 1.112, 481, 1.173, 482, 1.173, 483, 1.173, 484, 1.173, 485, 0.889, 486, 1.059, 487, 1.173, 491, 1.923, 493, 2.828, 496, 0.854, 497, 0.889, 501, 2.553, 531, 1.419, 544, 0.889, 548, 0.854, 582, 3.027, 583, 2.036, 584, 2.036, 588, 3.338, 590, 2.828, 593, 2.828, 640, 2.589, 701, 1.323, 719, 1.242, 720, 1.323, 723, 2.328, 726, 1.541, 727, 1.703, 743, 2.527, 748, 1.419, 757, 1.703, 768, 1.703, 912, 1.173, 983, 3.189, 1338, 1.541, 1370, 1.541, 1382, 3.551, 1383, 4.102, 1431, 3.551, 1437, 1.703, 1438, 1.703, 1445, 2.793, 1512, 2.793, 1542, 3.783, 1573, 2.793, 1582, 2.793, 1586, 1.703, 1603, 1.703, 1604, 1.703, 1605, 4.065, 1606, 4.065, 1607, 3.198, 1608, 3.198, 1609, 3.198, 1610, 1.95, 1611, 1.95, 1612, 3.198, 1613, 1.95, 1614, 1.95, 1615, 1.95, 1616, 3.198, 1617, 1.95, 1618, 3.198, 1619, 1.95, 1620, 3.198, 1621, 5.578, 1622, 1.95, 1623, 3.198, 1624, 1.95, 1625, 3.198, 1626, 1.95, 1627, 1.95, 1628, 1.95, 1629, 1.95, 1630, 1.95, 1631, 1.95, 1632, 1.95, 1633, 1.703, 1634, 3.198, 1635, 1.95, 1636, 1.95, 1637, 3.198, 1638, 3.198, 1639, 3.198, 1640, 3.198, 1641, 4.703, 1642, 3.198, 1643, 3.198, 1644, 3.198, 1645, 3.198, 1646, 1.95, 1647, 4.703, 1648, 1.95, 1649, 4.065, 1650, 1.95, 1651, 3.198, 1652, 3.198, 1653, 1.95, 1654, 1.95, 1655, 1.95]], ["title/coverage.html", [1656, 4.912]], ["body/coverage.html", [0, 2.062, 1, 1.771, 5, 0.075, 6, 2.125, 8, 0.013, 13, 1.549, 19, 0.358, 23, 0.006, 24, 0.006, 31, 1.026, 100, 1.519, 102, 2.125, 116, 1.771, 117, 2.125, 135, 0.857, 137, 1.103, 140, 0.893, 143, 1.463, 158, 1.321, 165, 1.463, 167, 1.771, 170, 1.155, 171, 1.155, 173, 1.463, 174, 3.212, 178, 1.321, 223, 1.65, 224, 1.65, 243, 2.125, 251, 1.321, 301, 0.887, 334, 0.828, 356, 1.771, 357, 2.125, 364, 1.549, 369, 1.502, 382, 1.65, 388, 1.549, 412, 1.771, 417, 2.125, 430, 1.771, 500, 3.432, 539, 3.018, 540, 3.432, 552, 1.463, 576, 3.696, 582, 1.321, 598, 1.771, 599, 3.018, 600, 3.432, 613, 1.463, 614, 2.125, 615, 3.018, 620, 1.549, 621, 2.125, 622, 3.018, 635, 1.549, 636, 2.125, 637, 3.018, 648, 1.549, 649, 2.125, 650, 3.018, 659, 1.109, 668, 1.549, 669, 2.125, 670, 3.018, 686, 1.771, 687, 2.125, 689, 1.549, 696, 1.65, 698, 1.65, 700, 1.549, 705, 2.125, 715, 1.066, 716, 1.549, 718, 1.65, 719, 1.549, 720, 1.65, 721, 1.771, 722, 1.922, 723, 1.771, 738, 6.274, 772, 2.125, 773, 1.771, 774, 2.125, 780, 1.65, 792, 1.549, 825, 1.771, 829, 2.125, 840, 1.771, 841, 2.125, 858, 2.297, 860, 2.125, 861, 3.432, 883, 1.65, 885, 1.771, 886, 2.125, 897, 1.65, 901, 1.549, 922, 2.125, 941, 1.922, 942, 2.125, 943, 3.018, 962, 1.922, 963, 1.922, 993, 2.125, 1009, 2.125, 1011, 2.125, 1017, 1.771, 1018, 2.125, 1025, 1.549, 1030, 1.388, 1031, 1.65, 1032, 1.549, 1106, 2.125, 1107, 2.125, 1164, 3.432, 1177, 1.771, 1178, 2.125, 1185, 1.65, 1188, 1.549, 1207, 2.125, 1233, 3.018, 1241, 1.771, 1242, 1.771, 1249, 1.463, 1250, 3.432, 1269, 1.771, 1272, 1.771, 1274, 1.771, 1275, 2.125, 1293, 1.549, 1296, 1.65, 1318, 2.125, 1384, 3.432, 1397, 1.771, 1398, 2.125, 1407, 1.65, 1428, 2.125, 1450, 3.432, 1456, 1.771, 1457, 2.125, 1472, 1.65, 1475, 1.549, 1478, 1.922, 1499, 2.125, 1525, 2.125, 1530, 2.125, 1532, 2.125, 1534, 2.125, 1536, 2.125, 1538, 2.125, 1540, 2.125, 1542, 1.65, 1543, 2.125, 1547, 3.432, 1570, 1.771, 1571, 2.125, 1604, 2.125, 1656, 2.125, 1657, 2.433, 1658, 2.433, 1659, 2.433, 1660, 8.303, 1661, 5.342, 1662, 6.861, 1663, 4.715, 1664, 6.16, 1665, 6.16, 1666, 6.671, 1667, 5.342, 1668, 5.342, 1669, 7.684, 1670, 6.442, 1671, 4.119, 1672, 5.627, 1673, 2.433, 1674, 2.125, 1675, 2.433, 1676, 2.433, 1677, 2.433, 1678, 2.433, 1679, 2.433, 1680, 2.433, 1681, 2.433]], ["title/dependencies.html", [28, 2.087, 1682, 2.997]], ["body/dependencies.html", [8, 0.013, 12, 0.742, 16, 2.694, 19, 0.28, 23, 0.009, 24, 0.009, 28, 2.093, 56, 1.388, 61, 2.46, 62, 1.749, 63, 2.46, 64, 1.724, 75, 3.922, 77, 3.922, 168, 3.922, 176, 2.831, 183, 2.016, 228, 3.161, 231, 3.922, 233, 3.922, 271, 4.336, 272, 4.336, 274, 4.478, 387, 2.093, 435, 2.694, 436, 2.831, 548, 2.175, 549, 2.831, 796, 3.613, 849, 3.922, 960, 3.613, 1002, 4.336, 1028, 3.613, 1029, 3.922, 1034, 4.336, 1238, 3.922, 1528, 2.694, 1529, 2.694, 1633, 4.336, 1683, 4.964, 1684, 7.032, 1685, 4.964, 1686, 4.964, 1687, 4.964, 1688, 4.964, 1689, 4.964, 1690, 4.964, 1691, 4.964, 1692, 4.964, 1693, 4.964, 1694, 4.964, 1695, 4.964, 1696, 4.964, 1697, 4.964, 1698, 6.369, 1699, 4.964, 1700, 4.964, 1701, 4.964, 1702, 4.964, 1703, 4.964, 1704, 4.964, 1705, 4.964, 1706, 4.964, 1707, 4.964, 1708, 4.964, 1709, 4.964, 1710, 4.964, 1711, 4.964, 1712, 4.964, 1713, 4.964, 1714, 4.964, 1715, 4.964, 1716, 4.964, 1717, 4.964, 1718, 4.964, 1719, 4.964]], ["title/miscellaneous/functions.html", [1720, 2.185, 1721, 4.324]], ["body/miscellaneous/functions.html", [8, 0.011, 23, 0.011, 24, 0.011, 31, 3.345, 103, 0.75, 1674, 5.713, 1720, 4.165, 1721, 5.713, 1722, 6.54]], ["title/index.html", [103, 0.393, 1723, 3.431, 1724, 3.431]], ["body/index.html", [8, 0.011, 23, 0.011, 24, 0.011, 276, 4.486, 279, 3.925, 280, 5.384, 281, 5.75, 453, 3.346, 480, 4.151, 485, 2.809, 489, 5.384, 532, 3.515, 751, 4.87, 1028, 4.486, 1346, 6.357, 1361, 6.357, 1725, 6.164, 1726, 7.277, 1727, 6.164, 1728, 7.277, 1729, 7.277, 1730, 6.164, 1731, 6.164]], ["title/modules.html", [27, 2.283]], ["body/modules.html", [8, 0.01, 23, 0.01, 24, 0.01, 26, 4.055, 27, 2.262, 37, 3.778, 38, 3.778, 39, 3.778, 40, 3.778, 41, 3.778, 42, 3.778, 43, 3.778, 44, 3.778, 45, 3.778, 46, 3.547, 47, 3.778, 48, 3.547, 1732, 8.463, 1733, 8.463, 1734, 8.463, 1735, 8.493, 1736, 5.571, 1737, 5.571]], ["title/overview.html", [1738, 4.912]], ["body/overview.html", [2, 1.024, 8, 0.013, 13, 3.836, 23, 0.008, 24, 0.008, 25, 0.743, 26, 6.152, 27, 1.488, 28, 1.545, 29, 1.67, 30, 1.67, 31, 1.545, 32, 1.67, 33, 1.67, 34, 3.201, 35, 3.201, 36, 3.201, 37, 5.467, 38, 4.689, 39, 5.005, 40, 4.689, 41, 4.085, 42, 4.868, 43, 4.689, 44, 4.868, 45, 4.868, 46, 4.7, 47, 4.868, 48, 4.7, 49, 2.365, 50, 1.67, 51, 1.605, 101, 1.336, 165, 4.438, 178, 4.006, 219, 3.201, 220, 3.201, 222, 3.201, 223, 4.085, 224, 4.085, 251, 4.093, 276, 2.668, 388, 3.836, 408, 3.201, 409, 3.201, 499, 0.93, 689, 3.836, 692, 3.201, 693, 3.201, 792, 3.836, 820, 3.201, 821, 3.201, 859, 2.896, 901, 4.7, 915, 3.201, 916, 3.201, 917, 3.201, 1025, 3.836, 1083, 3.201, 1084, 3.201, 1188, 4.7, 1201, 3.201, 1202, 3.201, 1203, 3.201, 1293, 4.7, 1311, 3.201, 1312, 3.201, 1313, 3.201, 1422, 3.201, 1423, 3.201, 1424, 3.201, 1475, 4.7, 1493, 3.201, 1494, 3.201, 1495, 3.201, 1598, 3.201, 1600, 3.201, 1738, 3.201, 1739, 5.189, 1740, 3.665, 1741, 3.665]], ["title/properties.html", [244, 1.34, 1682, 2.997]], ["body/properties.html", [8, 0.012, 23, 0.011, 24, 0.011, 114, 5.075, 115, 5.075, 244, 1.738, 503, 2.707, 1742, 6.423, 1743, 6.423, 1744, 6.423, 1745, 6.423, 1746, 6.423, 1747, 6.423]], ["title/miscellaneous/typealiases.html", [1720, 2.185, 1748, 4.95]], ["body/miscellaneous/typealiases.html", [8, 0.01, 23, 0.01, 24, 0.01, 103, 0.685, 140, 0.8, 430, 5.2, 500, 4.349, 525, 4.736, 716, 4.549, 718, 4.845, 719, 4.549, 720, 4.845, 861, 4.349, 1031, 4.845, 1164, 4.349, 1250, 4.349, 1269, 5.2, 1384, 4.349, 1450, 4.349, 1547, 4.349, 1720, 3.805, 1749, 5.975, 1750, 5.219, 1751, 5.219, 1752, 5.219, 1753, 5.219, 1754, 5.219, 1755, 5.219, 1756, 5.219]], ["title/miscellaneous/variables.html", [1720, 2.185, 1757, 4.324]], ["body/miscellaneous/variables.html", [5, 0.027, 8, 0.013, 9, 2.594, 11, 0.86, 23, 0.003, 24, 0.003, 25, 1.533, 62, 2.137, 94, 0.354, 98, 0.886, 103, 0.155, 109, 0.688, 131, 0.903, 137, 1.583, 140, 0.617, 141, 0.529, 170, 1.114, 171, 1.114, 205, 0.343, 263, 4.259, 264, 4.536, 293, 2.011, 297, 2.176, 299, 6.607, 300, 2.124, 301, 1.353, 306, 1.287, 321, 3.314, 358, 3.669, 362, 1.803, 369, 1.338, 377, 1.568, 385, 2.499, 398, 2.626, 412, 1.707, 441, 3.314, 496, 0.592, 500, 0.983, 502, 4.549, 504, 4.549, 506, 4.314, 538, 1.18, 550, 0.669, 553, 0.989, 603, 0.86, 638, 4.817, 639, 4.817, 659, 1.914, 696, 1.591, 698, 1.591, 700, 1.494, 715, 1.84, 721, 1.707, 722, 1.853, 723, 1.707, 738, 5.506, 764, 6.637, 775, 1.068, 861, 0.983, 883, 1.591, 884, 1.18, 887, 3.057, 912, 2.769, 952, 0.983, 962, 1.853, 963, 1.853, 965, 1.18, 1007, 5.977, 1032, 1.494, 1164, 0.983, 1176, 1.18, 1241, 2.262, 1249, 2.526, 1250, 0.983, 1272, 1.707, 1273, 1.18, 1276, 4.319, 1384, 0.983, 1396, 1.18, 1399, 4.022, 1450, 0.983, 1455, 1.18, 1478, 1.853, 1547, 0.983, 1566, 1.18, 1572, 3.669, 1671, 1.18, 1672, 1.18, 1720, 0.86, 1750, 1.18, 1751, 1.18, 1752, 1.18, 1753, 1.18, 1754, 1.18, 1755, 1.18, 1756, 1.18, 1757, 1.18, 1758, 3.108, 1759, 4.945, 1760, 1.351, 1761, 1.351, 1762, 2.345, 1763, 7.598, 1764, 8.17, 1765, 8.17, 1766, 1.351, 1767, 1.351, 1768, 7.564, 1769, 1.351, 1770, 2.345, 1771, 1.351, 1772, 3.108, 1773, 2.345, 1774, 1.351, 1775, 2.345, 1776, 1.351, 1777, 2.345, 1778, 1.351, 1779, 2.345, 1780, 2.345, 1781, 1.351, 1782, 3.108, 1783, 2.345, 1784, 1.351, 1785, 2.345, 1786, 1.351, 1787, 2.345, 1788, 1.351, 1789, 2.345, 1790, 1.351, 1791, 1.351, 1792, 1.351, 1793, 1.351, 1794, 2.345, 1795, 1.351, 1796, 2.345, 1797, 2.345, 1798, 1.351, 1799, 3.108, 1800, 2.345, 1801, 1.351, 1802, 2.345, 1803, 1.351, 1804, 2.345, 1805, 1.351, 1806, 2.345, 1807, 1.351, 1808, 2.345, 1809, 2.345, 1810, 1.351, 1811, 2.345, 1812, 1.351, 1813, 3.108, 1814, 2.345, 1815, 1.351, 1816, 2.345, 1817, 1.351, 1818, 2.345, 1819, 1.351, 1820, 1.351, 1821, 2.345, 1822, 1.351, 1823, 2.345, 1824, 2.345, 1825, 1.351, 1826, 2.345, 1827, 1.351, 1828, 3.108, 1829, 2.345, 1830, 1.351, 1831, 2.345, 1832, 1.351, 1833, 2.345, 1834, 1.351, 1835, 2.345, 1836, 2.345, 1837, 1.351, 1838, 2.345, 1839, 1.351, 1840, 3.108, 1841, 2.345, 1842, 1.351, 1843, 2.345, 1844, 1.351, 1845, 2.345, 1846, 1.351, 1847, 1.351, 1848, 1.351, 1849, 1.351, 1850, 1.351, 1851, 1.351, 1852, 1.351, 1853, 1.351, 1854, 1.351]]], "invertedIndex": [["", { "_index": 8, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "overview.html": {}, "properties.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["0", { "_index": 738, "title": {}, "body": { "injectables/DatabasesService.html": {}, "controllers/MailController.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["0')@get()@public()@responsemessage('test", { "_index": 1023, "title": {}, "body": { "controllers/MailController.html": {} } }], ["0.0.1", { "_index": 1743, "title": {}, "body": { "properties.html": {} } }], ["0.1.13", { "_index": 1717, "title": {}, "body": { "dependencies.html": {} } }], ["0.14.0", { "_index": 1700, "title": {}, "body": { "dependencies.html": {} } }], ["0.5.1", { "_index": 1699, "title": {}, "body": { "dependencies.html": {} } }], ["0.6.0", { "_index": 1712, "title": {}, "body": { "dependencies.html": {} } }], ["0/1", { "_index": 1660, "title": {}, "body": { "coverage.html": {} } }], ["0/12", { "_index": 1668, "title": {}, "body": { "coverage.html": {} } }], ["0/13", { "_index": 1679, "title": {}, "body": { "coverage.html": {} } }], ["0/15", { "_index": 1676, "title": {}, "body": { "coverage.html": {} } }], ["0/17", { "_index": 1678, "title": {}, "body": { "coverage.html": {} } }], ["0/19", { "_index": 1673, "title": {}, "body": { "coverage.html": {} } }], ["0/2", { "_index": 1661, "title": {}, "body": { "coverage.html": {} } }], ["0/3", { "_index": 1665, "title": {}, "body": { "coverage.html": {} } }], ["0/4", { "_index": 1664, "title": {}, "body": { "coverage.html": {} } }], ["0/5", { "_index": 1667, "title": {}, "body": { "coverage.html": {} } }], ["0/6", { "_index": 1666, "title": {}, "body": { "coverage.html": {} } }], ["0/7", { "_index": 1662, "title": {}, "body": { "coverage.html": {} } }], ["0/8", { "_index": 1663, "title": {}, "body": { "coverage.html": {} } }], ["0/9", { "_index": 1677, "title": {}, "body": { "coverage.html": {} } }], ["000", { "_index": 597, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["06", { "_index": 1765, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["1", { "_index": 453, "title": { "classes/Company-1.html": {} }, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {}, "index.html": {} } }], ["1.0.0", { "_index": 1714, "title": {}, "body": { "dependencies.html": {} } }], ["1.0.15", { "_index": 1719, "title": {}, "body": { "dependencies.html": {} } }], ["1.2.2", { "_index": 1687, "title": {}, "body": { "dependencies.html": {} } }], ["1.4.7", { "_index": 1701, "title": {}, "body": { "dependencies.html": {} } }], ["1.8.1", { "_index": 1683, "title": {}, "body": { "dependencies.html": {} } }], ["10", { "_index": 455, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["10.0.1", { "_index": 1692, "title": {}, "body": { "dependencies.html": {} } }], ["10.0.3", { "_index": 1686, "title": {}, "body": { "dependencies.html": {} } }], ["1000", { "_index": 242, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {} } }], ["1024", { "_index": 809, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["12", { "_index": 84, "title": {}, "body": { "modules/AppModule.html": {} } }], ["13", { "_index": 1739, "title": {}, "body": { "overview.html": {} } }], ["15t06:47:49.369z", { "_index": 1766, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t06:48:22.224z", { "_index": 1770, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t06:51:01.241z", { "_index": 1773, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t06:51:23.973z", { "_index": 1775, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t06:54:05.131z", { "_index": 1767, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t06:54:32.799z", { "_index": 1777, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t06:59:31.898z", { "_index": 1780, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t06:59:51.041z", { "_index": 1783, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t07:00:13.364z", { "_index": 1785, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t07:00:41.934z", { "_index": 1787, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t07:00:56.274z", { "_index": 1789, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t07:01:36.923z", { "_index": 1794, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:06:16.508z", { "_index": 1797, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:06:33.697z", { "_index": 1800, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:06:46.085z", { "_index": 1802, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:07:24.175z", { "_index": 1804, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:07:37.896z", { "_index": 1806, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:08:14.659z", { "_index": 1809, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:08:33.395z", { "_index": 1811, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:08:50.801z", { "_index": 1814, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:09:15.785z", { "_index": 1816, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:09:41.694z", { "_index": 1818, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:10:05.961z", { "_index": 1821, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:10:50.946z", { "_index": 1824, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:11:10.914z", { "_index": 1826, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:11:33.234z", { "_index": 1829, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:11:48.081z", { "_index": 1831, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:12:11.323z", { "_index": 1833, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:12:51.974z", { "_index": 1836, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:13:06.618z", { "_index": 1838, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:13:20.853z", { "_index": 1841, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:13:36.836z", { "_index": 1843, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["15t09:13:52.798z", { "_index": 1845, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["18", { "_index": 1740, "title": {}, "body": { "overview.html": {} } }], ["2", { "_index": 276, "title": { "classes/Company-2.html": {} }, "body": { "injectables/AuthService.html": {}, "index.html": {}, "overview.html": {} } }], ["2.1.3", { "_index": 1709, "title": {}, "body": { "dependencies.html": {} } }], ["2.4.3", { "_index": 1698, "title": {}, "body": { "dependencies.html": {} } }], ["2023", { "_index": 1764, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["29", { "_index": 1741, "title": {}, "body": { "overview.html": {} } }], ["3", { "_index": 527, "title": {}, "body": { "classes/Company.html": {} } }], ["3.0.1", { "_index": 1690, "title": {}, "body": { "dependencies.html": {} } }], ["3.1.9", { "_index": 1703, "title": {}, "body": { "dependencies.html": {} } }], ["3.2.3", { "_index": 1685, "title": {}, "body": { "dependencies.html": {} } }], ["4.0.1", { "_index": 1713, "title": {}, "body": { "dependencies.html": {} } }], ["4.7.7", { "_index": 1705, "title": {}, "body": { "dependencies.html": {} } }], ["5.0.2", { "_index": 1697, "title": {}, "body": { "dependencies.html": {} } }], ["5.4.0", { "_index": 1694, "title": {}, "body": { "dependencies.html": {} } }], ["6.2.1", { "_index": 1693, "title": {}, "body": { "dependencies.html": {} } }], ["6.9.3", { "_index": 1711, "title": {}, "body": { "dependencies.html": {} } }], ["60000", { "_index": 81, "title": {}, "body": { "modules/AppModule.html": {} } }], ["647b5108a8a243e8191855b5", { "_index": 1763, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab415f4328bd3153ee211", { "_index": 1761, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab436f4328bd3153ee216", { "_index": 1769, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab4d5f4328bd3153ee21b", { "_index": 1771, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab4ebf4328bd3153ee220", { "_index": 1774, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab5a8072f2a2ef910638d", { "_index": 1776, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab6d3fa16b294212e4033", { "_index": 1778, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab6e7fa16b294212e4038", { "_index": 1781, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab6fdfa16b294212e403d", { "_index": 1784, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab719fa16b294212e4042", { "_index": 1786, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab728fa16b294212e4047", { "_index": 1788, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ab750fa16b294212e404c", { "_index": 1790, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad488dafdb9754f40b846", { "_index": 1795, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad499dafdb9754f40b84b", { "_index": 1798, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad4a6dafdb9754f40b850", { "_index": 1801, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad4ccdafdb9754f40b859", { "_index": 1803, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad4d9dafdb9754f40b85e", { "_index": 1805, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad4fedafdb9754f40b863", { "_index": 1807, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad511dafdb9754f40b868", { "_index": 1810, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad522dafdb9754f40b86d", { "_index": 1812, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad53bdafdb9754f40b872", { "_index": 1815, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad555dafdb9754f40b877", { "_index": 1817, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad56ddafdb9754f40b87c", { "_index": 1819, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad59adafdb9754f40b881", { "_index": 1822, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad5aedafdb9754f40b886", { "_index": 1825, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad5c5dafdb9754f40b88b", { "_index": 1827, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad5d4dafdb9754f40b890", { "_index": 1830, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad5ebdafdb9754f40b895", { "_index": 1832, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad613dafdb9754f40b89a", { "_index": 1834, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad622dafdb9754f40b89f", { "_index": 1837, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad630dafdb9754f40b8a6", { "_index": 1839, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad640dafdb9754f40b8ab", { "_index": 1842, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["648ad650dafdb9754f40b8b0", { "_index": 1844, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["69", { "_index": 760, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["7.0.4", { "_index": 1691, "title": {}, "body": { "dependencies.html": {} } }], ["7.1.0", { "_index": 1708, "title": {}, "body": { "dependencies.html": {} } }], ["7.2.0", { "_index": 1718, "title": {}, "body": { "dependencies.html": {} } }], ["8", { "_index": 1022, "title": {}, "body": { "controllers/MailController.html": {} } }], ["8.0.0", { "_index": 1707, "title": {}, "body": { "dependencies.html": {} } }], ["8:00", { "_index": 1040, "title": {}, "body": { "controllers/MailController.html": {} } }], ["9.0.3", { "_index": 1689, "title": {}, "body": { "dependencies.html": {} } }], ["9.2.2", { "_index": 1688, "title": {}, "body": { "dependencies.html": {} } }], ["9.4.0", { "_index": 1684, "title": {}, "body": { "dependencies.html": {} } }], ["96", { "_index": 765, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["__v", { "_index": 1768, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["_id", { "_index": 293, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateUserDto.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["_id.tostring", { "_index": 338, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["abc@gmail.com", { "_index": 596, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["access", { "_index": 335, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["access_token", { "_index": 316, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["action", { "_index": 836, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["adapter", { "_index": 1103, "title": {}, "body": { "modules/MailModule.html": {} } }], ["add", { "_index": 752, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["addfiletypevalidator", { "_index": 801, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["addmaxsizevalidator", { "_index": 807, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["address", { "_index": 501, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/RegisterUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["adds", { "_index": 837, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["admin", { "_index": 743, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["admin@gmail.com", { "_index": 757, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/UsersService.html": {} } }], ["admin_role", { "_index": 721, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/RolesService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["adminrole", { "_index": 753, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["adminrole?._id", { "_index": 763, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["age", { "_index": 590, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/RegisterUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["alias", { "_index": 1670, "title": {}, "body": { "coverage.html": {} } }], ["aliases", { "_index": 1749, "title": {}, "body": { "miscellaneous/typealiases.html": {} } }], ["already", { "_index": 770, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/MulterConfigService.html": {} } }], ["api", { "_index": 435, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/CreatePermissionDto.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["api/v1/companies", { "_index": 1762, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/companies/:id", { "_index": 1772, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/files/upload", { "_index": 1793, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/jobs", { "_index": 1796, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/jobs/:id", { "_index": 1799, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/permissions", { "_index": 1823, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/permissions/:id", { "_index": 1828, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/resumes", { "_index": 1808, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/resumes/:id", { "_index": 1813, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/resumes/by", { "_index": 1820, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/roles", { "_index": 1835, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/roles/:id", { "_index": 1840, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/users", { "_index": 1779, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["api/v1/users/:id", { "_index": 1782, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["apibody", { "_index": 181, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["apipath", { "_index": 638, "title": {}, "body": { "classes/CreatePermissionDto.html": {}, "interfaces/IUser.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "injectables/RolesService.html": {}, "miscellaneous/variables.html": {} } }], ["apiproperty", { "_index": 581, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["apitags", { "_index": 182, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["apitags('auth", { "_index": 184, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["apitags('companies", { "_index": 393, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["apitags('files", { "_index": 797, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["apitags('health", { "_index": 850, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["apitags('jobs", { "_index": 904, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["apitags('mail", { "_index": 1036, "title": {}, "body": { "controllers/MailController.html": {} } }], ["apitags('permissions", { "_index": 1191, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["apitags('resumes", { "_index": 1297, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["apitags('roles", { "_index": 1412, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["apitags('subscribers", { "_index": 1479, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["apitags('users", { "_index": 1587, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["app", { "_index": 1070, "title": {}, "body": { "controllers/MailController.html": {} } }], ["app.controller", { "_index": 54, "title": {}, "body": { "modules/AppModule.html": {} } }], ["app.service", { "_index": 14, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {} } }], ["appcontroller", { "_index": 1, "title": { "controllers/AppController.html": {} }, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "coverage.html": {} } }], ["application\\/msword|application\\/vnd.openxmlformats", { "_index": 805, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["application\\/pdf", { "_index": 804, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["appmodule", { "_index": 26, "title": { "modules/AppModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["appservice", { "_index": 13, "title": { "injectables/AppService.html": {} }, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["aqp", { "_index": 434, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["aqp(querystring", { "_index": 449, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["arguments", { "_index": 973, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["async", { "_index": 87, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["auth", { "_index": 119, "title": {}, "body": { "controllers/AuthController.html": {}, "modules/MailModule.html": {} } }], ["auth.controller", { "_index": 234, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["auth.guard", { "_index": 169, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["auth.guard.ts", { "_index": 943, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/LocalAuthGuard.html": {}, "coverage.html": {} } }], ["auth.guard.ts:13", { "_index": 950, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["auth.guard.ts:18", { "_index": 953, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["auth.guard.ts:29", { "_index": 956, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["auth.service", { "_index": 166, "title": {}, "body": { "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/LocalStrategy.html": {} } }], ["auth/auth.module", { "_index": 59, "title": {}, "body": { "modules/AppModule.html": {} } }], ["authcontroller", { "_index": 116, "title": { "controllers/AuthController.html": {} }, "body": { "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "coverage.html": {} } }], ["authguard", { "_index": 961, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/LocalAuthGuard.html": {} } }], ["authguard('jwt", { "_index": 945, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["authguard('local", { "_index": 1010, "title": {}, "body": { "injectables/LocalAuthGuard.html": {} } }], ["authmodule", { "_index": 37, "title": { "modules/AuthModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["author", { "_index": 1747, "title": {}, "body": { "properties.html": {} } }], ["authservice", { "_index": 165, "title": { "injectables/AuthService.html": {} }, "body": { "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/LocalStrategy.html": {}, "coverage.html": {}, "overview.html": {} } }], ["available", { "_index": 1737, "title": {}, "body": { "modules.html": {} } }], ["await", { "_index": 207, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["badrequestexception", { "_index": 268, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["badrequestexception('cv", { "_index": 1378, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["badrequestexception('không", { "_index": 1370, "title": {}, "body": { "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["badrequestexception('not", { "_index": 1220, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["badrequestexception('permission", { "_index": 1217, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["badrequestexception('tài", { "_index": 1511, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["badrequestexception(`can't", { "_index": 937, "title": {}, "body": { "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {} } }], ["badrequestexception(`role", { "_index": 1439, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["based", { "_index": 972, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["basename", { "_index": 1160, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["bcrypt", { "_index": 1695, "title": {}, "body": { "dependencies.html": {} } }], ["bcryptjs", { "_index": 1633, "title": {}, "body": { "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["bearer", { "_index": 976, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["biến", { "_index": 1076, "title": {}, "body": { "controllers/MailController.html": {} } }], ["biệt", { "_index": 1334, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["body", { "_index": 163, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["body('status", { "_index": 1303, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["boolean", { "_index": 518, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["boolean(isinit", { "_index": 731, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["bootstrap", { "_index": 31, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "coverage.html": {}, "miscellaneous/functions.html": {}, "overview.html": {} } }], ["break", { "_index": 1135, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["browse", { "_index": 1735, "title": {}, "body": { "modules.html": {} } }], ["browser", { "_index": 1732, "title": {}, "body": { "modules.html": {} } }], ["build", { "_index": 810, "title": {}, "body": { "controllers/FilesController.html": {}, "controllers/MailController.html": {} } }], ["bulk", { "_index": 740, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["buộc", { "_index": 530, "title": {}, "body": { "classes/Company.html": {} } }], ["bước", { "_index": 1725, "title": {}, "body": { "index.html": {} } }], ["bạn", { "_index": 1337, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["bản", { "_index": 475, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["bảo", { "_index": 1350, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["bắt", { "_index": 529, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {} } }], ["bằng", { "_index": 1365, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["c", { "_index": 286, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/JwtAuthGuard.html": {}, "controllers/MailController.html": {}, "classes/RegisterUserDto.html": {}, "injectables/ResumesService.html": {}, "classes/UserLoginDto.html": {} } }], ["callhandler", { "_index": 1236, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["canactivate", { "_index": 946, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["canactivate(context", { "_index": 951, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["case", { "_index": 1130, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["catch", { "_index": 350, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["cb", { "_index": 1147, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["cb(null", { "_index": 1151, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["ch", { "_index": 594, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/RegisterUserDto.html": {}, "injectables/ResumesService.html": {}, "classes/UserLoginDto.html": {} } }], ["check", { "_index": 843, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["cho", { "_index": 531, "title": {}, "body": { "classes/Company.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["chưa", { "_index": 488, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/SubscribersService.html": {} } }], ["chạy", { "_index": 1726, "title": {}, "body": { "index.html": {} } }], ["chọn", { "_index": 536, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["chứa", { "_index": 1353, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["class", { "_index": 19, "title": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/File.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {} }, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "dependencies.html": {} } }], ["classes", { "_index": 499, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/File.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "overview.html": {} } }], ["cluster_appmodule", { "_index": 34, "title": {}, "body": { "modules/AppModule.html": {}, "overview.html": {} } }], ["cluster_appmodule_imports", { "_index": 35, "title": {}, "body": { "modules/AppModule.html": {}, "overview.html": {} } }], ["cluster_appmodule_providers", { "_index": 36, "title": {}, "body": { "modules/AppModule.html": {}, "overview.html": {} } }], ["cluster_authmodule", { "_index": 219, "title": {}, "body": { "modules/AuthModule.html": {}, "overview.html": {} } }], ["cluster_authmodule_exports", { "_index": 220, "title": {}, "body": { "modules/AuthModule.html": {}, "overview.html": {} } }], ["cluster_authmodule_imports", { "_index": 221, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["cluster_authmodule_providers", { "_index": 222, "title": {}, "body": { "modules/AuthModule.html": {}, "overview.html": {} } }], ["cluster_companiesmodule", { "_index": 408, "title": {}, "body": { "modules/CompaniesModule.html": {}, "overview.html": {} } }], ["cluster_companiesmodule_providers", { "_index": 409, "title": {}, "body": { "modules/CompaniesModule.html": {}, "overview.html": {} } }], ["cluster_databasesmodule", { "_index": 692, "title": {}, "body": { "modules/DatabasesModule.html": {}, "overview.html": {} } }], ["cluster_databasesmodule_providers", { "_index": 693, "title": {}, "body": { "modules/DatabasesModule.html": {}, "overview.html": {} } }], ["cluster_filesmodule", { "_index": 820, "title": {}, "body": { "modules/FilesModule.html": {}, "overview.html": {} } }], ["cluster_filesmodule_providers", { "_index": 821, "title": {}, "body": { "modules/FilesModule.html": {}, "overview.html": {} } }], ["cluster_jobsmodule", { "_index": 915, "title": {}, "body": { "modules/JobsModule.html": {}, "overview.html": {} } }], ["cluster_jobsmodule_exports", { "_index": 916, "title": {}, "body": { "modules/JobsModule.html": {}, "overview.html": {} } }], ["cluster_jobsmodule_providers", { "_index": 917, "title": {}, "body": { "modules/JobsModule.html": {}, "overview.html": {} } }], ["cluster_mailmodule", { "_index": 1083, "title": {}, "body": { "modules/MailModule.html": {}, "overview.html": {} } }], ["cluster_mailmodule_providers", { "_index": 1084, "title": {}, "body": { "modules/MailModule.html": {}, "overview.html": {} } }], ["cluster_permissionsmodule", { "_index": 1201, "title": {}, "body": { "modules/PermissionsModule.html": {}, "overview.html": {} } }], ["cluster_permissionsmodule_exports", { "_index": 1202, "title": {}, "body": { "modules/PermissionsModule.html": {}, "overview.html": {} } }], ["cluster_permissionsmodule_providers", { "_index": 1203, "title": {}, "body": { "modules/PermissionsModule.html": {}, "overview.html": {} } }], ["cluster_resumesmodule", { "_index": 1311, "title": {}, "body": { "modules/ResumesModule.html": {}, "overview.html": {} } }], ["cluster_resumesmodule_exports", { "_index": 1312, "title": {}, "body": { "modules/ResumesModule.html": {}, "overview.html": {} } }], ["cluster_resumesmodule_providers", { "_index": 1313, "title": {}, "body": { "modules/ResumesModule.html": {}, "overview.html": {} } }], ["cluster_rolesmodule", { "_index": 1422, "title": {}, "body": { "modules/RolesModule.html": {}, "overview.html": {} } }], ["cluster_rolesmodule_exports", { "_index": 1423, "title": {}, "body": { "modules/RolesModule.html": {}, "overview.html": {} } }], ["cluster_rolesmodule_providers", { "_index": 1424, "title": {}, "body": { "modules/RolesModule.html": {}, "overview.html": {} } }], ["cluster_subscribersmodule", { "_index": 1493, "title": {}, "body": { "modules/SubscribersModule.html": {}, "overview.html": {} } }], ["cluster_subscribersmodule_exports", { "_index": 1494, "title": {}, "body": { "modules/SubscribersModule.html": {}, "overview.html": {} } }], ["cluster_subscribersmodule_providers", { "_index": 1495, "title": {}, "body": { "modules/SubscribersModule.html": {}, "overview.html": {} } }], ["cluster_usersmodule", { "_index": 1598, "title": {}, "body": { "modules/UsersModule.html": {}, "overview.html": {} } }], ["cluster_usersmodule_exports", { "_index": 1600, "title": {}, "body": { "modules/UsersModule.html": {}, "overview.html": {} } }], ["cluster_usersmodule_providers", { "_index": 1599, "title": {}, "body": { "modules/UsersModule.html": {} } }], ["code", { "_index": 111, "title": {}, "body": { "injectables/AppService.html": {} } }], ["cokies", { "_index": 340, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["companies", { "_index": 358, "title": {}, "body": { "controllers/CompaniesController.html": {}, "miscellaneous/variables.html": {} } }], ["companies.controller", { "_index": 411, "title": {}, "body": { "modules/CompaniesModule.html": {} } }], ["companies.service", { "_index": 389, "title": {}, "body": { "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {} } }], ["companies/companies.module", { "_index": 65, "title": {}, "body": { "modules/AppModule.html": {} } }], ["companiescontroller", { "_index": 356, "title": { "controllers/CompaniesController.html": {} }, "body": { "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "coverage.html": {} } }], ["companiesmodule", { "_index": 38, "title": { "modules/CompaniesModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/CompaniesModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["companiesservice", { "_index": 388, "title": { "injectables/CompaniesService.html": {} }, "body": { "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["company", { "_index": 369, "title": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {} }, "body": { "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateUserDto.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "controllers/SubscribersController.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["company.dto", { "_index": 391, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/UpdateCompanyDto.html": {} } }], ["company.dto.ts", { "_index": 615, "title": {}, "body": { "classes/CreateCompanyDto.html": {}, "classes/UpdateCompanyDto.html": {}, "coverage.html": {} } }], ["company.dto.ts:12", { "_index": 617, "title": {}, "body": { "classes/CreateCompanyDto.html": {} } }], ["company.dto.ts:15", { "_index": 618, "title": {}, "body": { "classes/CreateCompanyDto.html": {} } }], ["company.dto.ts:6", { "_index": 619, "title": {}, "body": { "classes/CreateCompanyDto.html": {} } }], ["company.dto.ts:9", { "_index": 616, "title": {}, "body": { "classes/CreateCompanyDto.html": {} } }], ["company.name", { "_index": 415, "title": {}, "body": { "modules/CompaniesModule.html": {}, "classes/Resume.html": {} } }], ["companydocument", { "_index": 430, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {} } }], ["companyid", { "_index": 601, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {} } }], ["companymodel", { "_index": 421, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["companyschema", { "_index": 412, "title": {}, "body": { "modules/CompaniesModule.html": {}, "classes/Company.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["comparesync", { "_index": 1632, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["comparesync(password", { "_index": 1648, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["config", { "_index": 88, "title": {}, "body": { "modules/AppModule.html": {} } }], ["config.get('mongo_url", { "_index": 90, "title": {}, "body": { "modules/AppModule.html": {} } }], ["configmodule", { "_index": 57, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {} } }], ["configmodule.forroot", { "_index": 96, "title": {}, "body": { "modules/AppModule.html": {} } }], ["configservice", { "_index": 15, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {} } }], ["configservice.get('email_auth_password", { "_index": 1098, "title": {}, "body": { "modules/MailModule.html": {} } }], ["configservice.get('email_auth_user", { "_index": 1097, "title": {}, "body": { "modules/MailModule.html": {} } }], ["configservice.get('email_host", { "_index": 1095, "title": {}, "body": { "modules/MailModule.html": {} } }], ["configservice.get('jwt_access_secret", { "_index": 238, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {} } }], ["connection", { "_index": 92, "title": {}, "body": { "modules/AppModule.html": {} } }], ["connection.plugin(softdeleteplugin", { "_index": 93, "title": {}, "body": { "modules/AppModule.html": {} } }], ["connectionfactory", { "_index": 91, "title": {}, "body": { "modules/AppModule.html": {} } }], ["console", { "_index": 931, "title": {}, "body": { "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {} } }], ["console.error(error", { "_index": 1144, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["console.log('directory", { "_index": 1125, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["console.log(website_url", { "_index": 1045, "title": {}, "body": { "controllers/MailController.html": {} } }], ["const", { "_index": 205, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["constructor", { "_index": 20, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/HealthController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UsersService.html": {} } }], ["constructor(authservice", { "_index": 1012, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["constructor(companymodel", { "_index": 418, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["constructor(configservice", { "_index": 996, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["constructor(jobmodel", { "_index": 923, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["constructor(permissionmodel", { "_index": 1208, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["constructor(private", { "_index": 395, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/DatabasesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/PermissionsController.html": {}, "interfaces/Response.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {} } }], ["constructor(reflector", { "_index": 948, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/TransformInterceptor.html": {} } }], ["constructor(resumemodel", { "_index": 1320, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["constructor(rolemodel", { "_index": 1429, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["constructor(rolesmodel", { "_index": 708, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["constructor(subscribermodel", { "_index": 1501, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["constructor(usermodel", { "_index": 1610, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["constructor(usersservice", { "_index": 250, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["contains", { "_index": 1139, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["content", { "_index": 1073, "title": {}, "body": { "controllers/MailController.html": {} } }], ["context", { "_index": 954, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "controllers/MailController.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["context.getclass", { "_index": 968, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["context.gethandler", { "_index": 967, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["context.switchtohttp().getrequest", { "_index": 970, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["context.switchtohttp().getresponse().statuscode", { "_index": 1247, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["controller", { "_index": 0, "title": { "controllers/AppController.html": {}, "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/DatabasesController.html": {}, "controllers/FilesController.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} }, "body": { "controllers/AppController.html": {}, "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/DatabasesController.html": {}, "controllers/FilesController.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {}, "coverage.html": {} } }], ["controller('auth", { "_index": 185, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["controller('companies", { "_index": 394, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["controller('databases", { "_index": 691, "title": {}, "body": { "controllers/DatabasesController.html": {} } }], ["controller('files", { "_index": 798, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["controller('health", { "_index": 851, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["controller('jobs", { "_index": 905, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["controller('mail", { "_index": 1037, "title": {}, "body": { "controllers/MailController.html": {} } }], ["controller('permissions", { "_index": 1192, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["controller('resumes", { "_index": 1298, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["controller('roles", { "_index": 1413, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["controller('subscribers", { "_index": 1480, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["controller('users", { "_index": 1588, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["controllers", { "_index": 2, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }], ["cookie", { "_index": 271, "title": {}, "body": { "injectables/AuthService.html": {}, "dependencies.html": {} } }], ["cookieparser", { "_index": 270, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["cookies", { "_index": 311, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["countpermission", { "_index": 734, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["countrole", { "_index": 736, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["countuser", { "_index": 732, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["coverage", { "_index": 1656, "title": { "coverage.html": {} }, "body": { "coverage.html": {} } }], ["create", { "_index": 306, "title": {}, "body": { "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/MulterConfigService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["create(@body", { "_index": 396, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/UsersController.html": {} } }], ["create(createcompanydto", { "_index": 363, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["create(createdcompany", { "_index": 422, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["create(createfiledto", { "_index": 830, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["create(createjobdto", { "_index": 888, "title": {}, "body": { "controllers/JobsController.html": {}, "injectables/JobsService.html": {} } }], ["create(createpermissiondto", { "_index": 1179, "title": {}, "body": { "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {} } }], ["create(createresumedto", { "_index": 1278, "title": {}, "body": { "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {} } }], ["create(createroledto", { "_index": 1400, "title": {}, "body": { "controllers/RolesController.html": {}, "injectables/RolesService.html": {} } }], ["create(createsubscriberdto", { "_index": 1459, "title": {}, "body": { "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {} } }], ["create(createuserdto", { "_index": 1573, "title": {}, "body": { "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["createcompanydto", { "_index": 364, "title": { "classes/CreateCompanyDto.html": {} }, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/CreateCompanyDto.html": {}, "classes/UpdateCompanyDto.html": {}, "coverage.html": {} } }], ["createcvdto", { "_index": 598, "title": { "classes/CreateCVDto.html": {} }, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "coverage.html": {} } }], ["created", { "_index": 1126, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["createdat", { "_index": 321, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/Company.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "classes/User.html": {}, "controllers/UsersController.html": {}, "miscellaneous/variables.html": {} } }], ["createdby", { "_index": 441, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["createdcompany", { "_index": 424, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["createfiledto", { "_index": 620, "title": { "classes/CreateFileDto.html": {} }, "body": { "classes/CreateFileDto.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "classes/UpdateFileDto.html": {}, "coverage.html": {} } }], ["createjobdto", { "_index": 552, "title": { "classes/CreateJobDto.html": {} }, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "classes/UpdateJobDto.html": {}, "coverage.html": {} } }], ["createmulteroptions", { "_index": 1109, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["createparamdecorator", { "_index": 1851, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["createpermissiondto", { "_index": 635, "title": { "classes/CreatePermissionDto.html": {} }, "body": { "classes/CreatePermissionDto.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/UpdatePermissionDto.html": {}, "coverage.html": {} } }], ["createrefreshtoken", { "_index": 245, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["createresumedto", { "_index": 613, "title": { "classes/CreateResumeDto.html": {} }, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/UpdateResumeDto.html": {}, "coverage.html": {} } }], ["createroledto", { "_index": 648, "title": { "classes/CreateRoleDto.html": {} }, "body": { "classes/CreateRoleDto.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/UpdateRoleDto.html": {}, "coverage.html": {} } }], ["createsubscriberdto", { "_index": 668, "title": { "classes/CreateSubscriberDto.html": {} }, "body": { "classes/CreateSubscriberDto.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/UpdateSubscriberDto.html": {}, "coverage.html": {} } }], ["createuserdto", { "_index": 582, "title": { "classes/CreateUserDto.html": {} }, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "coverage.html": {} } }], ["cron", { "_index": 1034, "title": {}, "body": { "controllers/MailController.html": {}, "dependencies.html": {} } }], ["cron('0", { "_index": 1021, "title": {}, "body": { "controllers/MailController.html": {} } }], ["cronexpression", { "_index": 1035, "title": {}, "body": { "controllers/MailController.html": {} } }], ["ctx", { "_index": 1852, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["ctx.switchtohttp().getrequest", { "_index": 1853, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["current", { "_index": 469, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["currentpage", { "_index": 372, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["cv", { "_index": 1373, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["cài", { "_index": 1727, "title": {}, "body": { "index.html": {} } }], ["các", { "_index": 532, "title": {}, "body": { "classes/Company.html": {}, "classes/CreateRoleDto.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {}, "index.html": {} } }], ["cách", { "_index": 1349, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["câu", { "_index": 1728, "title": {}, "body": { "index.html": {} } }], ["còn", { "_index": 1520, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["công", { "_index": 355, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/JobsService.html": {}, "classes/RegisterUserDto.html": {}, "injectables/RolesService.html": {}, "classes/UserLoginDto.html": {} } }], ["cần", { "_index": 751, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/ResumesService.html": {}, "index.html": {} } }], ["cập", { "_index": 990, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/ResumesService.html": {} } }], ["của", { "_index": 882, "title": {}, "body": { "classes/Job.html": {}, "controllers/MailController.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {} } }], ["d", { "_index": 1361, "title": {}, "body": { "injectables/ResumesService.html": {}, "index.html": {} } }], ["dang", { "_index": 662, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["data", { "_index": 550, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UserLoginDto.html": {}, "miscellaneous/variables.html": {} } }], ["databases", { "_index": 688, "title": {}, "body": { "controllers/DatabasesController.html": {} } }], ["databases.controller", { "_index": 695, "title": {}, "body": { "modules/DatabasesModule.html": {} } }], ["databases.service", { "_index": 690, "title": {}, "body": { "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {} } }], ["databases/databases.module", { "_index": 71, "title": {}, "body": { "modules/AppModule.html": {} } }], ["databasescontroller", { "_index": 686, "title": { "controllers/DatabasesController.html": {} }, "body": { "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "coverage.html": {} } }], ["databasesmodule", { "_index": 39, "title": { "modules/DatabasesModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/DatabasesModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["databasesservice", { "_index": 689, "title": { "injectables/DatabasesService.html": {} }, "body": { "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["date", { "_index": 509, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["date.now()}${extname", { "_index": 1163, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["db", { "_index": 852, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["declarations", { "_index": 30, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }], ["decorators", { "_index": 127, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/FilesController.html": {}, "controllers/HealthController.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {} } }], ["default", { "_index": 263, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {}, "controllers/MailController.html": {}, "injectables/MulterConfigService.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["defaultlimit", { "_index": 454, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["defined", { "_index": 106, "title": {}, "body": { "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["delete", { "_index": 62, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {}, "miscellaneous/variables.html": {} } }], ["delete(':id", { "_index": 379, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["deletedat", { "_index": 502, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {}, "miscellaneous/variables.html": {} } }], ["deletedby", { "_index": 497, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "injectables/UsersService.html": {} } }], ["denied", { "_index": 1143, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["dependencies", { "_index": 28, "title": { "dependencies.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "dependencies.html": {}, "overview.html": {} } }], ["description", { "_index": 503, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "classes/RegisterUserDto.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "classes/UserLoginDto.html": {}, "properties.html": {} } }], ["destination", { "_index": 1146, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["dev", { "_index": 1731, "title": {}, "body": { "index.html": {} } }], ["developer?id=${item._id", { "_index": 1063, "title": {}, "body": { "controllers/MailController.html": {} } }], ["dir", { "_index": 1100, "title": {}, "body": { "modules/MailModule.html": {}, "injectables/MulterConfigService.html": {} } }], ["directory", { "_index": 1134, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["diskstorage", { "_index": 1120, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["diện", { "_index": 1343, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["documentation", { "_index": 1657, "title": {}, "body": { "coverage.html": {} } }], ["dto/create", { "_index": 390, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["dto/update", { "_index": 392, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["dân", { "_index": 115, "title": {}, "body": { "injectables/AppService.html": {}, "injectables/DatabasesService.html": {}, "properties.html": {} } }], ["dùng", { "_index": 584, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "controllers/MailController.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["dùng/ứng", { "_index": 746, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["dạng", { "_index": 585, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["dạng'})@isnotempty({message", { "_index": 679, "title": {}, "body": { "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {} } }], ["dụng", { "_index": 748, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/ResumesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["each", { "_index": 667, "title": {}, "body": { "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {} } }], ["eexist", { "_index": 1131, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["ejs", { "_index": 1702, "title": {}, "body": { "dependencies.html": {} } }], ["email", { "_index": 300, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/MailController.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["emitwarning", { "_index": 432, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/PermissionsService.html": {} } }], ["enddate", { "_index": 572, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {} } }], ["endpoint", { "_index": 991, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["enotdir", { "_index": 1136, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["ensureexists", { "_index": 1110, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["ensureexists(targetdirectory", { "_index": 1113, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["err", { "_index": 957, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["error", { "_index": 351, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JobsService.html": {}, "injectables/MulterConfigService.html": {}, "injectables/PermissionsService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {} } }], ["error.code", { "_index": 1129, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["errorhttpstatuscode", { "_index": 811, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["ersume", { "_index": 1306, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["example", { "_index": 595, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["exception", { "_index": 971, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["exec", { "_index": 467, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["executioncontext", { "_index": 952, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "miscellaneous/variables.html": {} } }], ["exist", { "_index": 1218, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["exists", { "_index": 1127, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["expiresin", { "_index": 240, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {} } }], ["export", { "_index": 18, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {} } }], ["exports", { "_index": 33, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }], ["express", { "_index": 176, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/MulterConfigService.html": {}, "controllers/SubscribersController.html": {}, "dependencies.html": {} } }], ["express.multer.file", { "_index": 783, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["extends", { "_index": 944, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {} } }], ["extension", { "_index": 1155, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["extname", { "_index": 1156, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["extractjwt", { "_index": 1000, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["extractjwt.fromauthheaderasbearertoken", { "_index": 1005, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["false", { "_index": 1007, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "modules/MailModule.html": {}, "miscellaneous/variables.html": {} } }], ["fetch", { "_index": 912, "title": {}, "body": { "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["file", { "_index": 5, "title": { "classes/File.html": {} }, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["file')@post('upload')@useinterceptors(undefined", { "_index": 785, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["file.dto", { "_index": 794, "title": {}, "body": { "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "classes/UpdateFileDto.html": {} } }], ["file.dto.ts", { "_index": 622, "title": {}, "body": { "classes/CreateFileDto.html": {}, "classes/UpdateFileDto.html": {}, "coverage.html": {} } }], ["file.filename", { "_index": 813, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["fileinterceptor", { "_index": 795, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["filename", { "_index": 787, "title": {}, "body": { "controllers/FilesController.html": {}, "injectables/MulterConfigService.html": {} } }], ["files", { "_index": 775, "title": {}, "body": { "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "miscellaneous/variables.html": {} } }], ["files.controller", { "_index": 823, "title": {}, "body": { "modules/FilesModule.html": {} } }], ["files.service", { "_index": 793, "title": {}, "body": { "controllers/FilesController.html": {}, "modules/FilesModule.html": {} } }], ["files/files.module", { "_index": 67, "title": {}, "body": { "modules/AppModule.html": {} } }], ["filescontroller", { "_index": 773, "title": { "controllers/FilesController.html": {} }, "body": { "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "coverage.html": {} } }], ["filesmodule", { "_index": 40, "title": { "modules/FilesModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/FilesModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["filesservice", { "_index": 792, "title": { "injectables/FilesService.html": {} }, "body": { "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["filetype", { "_index": 802, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["fileurltopath", { "_index": 437, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["filter", { "_index": 444, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["filter.current", { "_index": 450, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["filter.pagesize", { "_index": 451, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["finalname", { "_index": 1162, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["find", { "_index": 938, "title": {}, "body": { "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {} } }], ["find(filter", { "_index": 462, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["findall", { "_index": 359, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["findall(currentpage", { "_index": 366, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["findbyuser", { "_index": 1319, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["findbyuser(user", { "_index": 1325, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["findcvbyuser", { "_index": 1277, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["findcvbyuser(@user", { "_index": 1309, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["findcvbyuser(user", { "_index": 1282, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["findone", { "_index": 360, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["findone(@param('id", { "_index": 815, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["findone(id", { "_index": 373, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["findonebyusername", { "_index": 1607, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["findonebyusername(username", { "_index": 1616, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["finduserbyrefreshtoken", { "_index": 1608, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["finduserbyrefreshtoken(refreshtoken", { "_index": 1618, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["folder", { "_index": 1148, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["forbiddenexception", { "_index": 958, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["forbiddenexception('bạn", { "_index": 988, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["found", { "_index": 1221, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["foundedrole", { "_index": 1446, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["foundedrole.name", { "_index": 1448, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["foundeduser", { "_index": 1652, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["foundeduser.email", { "_index": 1654, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["fs", { "_index": 1119, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["fs.mkdir(targetdirectory", { "_index": 1123, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["full", { "_index": 744, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["function", { "_index": 1675, "title": {}, "body": { "coverage.html": {} } }], ["functions", { "_index": 1721, "title": { "miscellaneous/functions.html": {} }, "body": { "miscellaneous/functions.html": {} } }], ["gender", { "_index": 593, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/RegisterUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["gensaltsync", { "_index": 1630, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["gensaltsync(10", { "_index": 1635, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["get('/account", { "_index": 203, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["get('/refresh", { "_index": 212, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["get(':id", { "_index": 402, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["get('profile", { "_index": 128, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["get()@public()@healthcheck", { "_index": 844, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["get()@responsemessage('fetch", { "_index": 368, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {} } }], ["gethashpassword", { "_index": 1605, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["gethello", { "_index": 105, "title": {}, "body": { "injectables/AppService.html": {} } }], ["getprofile", { "_index": 120, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["getprofile(@req", { "_index": 200, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["getprofile(req", { "_index": 126, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["getrootpath", { "_index": 1108, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["getskills", { "_index": 1500, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["getskills(user", { "_index": 1506, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["getting", { "_index": 1723, "title": { "index.html": {} }, "body": {} }], ["getuserskills", { "_index": 1458, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["getuserskills(@user", { "_index": 1487, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["getuserskills(user", { "_index": 1464, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["ghi", { "_index": 476, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["gi", { "_index": 1352, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["gia", { "_index": 653, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["gian", { "_index": 1345, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["giới", { "_index": 591, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["graph", { "_index": 1736, "title": {}, "body": { "modules.html": {} } }], ["gần", { "_index": 1380, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["gọi", { "_index": 1366, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["gửi", { "_index": 1069, "title": {}, "body": { "controllers/MailController.html": {} } }], ["h", { "_index": 749, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["handlebars", { "_index": 1704, "title": {}, "body": { "dependencies.html": {} } }], ["handlebarsadapter", { "_index": 1088, "title": {}, "body": { "modules/MailModule.html": {} } }], ["handlegetaccount", { "_index": 121, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlegetaccount(@user", { "_index": 204, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlegetaccount(user", { "_index": 134, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlelogin", { "_index": 122, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlelogin(@req", { "_index": 193, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlelogin(req", { "_index": 142, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlelogout", { "_index": 123, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlelogout(user", { "_index": 148, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlerefreshtoken", { "_index": 124, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlerefreshtoken(request", { "_index": 152, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handleregister", { "_index": 125, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handleregister(@body", { "_index": 198, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handleregister(registeruserdto", { "_index": 157, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["handlerequest", { "_index": 947, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["handlerequest(err", { "_index": 955, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["handletestemail", { "_index": 1020, "title": {}, "body": { "controllers/MailController.html": {} } }], ["hash", { "_index": 1621, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["hashpassword", { "_index": 1641, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["hashsync", { "_index": 1631, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["hashsync(password", { "_index": 1636, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["hay", { "_index": 331, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["hbs", { "_index": 1079, "title": {}, "body": { "controllers/MailController.html": {} } }], ["header", { "_index": 977, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["health", { "_index": 842, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["health.controller", { "_index": 856, "title": {}, "body": { "modules/HealthModule.html": {} } }], ["health/health.module", { "_index": 78, "title": {}, "body": { "modules/AppModule.html": {} } }], ["healthcheck", { "_index": 846, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["healthcheckservice", { "_index": 847, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["healthcontroller", { "_index": 840, "title": { "controllers/HealthController.html": {} }, "body": { "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "coverage.html": {} } }], ["healthmodule", { "_index": 41, "title": { "modules/HealthModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/HealthModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["hello", { "_index": 112, "title": {}, "body": { "injectables/AppService.html": {} } }], ["helmet", { "_index": 1706, "title": {}, "body": { "dependencies.html": {} } }], ["hierarchy", { "_index": 1138, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["history", { "_index": 1251, "title": {}, "body": { "classes/Resume.html": {}, "injectables/ResumesService.html": {} } }], ["hiện", { "_index": 471, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["hoidanit@gmail.com", { "_index": 764, "title": {}, "body": { "injectables/DatabasesService.html": {}, "miscellaneous/variables.html": {} } }], ["host", { "_index": 1094, "title": {}, "body": { "modules/MailModule.html": {} } }], ["hoạt", { "_index": 1358, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["hoặc", { "_index": 347, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "injectables/ResumesService.html": {} } }], ["html", { "_index": 880, "title": {}, "body": { "classes/Job.html": {} } }], ["http://localhost:4173/job/fe", { "_index": 1062, "title": {}, "body": { "controllers/MailController.html": {} } }], ["httponly", { "_index": 313, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["https://hoidanit.com.vn", { "_index": 1744, "title": {}, "body": { "properties.html": {} } }], ["httpstatus", { "_index": 791, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["httpstatus.unprocessable_entity", { "_index": 812, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["hydrateddocument", { "_index": 525, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {}, "miscellaneous/typealiases.html": {} } }], ["hạn", { "_index": 349, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["hết", { "_index": 348, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["hỏi", { "_index": 114, "title": {}, "body": { "injectables/AppService.html": {}, "injectables/DatabasesService.html": {}, "properties.html": {} } }], ["hợp", { "_index": 346, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtAuthGuard.html": {} } }], ["i'm", { "_index": 756, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["id", { "_index": 377, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["id')@get(':id", { "_index": 1286, "title": {}, "body": { "controllers/ResumesController.html": {}, "controllers/UsersController.html": {} } }], ["id')@get(':id')@public", { "_index": 375, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {} } }], ["id'})@ismongoid", { "_index": 684, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["identifier", { "_index": 1658, "title": {}, "body": { "coverage.html": {} } }], ["ignoreexpiration", { "_index": 1006, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["image", { "_index": 1154, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["image's", { "_index": 1158, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["image\\/jpeg|image\\/png|text\\/plain", { "_index": 803, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["implements", { "_index": 725, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/MulterConfigService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["import", { "_index": 7, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {} } }], ["imports", { "_index": 53, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/HealthModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {} } }], ["index", { "_index": 103, "title": { "index.html": {} }, "body": { "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/functions.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["info", { "_index": 3, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {} } }], ["information", { "_index": 202, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["information')@get('/account", { "_index": 138, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["init", { "_index": 771, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["init_permissions", { "_index": 722, "title": {}, "body": { "injectables/DatabasesService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["inject", { "_index": 95, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/MailModule.html": {} } }], ["injectable", { "_index": 100, "title": { "injectables/AppService.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/FilesService.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UsersService.html": {} }, "body": { "injectables/AppService.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/FilesService.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "injectables/PermissionsService.html": {}, "interfaces/Response.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UsersService.html": {}, "coverage.html": {} } }], ["injectables", { "_index": 101, "title": {}, "body": { "injectables/AppService.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/FilesService.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UsersService.html": {}, "overview.html": {} } }], ["injectmodel", { "_index": 431, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["injectmodel(company.name", { "_index": 439, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["injectmodel(job.name", { "_index": 932, "title": {}, "body": { "injectables/JobsService.html": {}, "controllers/MailController.html": {} } }], ["injectmodel(permission.name", { "_index": 728, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/PermissionsService.html": {} } }], ["injectmodel(resume.name", { "_index": 1330, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["injectmodel(role.name", { "_index": 726, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["injectmodel(subscriber.name", { "_index": 1038, "title": {}, "body": { "controllers/MailController.html": {}, "injectables/SubscribersService.html": {} } }], ["injectmodel(user.name", { "_index": 727, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/UsersService.html": {} } }], ["intercept", { "_index": 1243, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["intercept(context", { "_index": 1523, "title": {}, "body": { "injectables/TransformInterceptor.html": {} } }], ["interface", { "_index": 858, "title": { "interfaces/IUser.html": {}, "interfaces/Response.html": {} }, "body": { "interfaces/IUser.html": {}, "controllers/MailController.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["interfaces", { "_index": 859, "title": {}, "body": { "interfaces/IUser.html": {}, "interfaces/Response.html": {}, "overview.html": {} } }], ["is_public_key", { "_index": 962, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["is_public_permission", { "_index": 963, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["isactive", { "_index": 575, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateRoleDto.html": {}, "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {} } }], ["isarray", { "_index": 665, "title": {}, "body": { "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {} } }], ["isboolean", { "_index": 666, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["isdeleted", { "_index": 504, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {}, "miscellaneous/variables.html": {} } }], ["isemail", { "_index": 544, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["isexist", { "_index": 983, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/PermissionsService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["isglobal", { "_index": 97, "title": {}, "body": { "modules/AppModule.html": {} } }], ["isinit", { "_index": 729, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["ismongoid", { "_index": 579, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["isnotempty", { "_index": 541, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["isnotempty()@isemail", { "_index": 671, "title": {}, "body": { "classes/CreateSubscriberDto.html": {} } }], ["isnotempty({message", { "_index": 605, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {} } }], ["isnotemptyobject", { "_index": 545, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["isobject", { "_index": 546, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["ispublic", { "_index": 965, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "miscellaneous/variables.html": {} } }], ["ispublicpermission", { "_index": 1847, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["iss", { "_index": 304, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["isskippermission", { "_index": 974, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["isstring", { "_index": 580, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["isstring()@isnotempty()@apiproperty({example", { "_index": 1567, "title": {}, "body": { "classes/UserLoginDto.html": {} } }], ["isvalid", { "_index": 287, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["isvalidpassword", { "_index": 1609, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["isvalidpassword(password", { "_index": 1620, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["it's", { "_index": 1133, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["item.company.name", { "_index": 1057, "title": {}, "body": { "controllers/MailController.html": {} } }], ["item.name", { "_index": 1056, "title": {}, "body": { "controllers/MailController.html": {} } }], ["item.salary}`.replace(/\\b(?=(\\d{3})+(?!\\d))/g", { "_index": 1058, "title": {}, "body": { "controllers/MailController.html": {} } }], ["item.skills", { "_index": 1060, "title": {}, "body": { "controllers/MailController.html": {} } }], ["iuser", { "_index": 135, "title": { "interfaces/IUser.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "interfaces/IUser.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "coverage.html": {} } }], ["iều", { "_index": 481, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["iểm", { "_index": 567, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "injectables/ResumesService.html": {} } }], ["javascript", { "_index": 1363, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["job", { "_index": 715, "title": { "classes/Job.html": {} }, "body": { "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "controllers/PermissionsController.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["job')@delete(':id", { "_index": 895, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["job')@patch(':id", { "_index": 899, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["job')@post", { "_index": 890, "title": {}, "body": { "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {} } }], ["job.dto", { "_index": 903, "title": {}, "body": { "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "classes/UpdateJobDto.html": {} } }], ["job.dto.ts", { "_index": 540, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/UpdateJobDto.html": {}, "coverage.html": {} } }], ["job.dto.ts:14", { "_index": 542, "title": {}, "body": { "classes/Company-1.html": {} } }], ["job.dto.ts:16", { "_index": 543, "title": {}, "body": { "classes/Company-1.html": {} } }], ["job.dto.ts:20", { "_index": 630, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:23", { "_index": 633, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:30", { "_index": 624, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:36", { "_index": 632, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:39", { "_index": 631, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:42", { "_index": 628, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:45", { "_index": 625, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:48", { "_index": 629, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:54", { "_index": 634, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:57", { "_index": 626, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.dto.ts:60", { "_index": 627, "title": {}, "body": { "classes/CreateJobDto.html": {} } }], ["job.name", { "_index": 921, "title": {}, "body": { "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "classes/Resume.html": {} } }], ["jobdocument", { "_index": 716, "title": {}, "body": { "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {} } }], ["jobid", { "_index": 602, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {} } }], ["jobmodel", { "_index": 925, "title": {}, "body": { "injectables/JobsService.html": {}, "controllers/MailController.html": {} } }], ["jobs", { "_index": 887, "title": {}, "body": { "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/ResumesController.html": {}, "miscellaneous/variables.html": {} } }], ["jobs.controller", { "_index": 919, "title": {}, "body": { "modules/JobsModule.html": {} } }], ["jobs.service", { "_index": 902, "title": {}, "body": { "controllers/JobsController.html": {}, "modules/JobsModule.html": {} } }], ["jobs/jobs.module", { "_index": 66, "title": {}, "body": { "modules/AppModule.html": {} } }], ["jobschema", { "_index": 883, "title": {}, "body": { "classes/Job.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["jobscontroller", { "_index": 885, "title": { "controllers/JobsController.html": {} }, "body": { "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "coverage.html": {} } }], ["jobsforsubscriber", { "_index": 1054, "title": {}, "body": { "controllers/MailController.html": {} } }], ["jobsmodule", { "_index": 42, "title": { "modules/JobsModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/JobsModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["jobsservice", { "_index": 901, "title": { "injectables/JobsService.html": {} }, "body": { "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["joburl", { "_index": 1061, "title": {}, "body": { "controllers/MailController.html": {} } }], ["jobwithmatchingskills", { "_index": 1051, "title": {}, "body": { "controllers/MailController.html": {} } }], ["jobwithmatchingskills.map((item", { "_index": 1055, "title": {}, "body": { "controllers/MailController.html": {} } }], ["jobwithmatchingskills?.length", { "_index": 1053, "title": {}, "body": { "controllers/MailController.html": {} } }], ["join", { "_index": 1090, "title": {}, "body": { "modules/MailModule.html": {}, "injectables/MulterConfigService.html": {} } }], ["join(__dirname", { "_index": 1101, "title": {}, "body": { "modules/MailModule.html": {} } }], ["join(this.getrootpath", { "_index": 1152, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["jwt", { "_index": 1002, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "dependencies.html": {} } }], ["jwtauthguard", { "_index": 941, "title": { "injectables/JwtAuthGuard.html": {} }, "body": { "injectables/JwtAuthGuard.html": {}, "coverage.html": {} } }], ["jwtfromrequest", { "_index": 1004, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["jwtmodule", { "_index": 230, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["jwtmodule.registerasync", { "_index": 236, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["jwtservice", { "_index": 252, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["jwtstrategy", { "_index": 223, "title": { "injectables/JwtStrategy.html": {} }, "body": { "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {}, "coverage.html": {}, "overview.html": {} } }], ["k", { "_index": 196, "title": {}, "body": { "controllers/AuthController.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateSubscriberDto.html": {} } }], ["khi", { "_index": 1354, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["khoản", { "_index": 1512, "title": {}, "body": { "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["khác", { "_index": 1640, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["không", { "_index": 332, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["khẩu", { "_index": 587, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/LocalStrategy.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["khởi", { "_index": 1364, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["kiểm", { "_index": 326, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["kiểu", { "_index": 1360, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["kiện", { "_index": 482, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["kết", { "_index": 486, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["l", { "_index": 275, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/Company-2.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/JwtAuthGuard.html": {}, "controllers/MailController.html": {}, "classes/RegisterUserDto.html": {}, "injectables/ResumesService.html": {}, "classes/UserLoginDto.html": {} } }], ["legend", { "_index": 29, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }], ["level", { "_index": 565, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {} } }], ["license", { "_index": 1745, "title": {}, "body": { "properties.html": {} } }], ["limit", { "_index": 83, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["limit(defaultlimit", { "_index": 464, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["literal", { "_index": 511, "title": {}, "body": { "classes/Company.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {} } }], ["liệu", { "_index": 1362, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["local", { "_index": 168, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/LocalStrategy.html": {}, "dependencies.html": {} } }], ["localauthguard", { "_index": 167, "title": { "injectables/LocalAuthGuard.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/LocalAuthGuard.html": {}, "coverage.html": {} } }], ["localstrategy", { "_index": 224, "title": { "injectables/LocalStrategy.html": {} }, "body": { "modules/AuthModule.html": {}, "injectables/LocalStrategy.html": {}, "coverage.html": {}, "overview.html": {} } }], ["location", { "_index": 560, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "injectables/MulterConfigService.html": {} } }], ["log", { "_index": 216, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["logger", { "_index": 706, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["logger(databasesservice.name", { "_index": 714, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["login", { "_index": 191, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {} } }], ["login')@post('/login", { "_index": 146, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["login(user", { "_index": 254, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["logo", { "_index": 505, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {} } }], ["logout", { "_index": 246, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["làm", { "_index": 489, "title": {}, "body": { "injectables/CompaniesService.html": {}, "index.html": {} } }], ["lòng", { "_index": 1639, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["lương", { "_index": 562, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {} } }], ["lượng", { "_index": 474, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["lấy", { "_index": 477, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["lệnh", { "_index": 1346, "title": {}, "body": { "injectables/ResumesService.html": {}, "index.html": {} } }], ["lớp", { "_index": 1359, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["m", { "_index": 566, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateRoleDto.html": {}, "injectables/ResumesService.html": {} } }], ["mail", { "_index": 1019, "title": {}, "body": { "controllers/MailController.html": {} } }], ["mail.controller", { "_index": 1086, "title": {}, "body": { "modules/MailModule.html": {} } }], ["mail.service", { "_index": 1026, "title": {}, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {} } }], ["mail/mail.module", { "_index": 73, "title": {}, "body": { "modules/AppModule.html": {} } }], ["mailcontroller", { "_index": 1017, "title": { "controllers/MailController.html": {} }, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {}, "coverage.html": {} } }], ["mailermodule", { "_index": 1087, "title": {}, "body": { "modules/MailModule.html": {} } }], ["mailermodule.forrootasync", { "_index": 1092, "title": {}, "body": { "modules/MailModule.html": {} } }], ["mailerservice", { "_index": 1027, "title": {}, "body": { "controllers/MailController.html": {} } }], ["mailmodule", { "_index": 43, "title": { "modules/MailModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/MailModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["mailservice", { "_index": 1025, "title": { "injectables/MailService.html": {} }, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["male", { "_index": 761, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["map", { "_index": 1239, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["map((data", { "_index": 1246, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["matching", { "_index": 24, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "overview.html": {}, "properties.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["math.ceil(totalitems", { "_index": 459, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["maxage", { "_index": 314, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["maxsize", { "_index": 808, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["message", { "_index": 553, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UserLoginDto.html": {}, "miscellaneous/variables.html": {} } }], ["meta", { "_index": 468, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["metadata", { "_index": 1716, "title": {}, "body": { "dependencies.html": {} } }], ["method", { "_index": 639, "title": {}, "body": { "classes/CreatePermissionDto.html": {}, "interfaces/IUser.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "injectables/RolesService.html": {}, "miscellaneous/variables.html": {} } }], ["methods", { "_index": 104, "title": {}, "body": { "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/MulterConfigService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["milisecond", { "_index": 82, "title": {}, "body": { "modules/AppModule.html": {} } }], ["miscellaneous", { "_index": 1720, "title": { "miscellaneous/functions.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} }, "body": { "miscellaneous/functions.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["model", { "_index": 110, "title": {}, "body": { "injectables/AppService.html": {}, "injectables/UsersService.html": {} } }], ["module", { "_index": 25, "title": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/HealthModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "classes/CreatePermissionDto.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "classes/Permission.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/Resume.html": {}, "modules/ResumesModule.html": {}, "classes/Role.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {}, "miscellaneous/variables.html": {} } }], ["modules", { "_index": 27, "title": { "modules.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/HealthModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["modules/mailer", { "_index": 1029, "title": {}, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {}, "dependencies.html": {} } }], ["modules/mailer/dist/adapters/handlebars.adapter", { "_index": 1089, "title": {}, "body": { "modules/MailModule.html": {} } }], ["mongoose", { "_index": 64, "title": {}, "body": { "modules/AppModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["mongoose.schema.types.array", { "_index": 1270, "title": {}, "body": { "classes/Resume.html": {} } }], ["mongoose.schema.types.objectid", { "_index": 537, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateUserDto.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {} } }], ["mongoose.types.objectid.isvalid(id", { "_index": 491, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["mongoosehealthindicator", { "_index": 848, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["mongoosemodule", { "_index": 55, "title": {}, "body": { "modules/AppModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {} } }], ["mongoosemodule.forfeature", { "_index": 414, "title": {}, "body": { "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {} } }], ["mongoosemodule.forrootasync", { "_index": 85, "title": {}, "body": { "modules/AppModule.html": {} } }], ["ms", { "_index": 233, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "dependencies.html": {} } }], ["ms(configservice.get('jwt_access_expire", { "_index": 241, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["ms(this.configservice.get('jwt_refresh_expire", { "_index": 315, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["multer", { "_index": 1121, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["multer.config", { "_index": 826, "title": {}, "body": { "modules/FilesModule.html": {} } }], ["multerconfigservice", { "_index": 825, "title": { "injectables/MulterConfigService.html": {} }, "body": { "modules/FilesModule.html": {}, "injectables/MulterConfigService.html": {}, "coverage.html": {} } }], ["multermodule", { "_index": 824, "title": {}, "body": { "modules/FilesModule.html": {} } }], ["multermodule.registerasync", { "_index": 827, "title": {}, "body": { "modules/FilesModule.html": {} } }], ["multermoduleoptions", { "_index": 1112, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["multeroptionsfactory", { "_index": 1118, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["muốn", { "_index": 1377, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["mảng", { "_index": 663, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["mật", { "_index": 586, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/LocalStrategy.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["mặc", { "_index": 533, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["một", { "_index": 1340, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["mới", { "_index": 1342, "title": {}, "body": { "injectables/ResumesService.html": {}, "injectables/SubscribersService.html": {} } }], ["mức", { "_index": 561, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {} } }], ["n", { "_index": 281, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/ResumesService.html": {}, "index.html": {} } }], ["name", { "_index": 131, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["nestinterceptor", { "_index": 1235, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["nestjs", { "_index": 1028, "title": {}, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {}, "dependencies.html": {}, "index.html": {} } }], ["nestjs/common", { "_index": 12, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "interfaces/Response.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["nestjs/config", { "_index": 16, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "dependencies.html": {} } }], ["nestjs/core", { "_index": 960, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "dependencies.html": {} } }], ["nestjs/jwt", { "_index": 231, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "dependencies.html": {} } }], ["nestjs/mapped", { "_index": 1528, "title": {}, "body": { "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "dependencies.html": {} } }], ["nestjs/mongoose", { "_index": 56, "title": {}, "body": { "modules/AppModule.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "classes/Permission.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/Resume.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["nestjs/passport", { "_index": 228, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "dependencies.html": {} } }], ["nestjs/platform", { "_index": 796, "title": {}, "body": { "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/MulterConfigService.html": {}, "dependencies.html": {} } }], ["nestjs/schedule", { "_index": 75, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/MailController.html": {}, "dependencies.html": {} } }], ["nestjs/swagger", { "_index": 183, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "controllers/FilesController.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "classes/RegisterUserDto.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "dependencies.html": {} } }], ["nestjs/terminus", { "_index": 849, "title": {}, "body": { "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "dependencies.html": {} } }], ["nestjs/throttler", { "_index": 77, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "dependencies.html": {} } }], ["new", { "_index": 334, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "coverage.html": {} } }], ["newcreated", { "_index": 1643, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["newcreatedjob", { "_index": 906, "title": {}, "body": { "controllers/JobsController.html": {}, "injectables/JobsService.html": {} } }], ["newcreatedjob._id", { "_index": 908, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["newcreatedjob.createdat", { "_index": 909, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["newcreatedpermission", { "_index": 1193, "title": {}, "body": { "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {} } }], ["newcreatedpermission._id", { "_index": 1195, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["newcreatedpermission.createdat", { "_index": 1196, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["newcreatedresume", { "_index": 1299, "title": {}, "body": { "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {} } }], ["newcreatedresume._id", { "_index": 1301, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["newcreatedresume.createdat", { "_index": 1302, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["newcreatedrole", { "_index": 1414, "title": {}, "body": { "controllers/RolesController.html": {}, "injectables/RolesService.html": {} } }], ["newcreatedrole._id", { "_index": 1416, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["newcreatedrole.createdat", { "_index": 1417, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["newcreatedsubscriber", { "_index": 1481, "title": {}, "body": { "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {} } }], ["newcreatedsubscriber._id", { "_index": 1483, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["newcreatedsubscriber.createdby", { "_index": 1484, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["newcreateduser", { "_index": 1589, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["newcreateduser._id", { "_index": 1591, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["newcreateduser.createdat", { "_index": 1592, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["newregister", { "_index": 1645, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["newregisteruser", { "_index": 1625, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["newuser", { "_index": 318, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["newuser.createdat", { "_index": 322, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["newuser?._id", { "_index": 320, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["next", { "_index": 1244, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["next.handle().pipe", { "_index": 1245, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["ng", { "_index": 186, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "classes/RegisterUserDto.html": {}, "injectables/ResumesService.html": {}, "classes/UserLoginDto.html": {} } }], ["ngày", { "_index": 568, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {} } }], ["người", { "_index": 583, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["nh", { "_index": 534, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-2.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateUserDto.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {} } }], ["nhất", { "_index": 1381, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["nhập", { "_index": 187, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/LocalStrategy.html": {} } }], ["nhật", { "_index": 1355, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["nodemailer", { "_index": 1710, "title": {}, "body": { "dependencies.html": {} } }], ["normal", { "_index": 766, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["normal_user", { "_index": 1846, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["npm", { "_index": 1729, "title": {}, "body": { "index.html": {} } }], ["null", { "_index": 299, "title": {}, "body": { "injectables/AuthService.html": {}, "miscellaneous/variables.html": {} } }], ["number", { "_index": 425, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "injectables/FilesService.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "interfaces/Response.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UsersService.html": {} } }], ["nào", { "_index": 329, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["này", { "_index": 992, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "controllers/MailController.html": {}, "injectables/ResumesService.html": {}, "injectables/SubscribersService.html": {} } }], ["ném", { "_index": 282, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["năng", { "_index": 557, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateSubscriberDto.html": {} } }], ["nếu", { "_index": 1357, "title": {}, "body": { "injectables/ResumesService.html": {}, "injectables/SubscribersService.html": {} } }], ["o", { "_index": 285, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["object", { "_index": 513, "title": {}, "body": { "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateUserDto.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/RegisterUserDto.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {} } }], ["objuser", { "_index": 295, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["observable", { "_index": 1237, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["officedocument.wordprocessingml.document|text\\/html)$/i", { "_index": 806, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["offset", { "_index": 452, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["omittype", { "_index": 1546, "title": {}, "body": { "classes/UpdateUserDto.html": {} } }], ["omittype(createuserdto", { "_index": 1544, "title": {}, "body": { "classes/UpdateUserDto.html": {} } }], ["onmoduleinit", { "_index": 707, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["optional", { "_index": 132, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "interfaces/IUser.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MulterConfigService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "interfaces/Response.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["options", { "_index": 1104, "title": {}, "body": { "modules/MailModule.html": {} } }], ["out", { "_index": 51, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }], ["override", { "_index": 1067, "title": {}, "body": { "controllers/MailController.html": {} } }], ["overview", { "_index": 1738, "title": { "overview.html": {} }, "body": { "overview.html": {} } }], ["oạn", { "_index": 1336, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["package", { "_index": 1682, "title": { "dependencies.html": {}, "properties.html": {} }, "body": {} }], ["pages", { "_index": 478, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["pagesize", { "_index": 473, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["paginate", { "_index": 398, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {}, "miscellaneous/variables.html": {} } }], ["paginate')@get", { "_index": 1576, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["paginate')@public", { "_index": 370, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {} } }], ["param", { "_index": 386, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["param('id", { "_index": 403, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["parameters", { "_index": 130, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MulterConfigService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["params", { "_index": 436, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["parent", { "_index": 1137, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["parsefilepipebuilder", { "_index": 790, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["parser", { "_index": 272, "title": {}, "body": { "injectables/AuthService.html": {}, "dependencies.html": {} } }], ["partialtype", { "_index": 1527, "title": {}, "body": { "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {} } }], ["partialtype(createcompanydto", { "_index": 1526, "title": {}, "body": { "classes/UpdateCompanyDto.html": {} } }], ["partialtype(createfiledto", { "_index": 1531, "title": {}, "body": { "classes/UpdateFileDto.html": {} } }], ["partialtype(createjobdto", { "_index": 1533, "title": {}, "body": { "classes/UpdateJobDto.html": {} } }], ["partialtype(createpermissiondto", { "_index": 1535, "title": {}, "body": { "classes/UpdatePermissionDto.html": {} } }], ["partialtype(createresumedto", { "_index": 1537, "title": {}, "body": { "classes/UpdateResumeDto.html": {} } }], ["partialtype(createroledto", { "_index": 1539, "title": {}, "body": { "classes/UpdateRoleDto.html": {} } }], ["partialtype(createsubscriberdto", { "_index": 1541, "title": {}, "body": { "classes/UpdateSubscriberDto.html": {} } }], ["pass", { "_index": 259, "title": {}, "body": { "injectables/AuthService.html": {}, "modules/MailModule.html": {} } }], ["passport", { "_index": 274, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/ResumesController.html": {}, "controllers/UsersController.html": {}, "dependencies.html": {} } }], ["passport/jwt.strategy", { "_index": 232, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["passport/local.strategy", { "_index": 229, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["passportmodule", { "_index": 227, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["passportstrategy", { "_index": 1003, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["passportstrategy(strategy", { "_index": 994, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["passthrough", { "_index": 194, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["password", { "_index": 588, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "injectables/LocalStrategy.html": {}, "classes/RegisterUserDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["patch", { "_index": 385, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {}, "miscellaneous/variables.html": {} } }], ["patch(':id", { "_index": 383, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {} } }], ["path", { "_index": 640, "title": {}, "body": { "classes/CreatePermissionDto.html": {}, "modules/MailModule.html": {}, "injectables/MulterConfigService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["path.basename(file.originalname", { "_index": 1161, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["path.extname(file.originalname", { "_index": 1157, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["payload", { "_index": 302, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["pending", { "_index": 1332, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["permission", { "_index": 659, "title": { "classes/Permission.html": {} }, "body": { "classes/CreateRoleDto.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/Role.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["permission')@delete(':id", { "_index": 1183, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["permission')@patch(':id", { "_index": 1186, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["permission.apipath", { "_index": 986, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["permission.dto", { "_index": 1190, "title": {}, "body": { "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/UpdatePermissionDto.html": {} } }], ["permission.dto.ts", { "_index": 637, "title": {}, "body": { "classes/CreatePermissionDto.html": {}, "classes/UpdatePermissionDto.html": {}, "coverage.html": {} } }], ["permission.dto.ts:11", { "_index": 644, "title": {}, "body": { "classes/CreatePermissionDto.html": {} } }], ["permission.dto.ts:14", { "_index": 641, "title": {}, "body": { "classes/CreatePermissionDto.html": {} } }], ["permission.dto.ts:17", { "_index": 642, "title": {}, "body": { "classes/CreatePermissionDto.html": {} } }], ["permission.dto.ts:20", { "_index": 643, "title": {}, "body": { "classes/CreatePermissionDto.html": {} } }], ["permission.method", { "_index": 985, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["permission.name", { "_index": 702, "title": {}, "body": { "modules/DatabasesModule.html": {}, "modules/PermissionsModule.html": {}, "classes/Role.html": {} } }], ["permissiondocument", { "_index": 718, "title": {}, "body": { "injectables/DatabasesService.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {} } }], ["permissionmodel", { "_index": 1210, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["permissions", { "_index": 297, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/CreateRoleDto.html": {}, "injectables/DatabasesService.html": {}, "interfaces/IUser.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "controllers/PermissionsController.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "miscellaneous/variables.html": {} } }], ["permissions.controller", { "_index": 1205, "title": {}, "body": { "modules/PermissionsModule.html": {} } }], ["permissions.find", { "_index": 984, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["permissions.service", { "_index": 1189, "title": {}, "body": { "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {} } }], ["permissions/permissions.module", { "_index": 69, "title": {}, "body": { "modules/AppModule.html": {} } }], ["permissionschema", { "_index": 696, "title": {}, "body": { "modules/DatabasesModule.html": {}, "classes/Permission.html": {}, "modules/PermissionsModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["permissionscontroller", { "_index": 1177, "title": { "controllers/PermissionsController.html": {} }, "body": { "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "coverage.html": {} } }], ["permissionsmodel", { "_index": 710, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["permissionsmodule", { "_index": 44, "title": { "modules/PermissionsModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/PermissionsModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["permissionsservice", { "_index": 1188, "title": { "injectables/PermissionsService.html": {} }, "body": { "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["phân", { "_index": 1333, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["phải", { "_index": 1071, "title": {}, "body": { "controllers/MailController.html": {} } }], ["phần", { "_index": 484, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["plugin", { "_index": 63, "title": {}, "body": { "modules/AppModule.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["populate", { "_index": 1382, "title": {}, "body": { "injectables/ResumesService.html": {}, "injectables/UsersService.html": {} } }], ["populate(population", { "_index": 466, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["population", { "_index": 448, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["post", { "_index": 9, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {}, "miscellaneous/variables.html": {} } }], ["post('/login", { "_index": 192, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["post('/logout", { "_index": 217, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["post('/register", { "_index": 161, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["post('by", { "_index": 1283, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["post('skills", { "_index": 1485, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["post('skills')@responsemessage('get", { "_index": 1465, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["post('upload", { "_index": 799, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["prefix", { "_index": 118, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/DatabasesController.html": {}, "controllers/FilesController.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["preview", { "_index": 1099, "title": {}, "body": { "modules/MailModule.html": {} } }], ["private", { "_index": 21, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/HealthController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["process", { "_index": 433, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/PermissionsService.html": {} } }], ["process.cwd", { "_index": 1122, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["processrefreshtoken", { "_index": 247, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["projection", { "_index": 447, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["promise", { "_index": 262, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/LocalStrategy.html": {} } }], ["prop", { "_index": 507, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {} } }], ["prop({required", { "_index": 1555, "title": {}, "body": { "classes/User.html": {} } }], ["prop({type", { "_index": 512, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {} } }], ["properties", { "_index": 244, "title": { "properties.html": {} }, "body": { "injectables/AuthService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {}, "properties.html": {} } }], ["providers", { "_index": 32, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }], ["public", { "_index": 170, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["public()@responsemessage('fetch", { "_index": 1578, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["public()@responsemessage('register", { "_index": 159, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["public/images/${folder", { "_index": 1153, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["push", { "_index": 1376, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["qu", { "_index": 487, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["quantity", { "_index": 564, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {} } }], ["query", { "_index": 387, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["query('current", { "_index": 399, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["query('pagesize", { "_index": 400, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["querystring", { "_index": 367, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["quyền", { "_index": 745, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/JwtAuthGuard.html": {} } }], ["quên", { "_index": 490, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["ra", { "_index": 1339, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["readonly", { "_index": 22, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/CompaniesController.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "classes/RegisterUserDto.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {} } }], ["receiver", { "_index": 1080, "title": {}, "body": { "controllers/MailController.html": {} } }], ["recursive", { "_index": 1124, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["ref", { "_index": 1253, "title": {}, "body": { "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["reflect", { "_index": 1715, "title": {}, "body": { "dependencies.html": {} } }], ["reflector", { "_index": 949, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["refresh", { "_index": 154, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {} } }], ["refreshtoken", { "_index": 213, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "classes/User.html": {}, "injectables/UsersService.html": {} } }], ["register", { "_index": 248, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/UsersService.html": {} } }], ["register(newregisteruser", { "_index": 1623, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["register(user", { "_index": 256, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["registeruserdto", { "_index": 158, "title": { "classes/RegisterUserDto.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {}, "coverage.html": {} } }], ["remove", { "_index": 361, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["remove(@param('id", { "_index": 406, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["remove(id", { "_index": 378, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["removes", { "_index": 839, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["reply", { "_index": 1066, "title": {}, "body": { "controllers/MailController.html": {} } }], ["req", { "_index": 133, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/MulterConfigService.html": {} } }], ["req.user", { "_index": 201, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["req?.headers?.folder_type", { "_index": 1149, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["request", { "_index": 11, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/JwtAuthGuard.html": {}, "miscellaneous/variables.html": {} } }], ["request.cookies['refresh_token", { "_index": 214, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["request.method", { "_index": 979, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["request.route?.path", { "_index": 981, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["request.user", { "_index": 1854, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["requested", { "_index": 1132, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["required", { "_index": 1565, "title": {}, "body": { "classes/User.html": {} } }], ["res", { "_index": 164, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["reset", { "_index": 50, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }], ["response", { "_index": 143, "title": { "interfaces/Response.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "interfaces/Response.html": {}, "controllers/SubscribersController.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["response.clearcookie('refresh_token", { "_index": 339, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["response.cookie('refresh_token", { "_index": 312, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["response_message", { "_index": 1241, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["responsemessage", { "_index": 171, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/JobsController.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["responsemessage(\"get", { "_index": 1486, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["responsemessage('\"get", { "_index": 153, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["responsemessage('\"update", { "_index": 1290, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["responsemessage('create", { "_index": 889, "title": {}, "body": { "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["responsemessage('delete", { "_index": 894, "title": {}, "body": { "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["responsemessage('fetch", { "_index": 374, "title": {}, "body": { "controllers/CompaniesController.html": {}, "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["responsemessage('get", { "_index": 136, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/ResumesController.html": {} } }], ["responsemessage('logout", { "_index": 149, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["responsemessage('register", { "_index": 197, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["responsemessage('test", { "_index": 1042, "title": {}, "body": { "controllers/MailController.html": {} } }], ["responsemessage('update", { "_index": 898, "title": {}, "body": { "controllers/JobsController.html": {}, "controllers/PermissionsController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "controllers/UsersController.html": {} } }], ["responsemessage('upload", { "_index": 784, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["responsemessage('user", { "_index": 190, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["result", { "_index": 460, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["results", { "_index": 23, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "overview.html": {}, "properties.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["resume", { "_index": 1249, "title": { "classes/Resume.html": {} }, "body": { "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["resume')@delete(':id", { "_index": 1288, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["resume')@patch(':id", { "_index": 1291, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["resume')@post", { "_index": 1279, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["resume.dto", { "_index": 1295, "title": {}, "body": { "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/UpdateResumeDto.html": {} } }], ["resume.dto.ts", { "_index": 600, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/UpdateResumeDto.html": {}, "coverage.html": {} } }], ["resume.dto.ts:13", { "_index": 608, "title": {}, "body": { "classes/CreateCVDto.html": {} } }], ["resume.dto.ts:17", { "_index": 612, "title": {}, "body": { "classes/CreateCVDto.html": {} } }], ["resume.dto.ts:20", { "_index": 611, "title": {}, "body": { "classes/CreateCVDto.html": {} } }], ["resume.dto.ts:23", { "_index": 610, "title": {}, "body": { "classes/CreateCVDto.html": {} } }], ["resume.dto.ts:27", { "_index": 607, "title": {}, "body": { "classes/CreateCVDto.html": {} } }], ["resume.dto.ts:31", { "_index": 609, "title": {}, "body": { "classes/CreateCVDto.html": {} } }], ["resume.dto.ts:36", { "_index": 647, "title": {}, "body": { "classes/CreateResumeDto.html": {} } }], ["resume.dto.ts:40", { "_index": 645, "title": {}, "body": { "classes/CreateResumeDto.html": {} } }], ["resume.dto.ts:44", { "_index": 646, "title": {}, "body": { "classes/CreateResumeDto.html": {} } }], ["resume.name", { "_index": 1317, "title": {}, "body": { "modules/ResumesModule.html": {} } }], ["resumedocument", { "_index": 1269, "title": {}, "body": { "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {} } }], ["resumemodel", { "_index": 1322, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["resumes", { "_index": 1276, "title": {}, "body": { "controllers/ResumesController.html": {}, "miscellaneous/variables.html": {} } }], ["resumes.controller", { "_index": 1315, "title": {}, "body": { "modules/ResumesModule.html": {} } }], ["resumes.service", { "_index": 1294, "title": {}, "body": { "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {} } }], ["resumes/resumes.module", { "_index": 68, "title": {}, "body": { "modules/AppModule.html": {} } }], ["resumeschema", { "_index": 1272, "title": {}, "body": { "classes/Resume.html": {}, "modules/ResumesModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["resumescontroller", { "_index": 1274, "title": { "controllers/ResumesController.html": {} }, "body": { "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "coverage.html": {} } }], ["resumesmodule", { "_index": 45, "title": { "modules/ResumesModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/ResumesModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["resumesservice", { "_index": 1293, "title": { "injectables/ResumesService.html": {} }, "body": { "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["return", { "_index": 94, "title": {}, "body": { "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/MulterConfigService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "interfaces/Response.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["returns", { "_index": 108, "title": {}, "body": { "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "injectables/MulterConfigService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["riêng", { "_index": 881, "title": {}, "body": { "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {} } }], ["role", { "_index": 301, "title": { "classes/Role.html": {} }, "body": { "injectables/AuthService.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "interfaces/IUser.html": {}, "injectables/JwtStrategy.html": {}, "classes/RegisterUserDto.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["role')@delete(':id", { "_index": 1405, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["role')@patch(':id", { "_index": 1408, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["role')@post", { "_index": 1401, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["role.dto", { "_index": 1411, "title": {}, "body": { "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/UpdateRoleDto.html": {} } }], ["role.dto.ts", { "_index": 650, "title": {}, "body": { "classes/CreateRoleDto.html": {}, "classes/UpdateRoleDto.html": {}, "coverage.html": {} } }], ["role.dto.ts:15", { "_index": 658, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["role.dto.ts:18", { "_index": 651, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["role.dto.ts:22", { "_index": 656, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["role.dto.ts:27", { "_index": 664, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["role.name", { "_index": 704, "title": {}, "body": { "modules/DatabasesModule.html": {}, "modules/RolesModule.html": {}, "classes/User.html": {}, "modules/UsersModule.html": {} } }], ["roledocument", { "_index": 719, "title": {}, "body": { "injectables/DatabasesService.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {} } }], ["rolemodel", { "_index": 1431, "title": {}, "body": { "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["roles", { "_index": 1399, "title": {}, "body": { "controllers/RolesController.html": {}, "miscellaneous/variables.html": {} } }], ["roles.controller", { "_index": 1426, "title": {}, "body": { "modules/RolesModule.html": {} } }], ["roles.service", { "_index": 1410, "title": {}, "body": { "controllers/RolesController.html": {}, "modules/RolesModule.html": {} } }], ["roles/roles.module", { "_index": 70, "title": {}, "body": { "modules/AppModule.html": {} } }], ["roleschema", { "_index": 700, "title": {}, "body": { "modules/DatabasesModule.html": {}, "classes/Role.html": {}, "modules/RolesModule.html": {}, "modules/UsersModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["rolescontroller", { "_index": 1397, "title": { "controllers/RolesController.html": {} }, "body": { "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "coverage.html": {} } }], ["rolesmodel", { "_index": 712, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["rolesmodule", { "_index": 46, "title": { "modules/RolesModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/RolesModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["rolesservice", { "_index": 178, "title": { "injectables/RolesService.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["route", { "_index": 17, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/AuthController.html": {} } }], ["run", { "_index": 1730, "title": {}, "body": { "index.html": {} } }], ["rxjs", { "_index": 1238, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "dependencies.html": {} } }], ["rxjs/operators", { "_index": 1240, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["rằng", { "_index": 1351, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["s", { "_index": 278, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "injectables/DatabasesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["salary", { "_index": 563, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {} } }], ["salt", { "_index": 1634, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["same", { "_index": 1140, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["sample", { "_index": 724, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["schedulemodule", { "_index": 74, "title": {}, "body": { "modules/AppModule.html": {} } }], ["schedulemodule.forroot", { "_index": 99, "title": {}, "body": { "modules/AppModule.html": {} } }], ["schema", { "_index": 416, "title": {}, "body": { "modules/CompaniesModule.html": {}, "classes/Company.html": {}, "modules/DatabasesModule.html": {}, "classes/Job.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "classes/Permission.html": {}, "modules/PermissionsModule.html": {}, "classes/Resume.html": {}, "modules/ResumesModule.html": {}, "classes/Role.html": {}, "modules/RolesModule.html": {}, "classes/Subscriber.html": {}, "modules/SubscribersModule.html": {}, "classes/User.html": {}, "modules/UsersModule.html": {} } }], ["schemafactory", { "_index": 524, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {} } }], ["schemafactory.createforclass(company", { "_index": 538, "title": {}, "body": { "classes/Company.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(job", { "_index": 884, "title": {}, "body": { "classes/Job.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(permission", { "_index": 1176, "title": {}, "body": { "classes/Permission.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(resume", { "_index": 1273, "title": {}, "body": { "classes/Resume.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(role", { "_index": 1396, "title": {}, "body": { "classes/Role.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(subscriber", { "_index": 1455, "title": {}, "body": { "classes/Subscriber.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(user", { "_index": 1566, "title": {}, "body": { "classes/User.html": {}, "miscellaneous/variables.html": {} } }], ["schemas/company.schema", { "_index": 413, "title": {}, "body": { "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {} } }], ["schemas/job.schema", { "_index": 920, "title": {}, "body": { "modules/JobsModule.html": {}, "injectables/JobsService.html": {} } }], ["schemas/permission.schema", { "_index": 1206, "title": {}, "body": { "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {} } }], ["schemas/resume.schema", { "_index": 1316, "title": {}, "body": { "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {} } }], ["schemas/role.schema", { "_index": 1427, "title": {}, "body": { "modules/RolesModule.html": {}, "injectables/RolesService.html": {} } }], ["schemas/subscriber.schema", { "_index": 1497, "title": {}, "body": { "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {} } }], ["schemas/user.schema", { "_index": 1603, "title": {}, "body": { "modules/UsersModule.html": {}, "injectables/UsersService.html": {} } }], ["secret", { "_index": 237, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {} } }], ["secretorkey", { "_index": 1008, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["secure", { "_index": 1096, "title": {}, "body": { "modules/MailModule.html": {} } }], ["select", { "_index": 1383, "title": {}, "body": { "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["select(projection", { "_index": 1369, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["sendmail", { "_index": 1074, "title": {}, "body": { "controllers/MailController.html": {} } }], ["server", { "_index": 305, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["set", { "_index": 310, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {} } }], ["setmetadata(is_public_key", { "_index": 1848, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["setmetadata(is_public_permission", { "_index": 1850, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["setmetadata(response_message", { "_index": 1849, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["signoptions", { "_index": 239, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["single", { "_index": 1792, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["skills", { "_index": 558, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {} } }], ["skills')@skipcheckpermission", { "_index": 1467, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["skip", { "_index": 445, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["skip(offset", { "_index": 463, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["skipcheckpermission", { "_index": 1478, "title": {}, "body": { "controllers/SubscribersController.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["soft", { "_index": 61, "title": {}, "body": { "modules/AppModule.html": {}, "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["softdeletemodel", { "_index": 419, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/DatabasesService.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["softdeleteplugin", { "_index": 60, "title": {}, "body": { "modules/AppModule.html": {} } }], ["sort", { "_index": 446, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["sort(sort", { "_index": 465, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["source", { "_index": 4, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/AuthController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "modules/CompaniesModule.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateFileDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/DatabasesController.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/File.html": {}, "controllers/FilesController.html": {}, "modules/FilesModule.html": {}, "injectables/FilesService.html": {}, "controllers/HealthController.html": {}, "modules/HealthModule.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "modules/JobsModule.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "injectables/MailService.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "modules/PermissionsModule.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "modules/ResumesModule.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "modules/RolesModule.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {} } }], ["src/.../company.schema.ts", { "_index": 1750, "title": {}, "body": { "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/.../customize.ts", { "_index": 1759, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/.../job.schema.ts", { "_index": 1751, "title": {}, "body": { "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/.../main.ts", { "_index": 1722, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["src/.../permission.schema.ts", { "_index": 1752, "title": {}, "body": { "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/.../resume.schema.ts", { "_index": 1753, "title": {}, "body": { "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/.../role.schema.ts", { "_index": 1754, "title": {}, "body": { "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/.../sample.ts", { "_index": 1758, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/.../subscriber.schema.ts", { "_index": 1755, "title": {}, "body": { "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/.../user.schema.ts", { "_index": 1756, "title": {}, "body": { "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/app.controller.ts", { "_index": 6, "title": {}, "body": { "controllers/AppController.html": {}, "coverage.html": {} } }], ["src/app.module.ts", { "_index": 52, "title": {}, "body": { "modules/AppModule.html": {} } }], ["src/app.service.ts", { "_index": 102, "title": {}, "body": { "injectables/AppService.html": {}, "coverage.html": {} } }], ["src/app.service.ts:5", { "_index": 107, "title": {}, "body": { "injectables/AppService.html": {} } }], ["src/auth/auth.controller.ts", { "_index": 117, "title": {}, "body": { "controllers/AuthController.html": {}, "coverage.html": {} } }], ["src/auth/auth.controller.ts:37", { "_index": 147, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["src/auth/auth.controller.ts:46", { "_index": 162, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["src/auth/auth.controller.ts:50", { "_index": 129, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["src/auth/auth.controller.ts:56", { "_index": 139, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["src/auth/auth.controller.ts:64", { "_index": 156, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["src/auth/auth.controller.ts:75", { "_index": 151, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["src/auth/auth.module.ts", { "_index": 225, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["src/auth/auth.service.ts", { "_index": 243, "title": {}, "body": { "injectables/AuthService.html": {}, "coverage.html": {} } }], ["src/auth/auth.service.ts:14", { "_index": 253, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:156", { "_index": 266, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:23", { "_index": 260, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:48", { "_index": 255, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:80", { "_index": 257, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:88", { "_index": 265, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/auth.service.ts:97", { "_index": 267, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/auth/jwt", { "_index": 942, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "coverage.html": {} } }], ["src/auth/local", { "_index": 1009, "title": {}, "body": { "injectables/LocalAuthGuard.html": {}, "coverage.html": {} } }], ["src/auth/passport/jwt.strategy.ts", { "_index": 993, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "coverage.html": {} } }], ["src/auth/passport/jwt.strategy.ts:21", { "_index": 999, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["src/auth/passport/jwt.strategy.ts:9", { "_index": 997, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["src/auth/passport/local.strategy.ts", { "_index": 1011, "title": {}, "body": { "injectables/LocalStrategy.html": {}, "coverage.html": {} } }], ["src/auth/passport/local.strategy.ts:12", { "_index": 1015, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["src/auth/passport/local.strategy.ts:7", { "_index": 1013, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["src/companies/companies.controller.ts", { "_index": 357, "title": {}, "body": { "controllers/CompaniesController.html": {}, "coverage.html": {} } }], ["src/companies/companies.controller.ts:25", { "_index": 365, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["src/companies/companies.controller.ts:32", { "_index": 371, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["src/companies/companies.controller.ts:43", { "_index": 376, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["src/companies/companies.controller.ts:51", { "_index": 384, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["src/companies/companies.controller.ts:60", { "_index": 380, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["src/companies/companies.module.ts", { "_index": 410, "title": {}, "body": { "modules/CompaniesModule.html": {} } }], ["src/companies/companies.service.ts", { "_index": 417, "title": {}, "body": { "injectables/CompaniesService.html": {}, "coverage.html": {} } }], ["src/companies/companies.service.ts:14", { "_index": 420, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["src/companies/companies.service.ts:20", { "_index": 423, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["src/companies/companies.service.ts:31", { "_index": 426, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["src/companies/companies.service.ts:60", { "_index": 427, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["src/companies/companies.service.ts:68", { "_index": 429, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["src/companies/companies.service.ts:83", { "_index": 428, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["src/companies/dto/create", { "_index": 614, "title": {}, "body": { "classes/CreateCompanyDto.html": {}, "coverage.html": {} } }], ["src/companies/dto/update", { "_index": 1525, "title": {}, "body": { "classes/UpdateCompanyDto.html": {}, "coverage.html": {} } }], ["src/companies/schemas/company.schema", { "_index": 1268, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/companies/schemas/company.schema.ts", { "_index": 500, "title": {}, "body": { "classes/Company.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/companies/schemas/company.schema.ts:10", { "_index": 521, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:13", { "_index": 508, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:16", { "_index": 517, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:19", { "_index": 520, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:23", { "_index": 510, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:26", { "_index": 522, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:29", { "_index": 519, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:32", { "_index": 515, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:37", { "_index": 514, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:43", { "_index": 523, "title": {}, "body": { "classes/Company.html": {} } }], ["src/companies/schemas/company.schema.ts:49", { "_index": 516, "title": {}, "body": { "classes/Company.html": {} } }], ["src/core/transform.interceptor.ts", { "_index": 1233, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["src/core/transform.interceptor.ts:21", { "_index": 1522, "title": {}, "body": { "injectables/TransformInterceptor.html": {} } }], ["src/core/transform.interceptor.ts:24", { "_index": 1524, "title": {}, "body": { "injectables/TransformInterceptor.html": {} } }], ["src/databases/databases.controller.ts", { "_index": 687, "title": {}, "body": { "controllers/DatabasesController.html": {}, "coverage.html": {} } }], ["src/databases/databases.module.ts", { "_index": 694, "title": {}, "body": { "modules/DatabasesModule.html": {} } }], ["src/databases/databases.service.ts", { "_index": 705, "title": {}, "body": { "injectables/DatabasesService.html": {}, "coverage.html": {} } }], ["src/databases/databases.service.ts:18", { "_index": 711, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["src/databases/databases.service.ts:32", { "_index": 713, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["src/databases/sample", { "_index": 1437, "title": {}, "body": { "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["src/databases/sample.ts", { "_index": 1671, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/decorator/customize", { "_index": 172, "title": {}, "body": { "controllers/AuthController.html": {}, "controllers/CompaniesController.html": {}, "controllers/FilesController.html": {}, "controllers/HealthController.html": {}, "controllers/JobsController.html": {}, "injectables/JwtAuthGuard.html": {}, "controllers/MailController.html": {}, "controllers/PermissionsController.html": {}, "interfaces/Response.html": {}, "controllers/ResumesController.html": {}, "controllers/RolesController.html": {}, "controllers/SubscribersController.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UsersController.html": {} } }], ["src/decorator/customize.ts", { "_index": 1672, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/files/dto/create", { "_index": 621, "title": {}, "body": { "classes/CreateFileDto.html": {}, "coverage.html": {} } }], ["src/files/dto/update", { "_index": 1530, "title": {}, "body": { "classes/UpdateFileDto.html": {}, "coverage.html": {} } }], ["src/files/entities/file.entity.ts", { "_index": 772, "title": {}, "body": { "classes/File.html": {}, "coverage.html": {} } }], ["src/files/files.controller.ts", { "_index": 774, "title": {}, "body": { "controllers/FilesController.html": {}, "coverage.html": {} } }], ["src/files/files.controller.ts:29", { "_index": 786, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["src/files/files.controller.ts:51", { "_index": 777, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["src/files/files.controller.ts:56", { "_index": 778, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["src/files/files.controller.ts:61", { "_index": 781, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["src/files/files.controller.ts:66", { "_index": 779, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["src/files/files.module.ts", { "_index": 822, "title": {}, "body": { "modules/FilesModule.html": {} } }], ["src/files/files.service.ts", { "_index": 829, "title": {}, "body": { "injectables/FilesService.html": {}, "coverage.html": {} } }], ["src/files/files.service.ts:11", { "_index": 832, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["src/files/files.service.ts:15", { "_index": 833, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["src/files/files.service.ts:19", { "_index": 835, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["src/files/files.service.ts:23", { "_index": 834, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["src/files/files.service.ts:7", { "_index": 831, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["src/files/multer.config.ts", { "_index": 1107, "title": {}, "body": { "injectables/MulterConfigService.html": {}, "coverage.html": {} } }], ["src/files/multer.config.ts:12", { "_index": 1117, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["src/files/multer.config.ts:15", { "_index": 1114, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["src/files/multer.config.ts:38", { "_index": 1111, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["src/health/health.controller.ts", { "_index": 841, "title": {}, "body": { "controllers/HealthController.html": {}, "coverage.html": {} } }], ["src/health/health.controller.ts:20", { "_index": 845, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["src/health/health.module.ts", { "_index": 855, "title": {}, "body": { "modules/HealthModule.html": {} } }], ["src/jobs/dto/create", { "_index": 539, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "coverage.html": {} } }], ["src/jobs/dto/update", { "_index": 1532, "title": {}, "body": { "classes/UpdateJobDto.html": {}, "coverage.html": {} } }], ["src/jobs/jobs.controller.ts", { "_index": 886, "title": {}, "body": { "controllers/JobsController.html": {}, "coverage.html": {} } }], ["src/jobs/jobs.controller.ts:25", { "_index": 891, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["src/jobs/jobs.controller.ts:36", { "_index": 900, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["src/jobs/jobs.controller.ts:47", { "_index": 896, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["src/jobs/jobs.controller.ts:56", { "_index": 893, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["src/jobs/jobs.controller.ts:67", { "_index": 892, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["src/jobs/jobs.module.ts", { "_index": 918, "title": {}, "body": { "modules/JobsModule.html": {} } }], ["src/jobs/jobs.service.ts", { "_index": 922, "title": {}, "body": { "injectables/JobsService.html": {}, "coverage.html": {} } }], ["src/jobs/jobs.service.ts:100", { "_index": 929, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["src/jobs/jobs.service.ts:13", { "_index": 924, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["src/jobs/jobs.service.ts:18", { "_index": 926, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["src/jobs/jobs.service.ts:49", { "_index": 930, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["src/jobs/jobs.service.ts:62", { "_index": 927, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["src/jobs/jobs.service.ts:90", { "_index": 928, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["src/jobs/schemas/job.schema", { "_index": 717, "title": {}, "body": { "injectables/DatabasesService.html": {}, "controllers/MailController.html": {}, "modules/MailModule.html": {}, "classes/Resume.html": {} } }], ["src/jobs/schemas/job.schema.ts", { "_index": 861, "title": {}, "body": { "classes/Job.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/jobs/schemas/job.schema.ts:11", { "_index": 873, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:14", { "_index": 876, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:17", { "_index": 862, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:23", { "_index": 875, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:26", { "_index": 874, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:29", { "_index": 871, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:32", { "_index": 867, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:35", { "_index": 872, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:38", { "_index": 877, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:41", { "_index": 868, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:44", { "_index": 869, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:47", { "_index": 863, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:50", { "_index": 878, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:53", { "_index": 870, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:56", { "_index": 865, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:61", { "_index": 864, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:67", { "_index": 879, "title": {}, "body": { "classes/Job.html": {} } }], ["src/jobs/schemas/job.schema.ts:73", { "_index": 866, "title": {}, "body": { "classes/Job.html": {} } }], ["src/mail/mail.controller.ts", { "_index": 1018, "title": {}, "body": { "controllers/MailController.html": {}, "coverage.html": {} } }], ["src/mail/mail.controller.ts:35", { "_index": 1024, "title": {}, "body": { "controllers/MailController.html": {} } }], ["src/mail/mail.module.ts", { "_index": 1085, "title": {}, "body": { "modules/MailModule.html": {} } }], ["src/mail/mail.service.ts", { "_index": 1106, "title": {}, "body": { "injectables/MailService.html": {}, "coverage.html": {} } }], ["src/main.ts", { "_index": 1674, "title": {}, "body": { "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["src/permissions/dto/create", { "_index": 636, "title": {}, "body": { "classes/CreatePermissionDto.html": {}, "coverage.html": {} } }], ["src/permissions/dto/update", { "_index": 1534, "title": {}, "body": { "classes/UpdatePermissionDto.html": {}, "coverage.html": {} } }], ["src/permissions/permissions.controller.ts", { "_index": 1178, "title": {}, "body": { "controllers/PermissionsController.html": {}, "coverage.html": {} } }], ["src/permissions/permissions.controller.ts:25", { "_index": 1180, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["src/permissions/permissions.controller.ts:42", { "_index": 1187, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["src/permissions/permissions.controller.ts:53", { "_index": 1184, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["src/permissions/permissions.controller.ts:62", { "_index": 1182, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["src/permissions/permissions.controller.ts:73", { "_index": 1181, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["src/permissions/permissions.module.ts", { "_index": 1204, "title": {}, "body": { "modules/PermissionsModule.html": {} } }], ["src/permissions/permissions.service.ts", { "_index": 1207, "title": {}, "body": { "injectables/PermissionsService.html": {}, "coverage.html": {} } }], ["src/permissions/permissions.service.ts:14", { "_index": 1209, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["src/permissions/permissions.service.ts:19", { "_index": 1211, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["src/permissions/permissions.service.ts:38", { "_index": 1215, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["src/permissions/permissions.service.ts:58", { "_index": 1212, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["src/permissions/permissions.service.ts:86", { "_index": 1213, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["src/permissions/permissions.service.ts:96", { "_index": 1214, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["src/permissions/schemas/permission.schema", { "_index": 697, "title": {}, "body": { "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/Role.html": {} } }], ["src/permissions/schemas/permission.schema.ts", { "_index": 1164, "title": {}, "body": { "classes/Permission.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/permissions/schemas/permission.schema.ts:10", { "_index": 1173, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:13", { "_index": 1165, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:16", { "_index": 1171, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:19", { "_index": 1172, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:23", { "_index": 1166, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:26", { "_index": 1174, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:29", { "_index": 1170, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:32", { "_index": 1168, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:37", { "_index": 1167, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:43", { "_index": 1175, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/permissions/schemas/permission.schema.ts:49", { "_index": 1169, "title": {}, "body": { "classes/Permission.html": {} } }], ["src/resumes/dto/create", { "_index": 599, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "coverage.html": {} } }], ["src/resumes/dto/update", { "_index": 1536, "title": {}, "body": { "classes/UpdateResumeDto.html": {}, "coverage.html": {} } }], ["src/resumes/resumes.controller.ts", { "_index": 1275, "title": {}, "body": { "controllers/ResumesController.html": {}, "coverage.html": {} } }], ["src/resumes/resumes.controller.ts:26", { "_index": 1280, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["src/resumes/resumes.controller.ts:40", { "_index": 1292, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["src/resumes/resumes.controller.ts:51", { "_index": 1289, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["src/resumes/resumes.controller.ts:59", { "_index": 1287, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["src/resumes/resumes.controller.ts:69", { "_index": 1281, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["src/resumes/resumes.controller.ts:79", { "_index": 1285, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["src/resumes/resumes.module.ts", { "_index": 1314, "title": {}, "body": { "modules/ResumesModule.html": {} } }], ["src/resumes/resumes.service.ts", { "_index": 1318, "title": {}, "body": { "injectables/ResumesService.html": {}, "coverage.html": {} } }], ["src/resumes/resumes.service.ts:104", { "_index": 1328, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["src/resumes/resumes.service.ts:12", { "_index": 1321, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["src/resumes/resumes.service.ts:124", { "_index": 1326, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["src/resumes/resumes.service.ts:17", { "_index": 1323, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["src/resumes/resumes.service.ts:42", { "_index": 1324, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["src/resumes/resumes.service.ts:71", { "_index": 1327, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["src/resumes/resumes.service.ts:81", { "_index": 1329, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["src/resumes/schemas/resume.schema.ts", { "_index": 1250, "title": {}, "body": { "classes/Resume.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/resumes/schemas/resume.schema.ts:12", { "_index": 1259, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:15", { "_index": 1267, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:18", { "_index": 1266, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:21", { "_index": 1263, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:24", { "_index": 1254, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:27", { "_index": 1262, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:30", { "_index": 1260, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:41", { "_index": 1255, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:44", { "_index": 1264, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:47", { "_index": 1261, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:50", { "_index": 1257, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:55", { "_index": 1256, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:61", { "_index": 1265, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/resumes/schemas/resume.schema.ts:67", { "_index": 1258, "title": {}, "body": { "classes/Resume.html": {} } }], ["src/roles/dto/create", { "_index": 649, "title": {}, "body": { "classes/CreateRoleDto.html": {}, "coverage.html": {} } }], ["src/roles/dto/update", { "_index": 1538, "title": {}, "body": { "classes/UpdateRoleDto.html": {}, "coverage.html": {} } }], ["src/roles/roles.controller.ts", { "_index": 1398, "title": {}, "body": { "controllers/RolesController.html": {}, "coverage.html": {} } }], ["src/roles/roles.controller.ts:25", { "_index": 1402, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["src/roles/roles.controller.ts:36", { "_index": 1409, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["src/roles/roles.controller.ts:47", { "_index": 1406, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["src/roles/roles.controller.ts:56", { "_index": 1404, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["src/roles/roles.controller.ts:67", { "_index": 1403, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["src/roles/roles.module", { "_index": 235, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["src/roles/roles.module.ts", { "_index": 1425, "title": {}, "body": { "modules/RolesModule.html": {} } }], ["src/roles/roles.service", { "_index": 179, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["src/roles/roles.service.ts", { "_index": 1428, "title": {}, "body": { "injectables/RolesService.html": {}, "coverage.html": {} } }], ["src/roles/roles.service.ts:16", { "_index": 1430, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["src/roles/roles.service.ts:21", { "_index": 1432, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["src/roles/roles.service.ts:39", { "_index": 1436, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["src/roles/roles.service.ts:52", { "_index": 1433, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["src/roles/roles.service.ts:80", { "_index": 1434, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["src/roles/roles.service.ts:91", { "_index": 1435, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["src/roles/schemas/role.schema", { "_index": 701, "title": {}, "body": { "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "classes/User.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {} } }], ["src/roles/schemas/role.schema.ts", { "_index": 1384, "title": {}, "body": { "classes/Role.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/roles/schemas/role.schema.ts:11", { "_index": 1392, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:14", { "_index": 1389, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:17", { "_index": 1390, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:20", { "_index": 1393, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:24", { "_index": 1385, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:27", { "_index": 1394, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:30", { "_index": 1391, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:33", { "_index": 1387, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:38", { "_index": 1386, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:44", { "_index": 1395, "title": {}, "body": { "classes/Role.html": {} } }], ["src/roles/schemas/role.schema.ts:50", { "_index": 1388, "title": {}, "body": { "classes/Role.html": {} } }], ["src/subscribers/dto/create", { "_index": 669, "title": {}, "body": { "classes/CreateSubscriberDto.html": {}, "coverage.html": {} } }], ["src/subscribers/dto/update", { "_index": 1540, "title": {}, "body": { "classes/UpdateSubscriberDto.html": {}, "coverage.html": {} } }], ["src/subscribers/schemas/subscriber.schema", { "_index": 1033, "title": {}, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {} } }], ["src/subscribers/schemas/subscriber.schema.ts", { "_index": 1450, "title": {}, "body": { "classes/Subscriber.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/subscribers/schemas/subscriber.schema.ts:11", { "_index": 1452, "title": {}, "body": { "classes/Subscriber.html": {} } }], ["src/subscribers/schemas/subscriber.schema.ts:14", { "_index": 1453, "title": {}, "body": { "classes/Subscriber.html": {} } }], ["src/subscribers/schemas/subscriber.schema.ts:17", { "_index": 1454, "title": {}, "body": { "classes/Subscriber.html": {} } }], ["src/subscribers/schemas/subscriber.schema.ts:20", { "_index": 1451, "title": {}, "body": { "classes/Subscriber.html": {} } }], ["src/subscribers/subscribers.controller.ts", { "_index": 1457, "title": {}, "body": { "controllers/SubscribersController.html": {}, "coverage.html": {} } }], ["src/subscribers/subscribers.controller.ts:31", { "_index": 1461, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["src/subscribers/subscribers.controller.ts:48", { "_index": 1468, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["src/subscribers/subscribers.controller.ts:56", { "_index": 1474, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["src/subscribers/subscribers.controller.ts:66", { "_index": 1470, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["src/subscribers/subscribers.controller.ts:75", { "_index": 1463, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["src/subscribers/subscribers.controller.ts:86", { "_index": 1462, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["src/subscribers/subscribers.module.ts", { "_index": 1496, "title": {}, "body": { "modules/SubscribersModule.html": {} } }], ["src/subscribers/subscribers.service.ts", { "_index": 1499, "title": {}, "body": { "injectables/SubscribersService.html": {}, "coverage.html": {} } }], ["src/subscribers/subscribers.service.ts:13", { "_index": 1502, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["src/subscribers/subscribers.service.ts:18", { "_index": 1503, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["src/subscribers/subscribers.service.ts:35", { "_index": 1509, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["src/subscribers/subscribers.service.ts:53", { "_index": 1507, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["src/subscribers/subscribers.service.ts:58", { "_index": 1504, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["src/subscribers/subscribers.service.ts:86", { "_index": 1505, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["src/subscribers/subscribers.service.ts:96", { "_index": 1508, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["src/users/dto/create", { "_index": 174, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "coverage.html": {} } }], ["src/users/dto/update", { "_index": 1543, "title": {}, "body": { "classes/UpdateUserDto.html": {}, "coverage.html": {} } }], ["src/users/schemas/user.schema", { "_index": 699, "title": {}, "body": { "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {} } }], ["src/users/schemas/user.schema.ts", { "_index": 1547, "title": {}, "body": { "classes/User.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["src/users/schemas/user.schema.ts:10", { "_index": 1559, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:13", { "_index": 1556, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:16", { "_index": 1560, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:19", { "_index": 1549, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:22", { "_index": 1557, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:25", { "_index": 1548, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:28", { "_index": 1550, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:34", { "_index": 1562, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:37", { "_index": 1561, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:41", { "_index": 1551, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:44", { "_index": 1563, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:47", { "_index": 1558, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:50", { "_index": 1553, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:55", { "_index": 1552, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:61", { "_index": 1564, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/schemas/user.schema.ts:67", { "_index": 1554, "title": {}, "body": { "classes/User.html": {} } }], ["src/users/user.interface", { "_index": 177, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {} } }], ["src/users/user.interface.ts", { "_index": 860, "title": {}, "body": { "interfaces/IUser.html": {}, "coverage.html": {} } }], ["src/users/users.controller.ts", { "_index": 1571, "title": {}, "body": { "controllers/UsersController.html": {}, "coverage.html": {} } }], ["src/users/users.controller.ts:26", { "_index": 1575, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["src/users/users.controller.ts:36", { "_index": 1577, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["src/users/users.controller.ts:47", { "_index": 1579, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["src/users/users.controller.ts:56", { "_index": 1584, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["src/users/users.controller.ts:62", { "_index": 1581, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["src/users/users.module", { "_index": 226, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["src/users/users.module.ts", { "_index": 1601, "title": {}, "body": { "modules/UsersModule.html": {} } }], ["src/users/users.service", { "_index": 269, "title": {}, "body": { "injectables/AuthService.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {} } }], ["src/users/users.service.ts", { "_index": 1604, "title": {}, "body": { "injectables/UsersService.html": {}, "coverage.html": {} } }], ["src/users/users.service.ts:116", { "_index": 1615, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:127", { "_index": 1617, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:135", { "_index": 1622, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:139", { "_index": 1627, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:152", { "_index": 1626, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:16", { "_index": 1611, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:175", { "_index": 1629, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:186", { "_index": 1619, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:25", { "_index": 1628, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:31", { "_index": 1613, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:61", { "_index": 1624, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["src/users/users.service.ts:87", { "_index": 1614, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["startdate", { "_index": 570, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {} } }], ["started", { "_index": 1724, "title": { "index.html": {} }, "body": {} }], ["statements", { "_index": 1659, "title": {}, "body": { "coverage.html": {} } }], ["status", { "_index": 603, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "miscellaneous/variables.html": {} } }], ["statuscode", { "_index": 1234, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["storage", { "_index": 1145, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["strategy", { "_index": 1001, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["strict", { "_index": 1105, "title": {}, "body": { "modules/MailModule.html": {} } }], ["string", { "_index": 109, "title": {}, "body": { "injectables/AppService.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["sub", { "_index": 303, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["subject", { "_index": 1068, "title": {}, "body": { "controllers/MailController.html": {} } }], ["subs", { "_index": 1048, "title": {}, "body": { "controllers/MailController.html": {} } }], ["subs.name", { "_index": 1081, "title": {}, "body": { "controllers/MailController.html": {} } }], ["subs.skills", { "_index": 1050, "title": {}, "body": { "controllers/MailController.html": {} } }], ["subscriber", { "_index": 1030, "title": { "classes/Subscriber.html": {} }, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "coverage.html": {} } }], ["subscriber')@delete(':id", { "_index": 1469, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["subscriber')@patch()@skipcheckpermission", { "_index": 1473, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["subscriber')@post", { "_index": 1460, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["subscriber's", { "_index": 1466, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["subscriber.dto", { "_index": 1477, "title": {}, "body": { "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/UpdateSubscriberDto.html": {} } }], ["subscriber.dto.ts", { "_index": 670, "title": {}, "body": { "classes/CreateSubscriberDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "coverage.html": {} } }], ["subscriber.dto.ts:16", { "_index": 672, "title": {}, "body": { "classes/CreateSubscriberDto.html": {} } }], ["subscriber.dto.ts:19", { "_index": 673, "title": {}, "body": { "classes/CreateSubscriberDto.html": {} } }], ["subscriber.dto.ts:24", { "_index": 675, "title": {}, "body": { "classes/CreateSubscriberDto.html": {} } }], ["subscriber.name", { "_index": 1091, "title": {}, "body": { "modules/MailModule.html": {}, "modules/SubscribersModule.html": {} } }], ["subscriberdocument", { "_index": 1031, "title": {}, "body": { "controllers/MailController.html": {}, "classes/Subscriber.html": {}, "injectables/SubscribersService.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {} } }], ["subscribermodel", { "_index": 1039, "title": {}, "body": { "controllers/MailController.html": {}, "injectables/SubscribersService.html": {} } }], ["subscribers", { "_index": 1046, "title": {}, "body": { "controllers/MailController.html": {}, "controllers/SubscribersController.html": {} } }], ["subscribers.controller", { "_index": 1498, "title": {}, "body": { "modules/SubscribersModule.html": {} } }], ["subscribers.service", { "_index": 1476, "title": {}, "body": { "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {} } }], ["subscribers/subscribers.module", { "_index": 72, "title": {}, "body": { "modules/AppModule.html": {} } }], ["subscriberschema", { "_index": 1032, "title": {}, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {}, "classes/Subscriber.html": {}, "modules/SubscribersModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["subscriberscontroller", { "_index": 1456, "title": { "controllers/SubscribersController.html": {} }, "body": { "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "coverage.html": {} } }], ["subscribersmodule", { "_index": 47, "title": { "modules/SubscribersModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/SubscribersModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["subscribersservice", { "_index": 1475, "title": { "injectables/SubscribersService.html": {} }, "body": { "controllers/SubscribersController.html": {}, "modules/SubscribersModule.html": {}, "injectables/SubscribersService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["subsskills", { "_index": 1049, "title": {}, "body": { "controllers/MailController.html": {} } }], ["successfully", { "_index": 160, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/MulterConfigService.html": {} } }], ["sunday", { "_index": 1041, "title": {}, "body": { "controllers/MailController.html": {} } }], ["super", { "_index": 964, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["super.canactivate(context", { "_index": 969, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["super_admin", { "_index": 1760, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["support", { "_index": 1733, "title": {}, "body": { "modules.html": {} } }], ["svg", { "_index": 1734, "title": {}, "body": { "modules.html": {} } }], ["switch", { "_index": 1128, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["t", { "_index": 485, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company-1.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateRoleDto.html": {}, "injectables/JobsService.html": {}, "controllers/MailController.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {}, "index.html": {} } }], ["table", { "_index": 1681, "title": {}, "body": { "coverage.html": {} } }], ["tablesort(document.getelementbyid('coverage", { "_index": 1680, "title": {}, "body": { "coverage.html": {} } }], ["targetdirectory", { "_index": 1115, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["targetendpoint", { "_index": 980, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["targetendpoint.startswith('/api/v1/auth", { "_index": 987, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["targetmethod", { "_index": 978, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["temp", { "_index": 206, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["temp.permissions", { "_index": 210, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["temp?.permissions", { "_index": 298, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["template", { "_index": 1072, "title": {}, "body": { "controllers/MailController.html": {}, "modules/MailModule.html": {} } }], ["templates", { "_index": 1102, "title": {}, "body": { "modules/MailModule.html": {} } }], ["terminusmodule", { "_index": 857, "title": {}, "body": { "modules/HealthModule.html": {} } }], ["th", { "_index": 279, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/UsersService.html": {}, "index.html": {} } }], ["tham", { "_index": 277, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["thanhdo", { "_index": 308, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["thanhdotft@gmail.com", { "_index": 1065, "title": {}, "body": { "controllers/MailController.html": {} } }], ["theo", { "_index": 1516, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["thi", { "_index": 1347, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["this.authservice.login(req.user", { "_index": 195, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["this.authservice.logout(user", { "_index": 218, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["this.authservice.processrefreshtoken(refreshtoken", { "_index": 215, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["this.authservice.register(registeruserdto", { "_index": 199, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["this.authservice.validateuser(username", { "_index": 1016, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["this.companiesservice.create(createcompanydto", { "_index": 397, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["this.companiesservice.findall(+currentpage", { "_index": 401, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["this.companiesservice.findone(id", { "_index": 404, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["this.companiesservice.remove(id", { "_index": 407, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["this.companiesservice.update(id", { "_index": 405, "title": {}, "body": { "controllers/CompaniesController.html": {} } }], ["this.companymodel", { "_index": 461, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["this.companymodel.create", { "_index": 440, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["this.companymodel.find(filter)).length", { "_index": 457, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["this.companymodel.findone", { "_index": 494, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["this.companymodel.softdelete", { "_index": 498, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["this.companymodel.updateone", { "_index": 495, "title": {}, "body": { "injectables/CompaniesService.html": {} } }], ["this.configservice.get('init_password", { "_index": 759, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.configservice.get('jwt_refresh_secret", { "_index": 323, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.configservice.get('should_init", { "_index": 730, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.configservice.get('web_url", { "_index": 1044, "title": {}, "body": { "controllers/MailController.html": {} } }], ["this.createrefreshtoken", { "_index": 307, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.createrefreshtoken(payload", { "_index": 336, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.db.pingcheck('database", { "_index": 854, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["this.ensureexists(`public/images/${folder", { "_index": 1150, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["this.filesservice.findall", { "_index": 814, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["this.filesservice.findone(+id", { "_index": 816, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["this.filesservice.remove(+id", { "_index": 819, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["this.filesservice.update(+id", { "_index": 818, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["this.gethashpassword(password", { "_index": 1642, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.health.check", { "_index": 853, "title": {}, "body": { "controllers/HealthController.html": {} } }], ["this.jobmodel", { "_index": 936, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["this.jobmodel.create", { "_index": 933, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["this.jobmodel.find", { "_index": 1052, "title": {}, "body": { "controllers/MailController.html": {} } }], ["this.jobmodel.find(filter)).length", { "_index": 935, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["this.jobmodel.findone", { "_index": 939, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["this.jobmodel.softdelete", { "_index": 940, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["this.jobmodel.updateone", { "_index": 934, "title": {}, "body": { "injectables/JobsService.html": {} } }], ["this.jobsservice.create(createjobdto", { "_index": 907, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["this.jobsservice.findall(+currentpage", { "_index": 914, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["this.jobsservice.findone(id", { "_index": 913, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["this.jobsservice.remove(id", { "_index": 911, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["this.jobsservice.update(id", { "_index": 910, "title": {}, "body": { "controllers/JobsController.html": {} } }], ["this.jwtservice.sign(payload", { "_index": 317, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.jwtservice.verify(refreshtoken", { "_index": 325, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.logger.log", { "_index": 769, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.mailerservice.sendmail", { "_index": 1064, "title": {}, "body": { "controllers/MailController.html": {} } }], ["this.permissionmodel", { "_index": 1224, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["this.permissionmodel.create", { "_index": 1219, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["this.permissionmodel.find(filter)).length", { "_index": 1223, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["this.permissionmodel.findbyid", { "_index": 1225, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["this.permissionmodel.findone", { "_index": 1216, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["this.permissionmodel.softdelete", { "_index": 1226, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["this.permissionmodel.updateone", { "_index": 1222, "title": {}, "body": { "injectables/PermissionsService.html": {} } }], ["this.permissionsmodel.count", { "_index": 735, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.permissionsmodel.find({}).select('_id", { "_index": 741, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.permissionsmodel.insertmany(init_permissions", { "_index": 739, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.permissionsservice.create", { "_index": 1194, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["this.permissionsservice.findall(+currentpage", { "_index": 1200, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["this.permissionsservice.findone(id", { "_index": 1199, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["this.permissionsservice.remove(id", { "_index": 1198, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["this.permissionsservice.update(id", { "_index": 1197, "title": {}, "body": { "controllers/PermissionsController.html": {} } }], ["this.reflector.get(response_message", { "_index": 1248, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["this.reflector.getallandoverride", { "_index": 975, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["this.reflector.getallandoverride(is_public_key", { "_index": 966, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["this.resumemodel", { "_index": 1368, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["this.resumemodel.create", { "_index": 1331, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["this.resumemodel.find(filter)).length", { "_index": 1367, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["this.resumemodel.findone", { "_index": 1374, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["this.resumemodel.softdelete", { "_index": 1379, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["this.resumemodel.updateone", { "_index": 1375, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["this.resumesservice.create", { "_index": 1300, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["this.resumesservice.findall(+currentpage", { "_index": 1308, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["this.resumesservice.findbyuser(user", { "_index": 1310, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["this.resumesservice.findone(id", { "_index": 1307, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["this.resumesservice.remove(id", { "_index": 1305, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["this.resumesservice.update(id", { "_index": 1304, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["this.rolemodel", { "_index": 1443, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["this.rolemodel.create", { "_index": 1440, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["this.rolemodel.find(filter)).length", { "_index": 1442, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["this.rolemodel.findbyid(id", { "_index": 1447, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["this.rolemodel.findbyid(id)).populate", { "_index": 1444, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["this.rolemodel.findone", { "_index": 1438, "title": {}, "body": { "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["this.rolemodel.softdelete", { "_index": 1449, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["this.rolemodel.updateone", { "_index": 1441, "title": {}, "body": { "injectables/RolesService.html": {} } }], ["this.rolesmodel.count", { "_index": 737, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.rolesmodel.findone", { "_index": 754, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.rolesmodel.insertmany", { "_index": 742, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.rolesservice.create(createroledto", { "_index": 1415, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["this.rolesservice.findall(+currentpage", { "_index": 1421, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["this.rolesservice.findone(id", { "_index": 1420, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["this.rolesservice.findone(user.role._id", { "_index": 208, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["this.rolesservice.findone(userrole._id", { "_index": 294, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["this.rolesservice.remove(id", { "_index": 1419, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["this.rolesservice.update(id", { "_index": 1418, "title": {}, "body": { "controllers/RolesController.html": {} } }], ["this.subscribermodel", { "_index": 1519, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["this.subscribermodel.create", { "_index": 1513, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["this.subscribermodel.find", { "_index": 1047, "title": {}, "body": { "controllers/MailController.html": {} } }], ["this.subscribermodel.find(filter)).length", { "_index": 1518, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["this.subscribermodel.findone", { "_index": 1510, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["this.subscribermodel.softdelete", { "_index": 1521, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["this.subscribermodel.updateone", { "_index": 1514, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["this.subscribersservice.create", { "_index": 1482, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["this.subscribersservice.findall(+currentpage", { "_index": 1492, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["this.subscribersservice.findone(id", { "_index": 1491, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["this.subscribersservice.getskills(user", { "_index": 1488, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["this.subscribersservice.remove(id", { "_index": 1490, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["this.subscribersservice.update(updatesubscriberdto", { "_index": 1489, "title": {}, "body": { "controllers/SubscribersController.html": {} } }], ["this.usermodel", { "_index": 1647, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.usermodel.create", { "_index": 1644, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.usermodel.find(filter)).length", { "_index": 1646, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.usermodel.findbyid(id", { "_index": 1653, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.usermodel.findone", { "_index": 1637, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.usermodel.softdelete", { "_index": 1655, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.usermodel.updateone", { "_index": 1649, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["this.usersmodel.count", { "_index": 733, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.usersmodel.insertmany", { "_index": 755, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.usersservice.create(createuserdto", { "_index": 1590, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["this.usersservice.findall(+currentpage", { "_index": 1593, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["this.usersservice.findone(id", { "_index": 1594, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["this.usersservice.findonebyusername(username", { "_index": 284, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.usersservice.finduserbyrefreshtoken(refreshtoken", { "_index": 333, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.usersservice.gethashpassword", { "_index": 758, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["this.usersservice.isvalidpassword(pass", { "_index": 288, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.usersservice.register(user", { "_index": 319, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.usersservice.remove(id", { "_index": 1597, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["this.usersservice.update(updateuserdto", { "_index": 1596, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["this.usersservice.updaterefreshtokenuser", { "_index": 337, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.usersservice.updaterefreshtokenuser(_id", { "_index": 309, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.usersservice.updaterefreshtokenuser(user._id", { "_index": 352, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["throttlerguard", { "_index": 180, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["throttlermodule", { "_index": 76, "title": {}, "body": { "modules/AppModule.html": {} } }], ["throttlermodule.forroot", { "_index": 79, "title": {}, "body": { "modules/AppModule.html": {} } }], ["throw", { "_index": 341, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["thành", { "_index": 354, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["thái", { "_index": 574, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "injectables/ResumesService.html": {} } }], ["thông", { "_index": 342, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {} } }], ["thúc", { "_index": 571, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {} } }], ["thấy", { "_index": 1372, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["thống", { "_index": 750, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["thời", { "_index": 1344, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["thực", { "_index": 345, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/ResumesService.html": {} } }], ["tim", { "_index": 1515, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["timestamps", { "_index": 526, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {} } }], ["tin", { "_index": 343, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "classes/User.html": {} } }], ["token", { "_index": 211, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/JwtAuthGuard.html": {} } }], ["token')@get('/refresh", { "_index": 155, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["total", { "_index": 483, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["totalitems", { "_index": 456, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["totalpages", { "_index": 458, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["tr", { "_index": 559, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateRoleDto.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {} } }], ["tra", { "_index": 327, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["trang", { "_index": 470, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["transfer", { "_index": 551, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["transformer", { "_index": 549, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "dependencies.html": {} } }], ["transforminterceptor", { "_index": 1242, "title": { "injectables/TransformInterceptor.html": {} }, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["transport", { "_index": 1093, "title": {}, "body": { "modules/MailModule.html": {} } }], ["tri", { "_index": 654, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["trong", { "_index": 1078, "title": {}, "body": { "controllers/MailController.html": {}, "injectables/ResumesService.html": {} } }], ["true", { "_index": 98, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "classes/Company.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "injectables/DatabasesService.html": {}, "classes/Job.html": {}, "injectables/JwtAuthGuard.html": {}, "modules/MailModule.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/Subscriber.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "miscellaneous/variables.html": {} } }], ["true})@isarray({message", { "_index": 661, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["truy", { "_index": 989, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["truyền", { "_index": 1075, "title": {}, "body": { "controllers/MailController.html": {} } }], ["try", { "_index": 324, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["trying", { "_index": 1142, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["trùng", { "_index": 330, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["trường", { "_index": 528, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "controllers/MailController.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["trạng", { "_index": 573, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "injectables/ResumesService.html": {} } }], ["trống", { "_index": 556, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["trống'})@isarray()@isstring({each", { "_index": 674, "title": {}, "body": { "classes/CreateSubscriberDto.html": {} } }], ["trống'})@isboolean({message", { "_index": 652, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["trống'})@ismongoid", { "_index": 606, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {} } }], ["trống'})@ismongoid({each", { "_index": 660, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["trống'})@isnotemptyobject()@isobject()@validatenested()@type(undefined", { "_index": 623, "title": {}, "body": { "classes/CreateJobDto.html": {}, "classes/CreateUserDto.html": {} } }], ["ts", { "_index": 1696, "title": {}, "body": { "dependencies.html": {} } }], ["ttl", { "_index": 80, "title": {}, "body": { "modules/AppModule.html": {} } }], ["tuổi", { "_index": 589, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["ty", { "_index": 492, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["type", { "_index": 140, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/DatabasesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "interfaces/IUser.html": {}, "classes/Job.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MulterConfigService.html": {}, "classes/Permission.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/RegisterUserDto.html": {}, "interfaces/Response.html": {}, "classes/Resume.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/Subscriber.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/UpdateUserDto.html": {}, "classes/User.html": {}, "classes/UserLoginDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {}, "miscellaneous/variables.html": {} } }], ["typealiases", { "_index": 1748, "title": { "miscellaneous/typealiases.html": {} }, "body": {} }], ["types", { "_index": 1529, "title": {}, "body": { "classes/UpdateCompanyDto.html": {}, "classes/UpdateFileDto.html": {}, "classes/UpdateJobDto.html": {}, "classes/UpdatePermissionDto.html": {}, "classes/UpdateResumeDto.html": {}, "classes/UpdateRoleDto.html": {}, "classes/UpdateSubscriberDto.html": {}, "classes/UpdateUserDto.html": {}, "dependencies.html": {} } }], ["tài", { "_index": 1651, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["tên", { "_index": 554, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateUserDto.html": {}, "injectables/LocalStrategy.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["tìm", { "_index": 1371, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["tính", { "_index": 592, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["tùy", { "_index": 535, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["tượng", { "_index": 1341, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["tại", { "_index": 472, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["tạo", { "_index": 1338, "title": {}, "body": { "injectables/ResumesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["tồn", { "_index": 493, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["tổng", { "_index": 479, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["u", { "_index": 569, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {} } }], ["unauthorizedexception", { "_index": 959, "title": {}, "body": { "injectables/JwtAuthGuard.html": {}, "injectables/LocalStrategy.html": {} } }], ["undefined", { "_index": 1252, "title": {}, "body": { "classes/Resume.html": {}, "classes/Role.html": {}, "classes/User.html": {} } }], ["unknown", { "_index": 141, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "injectables/CompaniesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["unlicensed", { "_index": 1746, "title": {}, "body": { "properties.html": {} } }], ["update", { "_index": 362, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["update(@body", { "_index": 1595, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["update(@param('id", { "_index": 817, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["update(id", { "_index": 381, "title": {}, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {} } }], ["update(updatesubscriberdto", { "_index": 1471, "title": {}, "body": { "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {} } }], ["update(updateuserdto", { "_index": 1582, "title": {}, "body": { "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["updateat", { "_index": 1271, "title": {}, "body": { "classes/Resume.html": {} } }], ["updatecompanydto", { "_index": 382, "title": { "classes/UpdateCompanyDto.html": {} }, "body": { "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "classes/UpdateCompanyDto.html": {}, "coverage.html": {} } }], ["updated", { "_index": 1335, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["updatedat", { "_index": 506, "title": {}, "body": { "classes/Company.html": {}, "classes/Job.html": {}, "classes/Permission.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "classes/User.html": {}, "miscellaneous/variables.html": {} } }], ["updatedby", { "_index": 496, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/Company.html": {}, "classes/Job.html": {}, "injectables/JobsService.html": {}, "classes/Permission.html": {}, "injectables/PermissionsService.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {}, "classes/Role.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["updatefiledto", { "_index": 780, "title": { "classes/UpdateFileDto.html": {} }, "body": { "controllers/FilesController.html": {}, "injectables/FilesService.html": {}, "classes/UpdateFileDto.html": {}, "coverage.html": {} } }], ["updatejobdto", { "_index": 897, "title": { "classes/UpdateJobDto.html": {} }, "body": { "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "classes/UpdateJobDto.html": {}, "coverage.html": {} } }], ["updatepermissiondto", { "_index": 1185, "title": { "classes/UpdatePermissionDto.html": {} }, "body": { "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "classes/UpdatePermissionDto.html": {}, "coverage.html": {} } }], ["updaterefreshtokenuser", { "_index": 1606, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["updateresumedto", { "_index": 1296, "title": { "classes/UpdateResumeDto.html": {} }, "body": { "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "classes/UpdateResumeDto.html": {}, "coverage.html": {} } }], ["updateroledto", { "_index": 1407, "title": { "classes/UpdateRoleDto.html": {} }, "body": { "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "classes/UpdateRoleDto.html": {}, "coverage.html": {} } }], ["updates", { "_index": 838, "title": {}, "body": { "injectables/FilesService.html": {} } }], ["updatesubscriberdto", { "_index": 1472, "title": { "classes/UpdateSubscriberDto.html": {} }, "body": { "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/UpdateSubscriberDto.html": {}, "coverage.html": {} } }], ["updateuserdto", { "_index": 1542, "title": { "classes/UpdateUserDto.html": {} }, "body": { "classes/UpdateUserDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {}, "coverage.html": {} } }], ["updateuserdto._id", { "_index": 1650, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["upload", { "_index": 1791, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["uploadedfile", { "_index": 789, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["uploadfile", { "_index": 776, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["uploadfile(file", { "_index": 782, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["upsert", { "_index": 1517, "title": {}, "body": { "injectables/SubscribersService.html": {} } }], ["uri", { "_index": 89, "title": {}, "body": { "modules/AppModule.html": {} } }], ["url", { "_index": 438, "title": {}, "body": { "injectables/CompaniesService.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {} } }], ["use", { "_index": 273, "title": {}, "body": { "injectables/AuthService.html": {}, "controllers/ResumesController.html": {}, "controllers/UsersController.html": {} } }], ["useclass", { "_index": 828, "title": {}, "body": { "modules/FilesModule.html": {} } }], ["usefactory", { "_index": 86, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/MailModule.html": {} } }], ["useguards", { "_index": 10, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/AuthController.html": {} } }], ["useguards(localauthguard", { "_index": 188, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["useguards(localauthguard)@public()@useguards(throttlerguard)@apibody({type", { "_index": 144, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["useguards(throttlerguard", { "_index": 189, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["useinterceptors", { "_index": 788, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["useinterceptors(fileinterceptor('fileupload", { "_index": 800, "title": {}, "body": { "controllers/FilesController.html": {} } }], ["user", { "_index": 137, "title": { "classes/User.html": {} }, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "controllers/CompaniesController.html": {}, "injectables/CompaniesService.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "controllers/JobsController.html": {}, "injectables/JobsService.html": {}, "injectables/JwtAuthGuard.html": {}, "injectables/LocalStrategy.html": {}, "modules/MailModule.html": {}, "controllers/PermissionsController.html": {}, "injectables/PermissionsService.html": {}, "controllers/ResumesController.html": {}, "injectables/ResumesService.html": {}, "controllers/RolesController.html": {}, "injectables/RolesService.html": {}, "controllers/SubscribersController.html": {}, "injectables/SubscribersService.html": {}, "classes/User.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["user')@delete(':id", { "_index": 1580, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["user')@patch", { "_index": 1583, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["user')@post", { "_index": 1574, "title": {}, "body": { "controllers/UsersController.html": {} } }], ["user')@post('/logout", { "_index": 150, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["user')@responsemessage('get", { "_index": 1284, "title": {}, "body": { "controllers/ResumesController.html": {} } }], ["user._id", { "_index": 442, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["user.dto", { "_index": 175, "title": {}, "body": { "controllers/AuthController.html": {}, "injectables/AuthService.html": {}, "classes/UpdateUserDto.html": {}, "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["user.dto.ts", { "_index": 576, "title": {}, "body": { "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UpdateUserDto.html": {}, "classes/UserLoginDto.html": {}, "coverage.html": {} } }], ["user.dto.ts:17", { "_index": 577, "title": {}, "body": { "classes/Company-2.html": {} } }], ["user.dto.ts:19", { "_index": 578, "title": {}, "body": { "classes/Company-2.html": {} } }], ["user.dto.ts:23", { "_index": 682, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:27", { "_index": 680, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:30", { "_index": 683, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:33", { "_index": 677, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:36", { "_index": 681, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:39", { "_index": 676, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:43", { "_index": 685, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:50", { "_index": 678, "title": {}, "body": { "classes/CreateUserDto.html": {} } }], ["user.dto.ts:55", { "_index": 1231, "title": {}, "body": { "classes/RegisterUserDto.html": {} } }], ["user.dto.ts:59", { "_index": 1229, "title": {}, "body": { "classes/RegisterUserDto.html": {} } }], ["user.dto.ts:62", { "_index": 1232, "title": {}, "body": { "classes/RegisterUserDto.html": {} } }], ["user.dto.ts:65", { "_index": 1228, "title": {}, "body": { "classes/RegisterUserDto.html": {} } }], ["user.dto.ts:68", { "_index": 1230, "title": {}, "body": { "classes/RegisterUserDto.html": {} } }], ["user.dto.ts:7", { "_index": 1545, "title": {}, "body": { "classes/UpdateUserDto.html": {} } }], ["user.dto.ts:71", { "_index": 1227, "title": {}, "body": { "classes/RegisterUserDto.html": {} } }], ["user.dto.ts:78", { "_index": 1569, "title": {}, "body": { "classes/UserLoginDto.html": {} } }], ["user.dto.ts:85", { "_index": 1568, "title": {}, "body": { "classes/UserLoginDto.html": {} } }], ["user.email", { "_index": 443, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {} } }], ["user.interface", { "_index": 1586, "title": {}, "body": { "controllers/UsersController.html": {}, "injectables/UsersService.html": {} } }], ["user.name", { "_index": 703, "title": {}, "body": { "modules/DatabasesModule.html": {}, "modules/UsersModule.html": {} } }], ["user.password", { "_index": 289, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user.permissions", { "_index": 209, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["user.role", { "_index": 292, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user.toobject", { "_index": 296, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user?.permissions", { "_index": 982, "title": {}, "body": { "injectables/JwtAuthGuard.html": {} } }], ["user@gmail.com", { "_index": 767, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["user_role", { "_index": 723, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["userdocument", { "_index": 720, "title": {}, "body": { "injectables/DatabasesService.html": {}, "classes/User.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "miscellaneous/typealiases.html": {} } }], ["userid", { "_index": 604, "title": {}, "body": { "classes/CreateCVDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/Resume.html": {}, "injectables/ResumesService.html": {} } }], ["userlogindto", { "_index": 173, "title": { "classes/UserLoginDto.html": {} }, "body": { "controllers/AuthController.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "coverage.html": {} } }], ["userlogindto})@responsemessage('user", { "_index": 145, "title": {}, "body": { "controllers/AuthController.html": {} } }], ["usermodel", { "_index": 1612, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["username", { "_index": 261, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/Company-2.html": {}, "classes/CreateUserDto.html": {}, "injectables/LocalStrategy.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {} } }], ["userrole", { "_index": 291, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/UsersService.html": {} } }], ["userrole?._id", { "_index": 768, "title": {}, "body": { "injectables/DatabasesService.html": {}, "injectables/UsersService.html": {} } }], ["users", { "_index": 1572, "title": {}, "body": { "controllers/UsersController.html": {}, "miscellaneous/variables.html": {} } }], ["users.controller", { "_index": 1602, "title": {}, "body": { "modules/UsersModule.html": {} } }], ["users.service", { "_index": 1585, "title": {}, "body": { "controllers/UsersController.html": {}, "modules/UsersModule.html": {} } }], ["users/users.module", { "_index": 58, "title": {}, "body": { "modules/AppModule.html": {} } }], ["userschema", { "_index": 698, "title": {}, "body": { "modules/DatabasesModule.html": {}, "classes/User.html": {}, "modules/UsersModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["userscontroller", { "_index": 1570, "title": { "controllers/UsersController.html": {} }, "body": { "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "coverage.html": {} } }], ["usersmodel", { "_index": 709, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["usersmodule", { "_index": 48, "title": { "modules/UsersModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/UsersModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["usersservice", { "_index": 251, "title": { "injectables/UsersService.html": {} }, "body": { "injectables/AuthService.html": {}, "modules/DatabasesModule.html": {}, "injectables/DatabasesService.html": {}, "controllers/UsersController.html": {}, "modules/UsersModule.html": {}, "injectables/UsersService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["v", { "_index": 283, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "injectables/DatabasesService.html": {}, "injectables/ResumesService.html": {} } }], ["vai", { "_index": 657, "title": {}, "body": { "classes/CreateRoleDto.html": {}, "injectables/RolesService.html": {} } }], ["valid", { "_index": 290, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["validate", { "_index": 995, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["validate(payload", { "_index": 998, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["validate(username", { "_index": 1014, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["validatenested", { "_index": 547, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {} } }], ["validateuser", { "_index": 249, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["validateuser(username", { "_index": 258, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["validator", { "_index": 548, "title": {}, "body": { "classes/Company-1.html": {}, "classes/Company-2.html": {}, "classes/CreateCVDto.html": {}, "classes/CreateCompanyDto.html": {}, "classes/CreateJobDto.html": {}, "classes/CreatePermissionDto.html": {}, "classes/CreateResumeDto.html": {}, "classes/CreateRoleDto.html": {}, "classes/CreateSubscriberDto.html": {}, "classes/CreateUserDto.html": {}, "classes/RegisterUserDto.html": {}, "classes/UserLoginDto.html": {}, "injectables/UsersService.html": {}, "dependencies.html": {} } }], ["value", { "_index": 264, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/DatabasesService.html": {}, "injectables/MulterConfigService.html": {}, "injectables/UsersService.html": {}, "miscellaneous/variables.html": {} } }], ["variable", { "_index": 1669, "title": {}, "body": { "coverage.html": {} } }], ["variables", { "_index": 1757, "title": { "miscellaneous/variables.html": {} }, "body": { "miscellaneous/variables.html": {} } }], ["version", { "_index": 1742, "title": {}, "body": { "properties.html": {} } }], ["vietnam", { "_index": 762, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["viên", { "_index": 747, "title": {}, "body": { "injectables/DatabasesService.html": {} } }], ["việc", { "_index": 555, "title": {}, "body": { "classes/Company-1.html": {}, "classes/CreateJobDto.html": {}, "injectables/JobsService.html": {}, "injectables/RolesService.html": {} } }], ["viện", { "_index": 280, "title": {}, "body": { "injectables/AuthService.html": {}, "index.html": {} } }], ["vn", { "_index": 1059, "title": {}, "body": { "controllers/MailController.html": {} } }], ["void", { "_index": 1116, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["vui", { "_index": 1638, "title": {}, "body": { "injectables/UsersService.html": {} } }], ["vào", { "_index": 1077, "title": {}, "body": { "controllers/MailController.html": {} } }], ["với", { "_index": 480, "title": {}, "body": { "injectables/CompaniesService.html": {}, "injectables/JobsService.html": {}, "injectables/PermissionsService.html": {}, "injectables/ResumesService.html": {}, "injectables/RolesService.html": {}, "injectables/SubscribersService.html": {}, "injectables/UsersService.html": {}, "index.html": {} } }], ["website", { "_index": 1082, "title": {}, "body": { "controllers/MailController.html": {} } }], ["website_url", { "_index": 1043, "title": {}, "body": { "controllers/MailController.html": {} } }], ["without", { "_index": 1159, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["world", { "_index": 113, "title": {}, "body": { "injectables/AppService.html": {} } }], ["xem", { "_index": 328, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["xuất", { "_index": 353, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["xác", { "_index": 344, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["xóa", { "_index": 1445, "title": {}, "body": { "injectables/RolesService.html": {}, "injectables/UsersService.html": {} } }], ["xảy", { "_index": 1356, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["y", { "_index": 1348, "title": {}, "body": { "injectables/ResumesService.html": {} } }], ["yes/no", { "_index": 655, "title": {}, "body": { "classes/CreateRoleDto.html": {} } }], ["you're", { "_index": 1141, "title": {}, "body": { "injectables/MulterConfigService.html": {} } }], ["zoom", { "_index": 49, "title": {}, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/CompaniesModule.html": {}, "modules/DatabasesModule.html": {}, "modules/FilesModule.html": {}, "modules/JobsModule.html": {}, "modules/MailModule.html": {}, "modules/PermissionsModule.html": {}, "modules/ResumesModule.html": {}, "modules/RolesModule.html": {}, "modules/SubscribersModule.html": {}, "modules/UsersModule.html": {}, "overview.html": {} } }]], "pipeline": ["stemmer"] },
    "store": { "controllers/AppController.html": { "url": "controllers/AppController.html", "title": "controller - AppController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Post, UseGuards, Request, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller() //  route /\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private configService: ConfigService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/AppModule.html": { "url": "modules/AppModule.html", "title": "module - AppModule", "body": "\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCompaniesModule\n\nCompaniesModule\n\nAppModule -->\n\nCompaniesModule->AppModule\n\n\n\n\n\nDatabasesModule\n\nDatabasesModule\n\nAppModule -->\n\nDatabasesModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nJobsModule\n\nJobsModule\n\nAppModule -->\n\nJobsModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\nAppModule -->\n\nPermissionsModule->AppModule\n\n\n\n\n\nResumesModule\n\nResumesModule\n\nAppModule -->\n\nResumesModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CompaniesModule\n                        \n                        \n                            DatabasesModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            JobsModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PermissionsModule\n                        \n                        \n                            ResumesModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            SubscribersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { softDeletePlugin } from 'soft-delete-plugin-mongoose';\nimport { CompaniesModule } from './companies/companies.module';\nimport { JobsModule } from './jobs/jobs.module';\nimport { FilesModule } from './files/files.module';\nimport { ResumesModule } from './resumes/resumes.module';\nimport { PermissionsModule } from './permissions/permissions.module';\nimport { RolesModule } from './roles/roles.module';\nimport { DatabasesModule } from './databases/databases.module';\nimport { SubscribersModule } from './subscribers/subscribers.module';\nimport { MailModule } from './mail/mail.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { HealthModule } from './health/health.module';\n\n@Module({\n  imports: [\n    ThrottlerModule.forRoot([\n      {\n        ttl: 60000, // milisecond\n        limit: 12,\n      },\n    ]),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (config: ConfigService) => ({\n        uri: config.get('MONGO_URL'),\n        connectionFactory: (connection) => {\n          connection.plugin(softDeletePlugin);\n          return connection;\n        },\n      }),\n      inject: [ConfigService],\n    }),\n\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n\n    ScheduleModule.forRoot(),\n\n    UsersModule,\n    AuthModule,\n    CompaniesModule,\n    JobsModule,\n    FilesModule,\n    ResumesModule,\n    PermissionsModule,\n    RolesModule,\n    DatabasesModule,\n    SubscribersModule,\n    MailModule,\n    HealthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/AppService.html": { "url": "injectables/AppService.html", "title": "injectable - AppService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    //model : code\n    return 'Hello World! & Hỏi Dân IT';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/AuthController.html": { "url": "controllers/AuthController.html", "title": "controller - AuthController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleGetAccount\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                handleLogin\n                            \n                            \n                                    \n                                    \n                                handleLogout\n                            \n                            \n                                    \n                                    \n                                handleRefreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                handleRegister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleGetAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAccount(user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('get user information')@Get('/account')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        handleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLogin(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Public()@UseGuards(ThrottlerGuard)@ApiBody({type: UserLoginDto})@ResponseMessage('User Login')@Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleLogout\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLogout(user: IUser, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Logout User')@Post('/logout')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRefreshToken(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('\"Get User by refresh token')@Get('/refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        handleRegister\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRegister(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ResponseMessage('Register a user successfully !')@Post('/register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Get,\n  Body,\n  Res,\n  Req,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './local-auth.guard';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { RegisterUserDto, UserLoginDto } from 'src/users/dto/create-user.dto';\nimport { Request, Response } from 'express';\nimport { IUser } from 'src/users/user.interface';\nimport { RolesService } from 'src/roles/roles.service';\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller('auth')\n//  route //\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private rolesService: RolesService,\n  ) {}\n\n  // đăng nhập\n\n  @UseGuards(LocalAuthGuard)\n  @Public()\n  @UseGuards(ThrottlerGuard)\n  @ApiBody({ type: UserLoginDto })\n  @ResponseMessage('User Login')\n  @Post('/login')\n  handleLogin(@Req() req, @Res({ passthrough: true }) response: Response) {\n    return this.authService.login(req.user, response);\n  }\n\n  // đăng ký\n\n  @Public()\n  @ResponseMessage('Register a user successfully !')\n  @Post('/register')\n  handleRegister(@Body() registerUserDto: RegisterUserDto) {\n    return this.authService.register(registerUserDto);\n  }\n  @Get('profile')\n  getProfile(@Req() req) {\n    return req.user;\n  }\n\n  @ResponseMessage('get user information')\n  @Get('/account')\n  async handleGetAccount(@User() user: IUser) {\n    const temp = (await this.rolesService.findOne(user.role._id)) as any;\n    user.permissions = temp.permissions;\n    return { user };\n  }\n\n  @ResponseMessage('\"Get User by refresh token')\n  @Get('/refresh')\n  handleRefreshToken(\n    @Req() request: Request,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const refreshToken = request.cookies['refresh_token'];\n    return this.authService.processRefreshToken(refreshToken, response);\n  }\n\n  //log out\n  @ResponseMessage('Logout User')\n  @Post('/logout')\n  handleLogout(\n    @User() user: IUser,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    return this.authService.logout(user, response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/AuthModule.html": { "url": "modules/AuthModule.html", "title": "module - AuthModule", "body": "\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './passport/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './passport/jwt.strategy';\nimport ms from 'ms';\nimport { AuthController } from './auth.controller';\nimport { RolesModule } from 'src/roles/roles.module';\n@Module({\n  imports: [\n    UsersModule,\n    RolesModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_ACCESS_SECRET'),\n        signOptions: {\n          expiresIn: ms(configService.get('JWT_ACCESS_EXPIRE')) / 1000,\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/AuthService.html": { "url": "injectables/AuthService.html", "title": "injectable - AuthService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createRefreshToken\n                            \n                            \n                                logout\n                            \n                            \n                                processRefreshToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: IUser, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:97\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { IUser } from 'src/users/user.interface';\nimport { RegisterUserDto } from 'src/users/dto/create-user.dto';\nimport { ConfigService } from '@nestjs/config';\nimport ms from 'ms';\nimport * as cookieParser from 'cookie-parser';\nimport { Request, response, Response } from 'express';\nimport { RolesService } from 'src/roles/roles.service';\nimport { use } from 'passport';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private rolesService: RolesService,\n  ) {}\n\n  //username/ pass là 2 tham số thư viện passport nó ném về\n  async validateUser(username: string, pass: string): Promise {\n    const user = await this.usersService.findOneByUsername(username);\n    if (!user) {\n      return 'đéo có user';\n    }\n\n    if (user) {\n      const isValid = this.usersService.isValidPassword(pass, user.password);\n      if (!isValid) {\n        return 'đéo valid';\n      }\n      if (isValid === true) {\n        const userRole = user.role as unknown as { _id: string; name: string };\n        const temp = await this.rolesService.findOne(userRole._id);\n        const objUser = {\n          ...user.toObject(),\n          permissions: temp?.permissions ?? [],\n        };\n        return objUser;\n      }\n    }\n\n    return null;\n  }\n\n  async login(user: IUser, response: Response) {\n    const { _id, name, email, role, permissions } = user;\n    const payload = {\n      sub: 'token login',\n      iss: 'from server',\n      _id,\n      name,\n      email,\n      role,\n    };\n\n    // create refresh Token\n    const refreshToken = this.createRefreshToken({ name: 'thanhdo' });\n    await this.usersService.updateRefreshTokenUser(_id, refreshToken);\n\n    // set refresh token as cookies\n    response.cookie('refresh_token', refreshToken, {\n      httpOnly: true,\n      maxAge: ms(this.configService.get('JWT_REFRESH_EXPIRE')) * 1000,\n    });\n    return {\n      access_token: this.jwtService.sign(payload),\n      user: {\n        _id,\n        name,\n        email,\n        role,\n        permissions,\n      },\n    };\n  }\n\n  async register(user: RegisterUserDto) {\n    const newUser = await this.usersService.register(user);\n    return {\n      _id: newUser?._id,\n      createdAt: newUser.createdAt,\n    };\n  }\n\n  createRefreshToken = (payload: any) => {\n    const refreshToken = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_SECRET'),\n      expiresIn:\n        ms(this.configService.get('JWT_REFRESH_EXPIRE')) / 1000,\n    });\n    return refreshToken;\n  };\n\n  processRefreshToken = async (refreshToken: string, response: Response) => {\n    try {\n      this.jwtService.verify(refreshToken, {\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n      });\n\n      // kiểm tra xem có user nào trùng refresh token hay không\n      const user = await this.usersService.findUserByRefreshToken(refreshToken);\n      if (user) {\n        // login for user and create new access token\n        const { _id, name, email, role } = user;\n        const payload = {\n          sub: 'token login',\n          iss: 'from server',\n          _id,\n          name,\n          email,\n          role,\n        };\n\n        // create refresh Token\n        const refreshToken = this.createRefreshToken(payload);\n        await this.usersService.updateRefreshTokenUser(\n          _id.toString(),\n          refreshToken,\n        );\n\n        const userRole = user.role as unknown as { _id: string; name: string };\n        const temp = await this.rolesService.findOne(userRole._id);\n        response.clearCookie('refresh_token');\n\n        // set refreshtoken as cokies\n        response.cookie('refresh_token', refreshToken, {\n          httpOnly: true,\n          maxAge:\n            ms(this.configService.get('JWT_REFRESH_EXPIRE')) * 1000,\n        });\n        return {\n          access_token: this.jwtService.sign(payload),\n          user: {\n            _id,\n            name,\n            email,\n            role,\n            permissions: temp?.permissions ?? [],\n          },\n        };\n      } else {\n        throw new BadRequestException(\n          'Thông tin xác thực (refresh token) không hợp lệ hoặc đã hết hạn',\n        );\n      }\n    } catch (error) {\n      throw new BadRequestException(\n        'Thông tin xác thực (refresh token) không hợp lệ hoặc đã hết hạn',\n      );\n    }\n  };\n\n  logout = async (user: IUser, response: Response) => {\n    await this.usersService.updateRefreshTokenUser(user._id, '');\n    response.clearCookie('refresh_token');\n    return 'Đăng xuất thành công';\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/CompaniesController.html": { "url": "controllers/CompaniesController.html", "title": "controller - CompaniesController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  CompaniesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/companies.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                companies\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCompanyDto: CreateCompanyDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/companies/companies.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCompanyDto\n                                            \n                                                            CreateCompanyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: string, limit: string, queryString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('Fetch company with paginate')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/companies/companies.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('fetch a company by id')@Get(':id')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/companies/companies.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/companies/companies.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCompanyDto: UpdateCompanyDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/companies/companies.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCompanyDto\n                                            \n                                                            UpdateCompanyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { CompaniesService } from './companies.service';\nimport { CreateCompanyDto } from './dto/create-company.dto';\nimport { UpdateCompanyDto } from './dto/update-company.dto';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { IUser } from 'src/users/user.interface';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('companies')\n@Controller('companies')\nexport class CompaniesController {\n  constructor(private readonly companiesService: CompaniesService) {}\n\n  @Post()\n  create(@Body() createCompanyDto: CreateCompanyDto, @User() user: IUser) {\n    return this.companiesService.create(createCompanyDto, user);\n  }\n\n  @Get()\n  @ResponseMessage('Fetch company with paginate')\n  @Public()\n  findAll(\n    @Query('current') currentPage: string,\n    @Query('pageSize') limit: string,\n    @Query() queryString: string,\n  ) {\n    return this.companiesService.findAll(+currentPage, +limit, queryString);\n  }\n\n  @ResponseMessage('fetch a company by id')\n  @Get(':id')\n  @Public()\n  findOne(\n    @Param('id')\n    id: string,\n  ) {\n    return this.companiesService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateCompanyDto: UpdateCompanyDto,\n    @User() user: IUser,\n  ) {\n    return this.companiesService.update(id, updateCompanyDto, user);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string, @User() user: IUser) {\n    return this.companiesService.remove(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/CompaniesModule.html": { "url": "modules/CompaniesModule.html", "title": "module - CompaniesModule", "body": "\n                   \n\n\n\n\n    Modules\n    CompaniesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CompaniesModule\n\n\n\ncluster_CompaniesModule_providers\n\n\n\n\nCompaniesService\n\nCompaniesService\n\n\n\nCompaniesModule\n\nCompaniesModule\n\nCompaniesModule -->\n\nCompaniesService->CompaniesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/companies/companies.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CompaniesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CompaniesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CompaniesService } from './companies.service';\nimport { CompaniesController } from './companies.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Company, CompanySchema } from './schemas/company.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Company.name, schema: CompanySchema }]),\n  ],\n  controllers: [CompaniesController],\n  providers: [CompaniesService],\n})\nexport class CompaniesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/CompaniesService.html": { "url": "injectables/CompaniesService.html", "title": "injectable - CompaniesService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CompaniesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/companies.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(companyModel: SoftDeleteModel)\n                    \n                \n                        \n                            \n                                Defined in src/companies/companies.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        companyModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createdCompany: CreateCompanyDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/companies/companies.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createdCompany\n                                            \n                                                            CreateCompanyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: number, limit: number, queryString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/companies/companies.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/companies/companies.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/companies/companies.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCompanyDto: UpdateCompanyDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/companies/companies.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCompanyDto\n                                            \n                                                            UpdateCompanyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCompanyDto } from './dto/create-company.dto';\nimport { UpdateCompanyDto } from './dto/update-company.dto';\nimport { Company, CompanyDocument } from './schemas/company.schema';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { IUser } from 'src/users/user.interface';\nimport { emitWarning } from 'process';\nimport mongoose from 'mongoose';\nimport aqp from 'api-query-params';\nimport { fileURLToPath } from 'url';\n\n@Injectable()\nexport class CompaniesService {\n  constructor(\n    @InjectModel(Company.name)\n    private companyModel: SoftDeleteModel,\n  ) {}\n\n  create(createdCompany: CreateCompanyDto, user: IUser) {\n    const company = this.companyModel.create({\n      ...createdCompany,\n      createdBy: {\n        _id: user._id,\n        email: user.email,\n      },\n    });\n    return company;\n  }\n\n  async findAll(currentPage: number, limit: number, queryString: string) {\n    const { filter, skip, sort, projection, population } = aqp(queryString);\n\n    delete filter.current;\n    delete filter.pageSize;\n\n    const offset = (+currentPage - 1) * +limit;\n    const defaultLimit = +limit ? +limit : 10;\n    const totalItems = (await this.companyModel.find(filter)).length;\n    const totalPages = Math.ceil(totalItems / defaultLimit);\n    const result = await this.companyModel\n      .find(filter)\n      .skip(offset)\n      .limit(defaultLimit)\n      .sort(sort as any)\n      .populate(population)\n      .exec();\n    return {\n      meta: {\n        current: currentPage, //trang hiện tại\n        pageSize: limit, //số lượng bản ghi đã lấy\n        pages: totalPages, //tổng số trang với điều kiện query\n        total: totalItems, // tổng số phần tử (số bản ghi)\n      },\n      result, //kết quả query\n    };\n  }\n\n  // chưa làm @@ , quên\n  findOne(id: string) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return `Công ty không tồn tại`;\n\n    return this.companyModel.findOne({\n      _id: id,\n    });\n  }\n\n  async update(id: string, updateCompanyDto: UpdateCompanyDto, user: IUser) {\n    return await this.companyModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        ...updateCompanyDto,\n        updatedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n  }\n\n  async remove(id: string, user: IUser) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return 'Công ty không tồn tại';\n    await this.companyModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        deletedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n    return this.companyModel.softDelete({\n      _id: id,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Company.html": { "url": "classes/Company.html", "title": "class - Company", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/schemas/company.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/schemas/company.schema.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\n\nexport type CompanyDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Company {\n  // 3 trường thông tin bắt buộc cho công ty\n  @Prop()\n  name: string;\n\n  @Prop()\n  address: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  logo: string;\n\n  //   Các trường thông tin mặc định\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n\n  @Prop()\n  isDeleted: boolean;\n\n  @Prop()\n  deletedAt: Date;\n\n  // các trường thông tin tùy chọn\n\n  @Prop({ type: Object })\n  createdBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  updatedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  deletedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n}\n\nexport const CompanySchema = SchemaFactory.createForClass(Company);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Company-1.html": { "url": "classes/Company-1.html", "title": "class - Company-1", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/dto/create-job.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n//data transfer object //\nclass Company {\n  @IsNotEmpty()\n  _id: mongoose.Schema.Types.ObjectId;\n  @IsNotEmpty()\n  name: string;\n}\nexport class CreateJobDto {\n  @IsNotEmpty({ message: 'Tên công việc không được để trống' })\n  name: string;\n\n  @IsNotEmpty({ message: 'Kĩ năng không được để trống' })\n  skills: string[];\n\n  @IsNotEmpty({ message: 'Công ty không được để trống' })\n  @IsNotEmptyObject()\n  @IsObject()\n  @ValidateNested()\n  @Type(() => Company)\n  company: Company;\n\n  //   @IsNotEmpty({ message: 'Vị trí không được để trống' })\n  //   location: string;\n\n  @IsNotEmpty({ message: 'Mức lương không được để trống' })\n  salary: number;\n\n  @IsNotEmpty({ message: 'Số lượng không được để trống' })\n  quantity: number;\n\n  @IsNotEmpty({ message: 'Level không được để trống' })\n  level: string;\n\n  @IsNotEmpty({ message: 'Mô tả không được để trống' })\n  description: string;\n\n  @IsNotEmpty({ message: 'Địa điểm không được để trống' })\n  location: string;\n\n  // @IsNotEmpty({ message: 'logo không được để trống' })\n  // logo: string;\n\n  @IsNotEmpty({ message: 'Ngày bắt đầu không được để trống' })\n  startDate: string;\n\n  @IsNotEmpty({ message: 'Ngày kết thúc không được để trống' })\n  endDate: string;\n\n  @IsNotEmpty({ message: 'Trạng thái không được để trống' })\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Company-2.html": { "url": "classes/Company-2.html", "title": "class - Company-2", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n//data transfer object //\nclass Company {\n  @IsNotEmpty()\n  _id: mongoose.Schema.Types.ObjectId;\n  @IsNotEmpty()\n  name: string;\n}\nexport class CreateUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  address: string;\n\n  @IsNotEmpty({ message: 'Role có định dạng là mongoose ID' })\n  @IsMongoId()\n  role: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'Công ty không được để trống' })\n  @IsNotEmptyObject()\n  @IsObject()\n  @ValidateNested()\n  @Type(() => Company)\n  company: Company;\n}\n\nexport class RegisterUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Địa chỉ không được để trống' })\n  address: string;\n}\n\nexport class UserLoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'abc@gmail.com', description: 'username' })\n  readonly username: string;\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '000 000',\n    description: 'password',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateCVDto.html": { "url": "classes/CreateCVDto.html", "title": "class - CreateCVDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCVDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resumes/dto/create-resume.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                companyId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                jobId\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        companyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'companyId không được để trống'})@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Email không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        jobId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'jobId không được để trống'})@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Trạng thái không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'url không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'userId không được để trống'})@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\nimport mongoose from 'mongoose';\n\nexport class CreateCVDto {\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'userId không được để trống' })\n  @IsMongoId()\n  userId: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'url không được để trống' })\n  url: string;\n\n  @IsNotEmpty({ message: 'Trạng thái không được để trống' })\n  status: string;\n\n  @IsNotEmpty({ message: 'companyId không được để trống' })\n  @IsMongoId()\n  companyId: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'jobId không được để trống' })\n  @IsMongoId()\n  jobId: mongoose.Schema.Types.ObjectId;\n}\n\nexport class CreateResumeDto {\n  @IsNotEmpty({ message: 'url không được để trống' })\n  url: string;\n\n  @IsNotEmpty({ message: 'companyId không được để trống' })\n  @IsMongoId()\n  companyId: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'jobId không được để trống' })\n  @IsMongoId()\n  jobId: mongoose.Schema.Types.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateCompanyDto.html": { "url": "classes/CreateCompanyDto.html", "title": "class - CreateCompanyDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCompanyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/dto/create-company.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Địa chỉ không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Mô tả không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Logo không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên công ty không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/companies/dto/create-company.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\n\n//data transfer object // class = { }\nexport class CreateCompanyDto {\n  @IsNotEmpty({ message: 'Tên công ty không được để trống' })\n  name: string;\n\n  @IsNotEmpty({ message: 'Địa chỉ không được để trống' })\n  address: string;\n\n  @IsNotEmpty({ message: 'Mô tả không được để trống' })\n  description: string;\n\n  @IsNotEmpty({ message: 'Logo không được để trống' })\n  logo: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateFileDto.html": { "url": "classes/CreateFileDto.html", "title": "class - CreateFileDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/dto/create-file.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFileDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateJobDto.html": { "url": "classes/CreateJobDto.html", "title": "class - CreateJobDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateJobDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/dto/create-job.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                company\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                level\n                            \n                            \n                                    \n                                location\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                salary\n                            \n                            \n                                    \n                                skills\n                            \n                            \n                                    \n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Company\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Công ty không được để trống'})@IsNotEmptyObject()@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Mô tả không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Ngày kết thúc không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Trạng thái không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Level không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Địa điểm không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên công việc không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Số lượng không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        salary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Mức lương không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        skills\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Kĩ năng không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Ngày bắt đầu không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:54\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\n//data transfer object //\nclass Company {\n  @IsNotEmpty()\n  _id: mongoose.Schema.Types.ObjectId;\n  @IsNotEmpty()\n  name: string;\n}\nexport class CreateJobDto {\n  @IsNotEmpty({ message: 'Tên công việc không được để trống' })\n  name: string;\n\n  @IsNotEmpty({ message: 'Kĩ năng không được để trống' })\n  skills: string[];\n\n  @IsNotEmpty({ message: 'Công ty không được để trống' })\n  @IsNotEmptyObject()\n  @IsObject()\n  @ValidateNested()\n  @Type(() => Company)\n  company: Company;\n\n  //   @IsNotEmpty({ message: 'Vị trí không được để trống' })\n  //   location: string;\n\n  @IsNotEmpty({ message: 'Mức lương không được để trống' })\n  salary: number;\n\n  @IsNotEmpty({ message: 'Số lượng không được để trống' })\n  quantity: number;\n\n  @IsNotEmpty({ message: 'Level không được để trống' })\n  level: string;\n\n  @IsNotEmpty({ message: 'Mô tả không được để trống' })\n  description: string;\n\n  @IsNotEmpty({ message: 'Địa điểm không được để trống' })\n  location: string;\n\n  // @IsNotEmpty({ message: 'logo không được để trống' })\n  // logo: string;\n\n  @IsNotEmpty({ message: 'Ngày bắt đầu không được để trống' })\n  startDate: string;\n\n  @IsNotEmpty({ message: 'Ngày kết thúc không được để trống' })\n  endDate: string;\n\n  @IsNotEmpty({ message: 'Trạng thái không được để trống' })\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreatePermissionDto.html": { "url": "classes/CreatePermissionDto.html", "title": "class - CreatePermissionDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/dto/create-permission.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                apiPath\n                            \n                            \n                                    \n                                method\n                            \n                            \n                                    \n                                module\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        apiPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Api Path không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dto/create-permission.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Method không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dto/create-permission.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Module không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dto/create-permission.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/dto/create-permission.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\n\nexport class CreatePermissionDto {\n  @IsNotEmpty({ message: 'Tên không được để trống' })\n  name: string;\n\n  @IsNotEmpty({ message: 'Api Path không được để trống' })\n  apiPath: string;\n\n  @IsNotEmpty({ message: 'Method không được để trống' })\n  method: string;\n\n  @IsNotEmpty({ message: 'Module không được để trống' })\n  module: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateResumeDto.html": { "url": "classes/CreateResumeDto.html", "title": "class - CreateResumeDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateResumeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resumes/dto/create-resume.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                companyId\n                            \n                            \n                                    \n                                    \n                                jobId\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        companyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'companyId không được để trống'})@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        jobId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'jobId không được để trống'})@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'url không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/dto/create-resume.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\nimport mongoose from 'mongoose';\n\nexport class CreateCVDto {\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'userId không được để trống' })\n  @IsMongoId()\n  userId: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'url không được để trống' })\n  url: string;\n\n  @IsNotEmpty({ message: 'Trạng thái không được để trống' })\n  status: string;\n\n  @IsNotEmpty({ message: 'companyId không được để trống' })\n  @IsMongoId()\n  companyId: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'jobId không được để trống' })\n  @IsMongoId()\n  jobId: mongoose.Schema.Types.ObjectId;\n}\n\nexport class CreateResumeDto {\n  @IsNotEmpty({ message: 'url không được để trống' })\n  url: string;\n\n  @IsNotEmpty({ message: 'companyId không được để trống' })\n  @IsMongoId()\n  companyId: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'jobId không được để trống' })\n  @IsMongoId()\n  jobId: mongoose.Schema.Types.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateRoleDto.html": { "url": "classes/CreateRoleDto.html", "title": "class - CreateRoleDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                permissions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Mô tả không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Trạng thái không được để trống'})@IsBoolean({message: 'Trạng thái là gia tri yes/no'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên vai trò không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Permission không được để trống'})@IsMongoId({each: true})@IsArray({message: 'permissions có định dang là mảng các object'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/dto/create-role.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsBoolean,\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  ValidateNested,\n} from 'class-validator';\nimport mongoose from 'mongoose';\n\nexport class CreateRoleDto {\n  @IsNotEmpty({ message: 'Tên vai trò không được để trống' })\n  name: string;\n\n  @IsNotEmpty({ message: 'Mô tả không được để trống' })\n  description: string;\n\n  @IsNotEmpty({ message: 'Trạng thái không được để trống' })\n  @IsBoolean({ message: 'Trạng thái là gia tri yes/no' })\n  isActive: boolean;\n\n  @IsNotEmpty({ message: 'Permission không được để trống' })\n  @IsMongoId({ each: true })\n  @IsArray({ message: 'permissions có định dang là mảng các object' })\n  permissions: mongoose.Schema.Types.ObjectId[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateSubscriberDto.html": { "url": "classes/CreateSubscriberDto.html", "title": "class - CreateSubscriberDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/dto/create-subscriber.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                skills\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/create-subscriber.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/create-subscriber.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        skills\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Kĩ năng không được để trống'})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/create-subscriber.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\n\nexport class CreateSubscriberDto {\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  name: string;\n\n  @IsNotEmpty({ message: 'Kĩ năng không được để trống' })\n  @IsArray()\n  @IsString({ each: true })\n  skills: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/CreateUserDto.html": { "url": "classes/CreateUserDto.html", "title": "class - CreateUserDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                company\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Giới tính không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tuổi không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Company\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Công ty không được để trống'})@IsNotEmptyObject()@IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'Email không đúng định dạng'})@IsNotEmpty({message: 'Email không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Giới tính không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên người dùng không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Mật khẩu không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Role có định dạng là mongoose ID'})@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n//data transfer object //\nclass Company {\n  @IsNotEmpty()\n  _id: mongoose.Schema.Types.ObjectId;\n  @IsNotEmpty()\n  name: string;\n}\nexport class CreateUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  address: string;\n\n  @IsNotEmpty({ message: 'Role có định dạng là mongoose ID' })\n  @IsMongoId()\n  role: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'Công ty không được để trống' })\n  @IsNotEmptyObject()\n  @IsObject()\n  @ValidateNested()\n  @Type(() => Company)\n  company: Company;\n}\n\nexport class RegisterUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Địa chỉ không được để trống' })\n  address: string;\n}\n\nexport class UserLoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'abc@gmail.com', description: 'username' })\n  readonly username: string;\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '000 000',\n    description: 'password',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/DatabasesController.html": { "url": "controllers/DatabasesController.html", "title": "controller - DatabasesController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  DatabasesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/databases/databases.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                databases\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { DatabasesService } from './databases.service';\n\n@Controller('databases')\nexport class DatabasesController {\n  constructor(private readonly databasesService: DatabasesService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/DatabasesModule.html": { "url": "modules/DatabasesModule.html", "title": "module - DatabasesModule", "body": "\n                   \n\n\n\n\n    Modules\n    DatabasesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabasesModule\n\n\n\ncluster_DatabasesModule_providers\n\n\n\n\nDatabasesService\n\nDatabasesService\n\n\n\nDatabasesModule\n\nDatabasesModule\n\nDatabasesModule -->\n\nDatabasesService->DatabasesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nDatabasesModule -->\n\nUsersService->DatabasesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/databases/databases.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabasesService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DatabasesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabasesService } from './databases.service';\nimport { DatabasesController } from './databases.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport {\n  Permission,\n  PermissionSchema,\n} from 'src/permissions/schemas/permission.schema';\nimport { User, UserSchema } from 'src/users/schemas/user.schema';\nimport { Role, RoleSchema } from 'src/roles/schemas/role.schema';\nimport { UsersService } from 'src/users/users.service';\n\n@Module({\n  controllers: [DatabasesController],\n  providers: [DatabasesService, UsersService],\n  imports: [\n    MongooseModule.forFeature([\n      { name: Permission.name, schema: PermissionSchema },\n      { name: User.name, schema: UserSchema },\n      { name: Role.name, schema: RoleSchema },\n    ]),\n  ],\n})\nexport class DatabasesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/DatabasesService.html": { "url": "injectables/DatabasesService.html", "title": "injectable - DatabasesService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabasesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/databases/databases.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesModel: SoftDeleteModel, usersModel: SoftDeleteModel, permissionsModel: SoftDeleteModel, configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/databases/databases.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permissionsModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/databases/databases.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DatabasesService.name)\n                    \n                \n                    \n                        \n                                Defined in src/databases/databases.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { Job, JobDocument } from 'src/jobs/schemas/job.schema';\nimport {\n  Permission,\n  PermissionDocument,\n} from 'src/permissions/schemas/permission.schema';\nimport { Role, RoleDocument } from 'src/roles/schemas/role.schema';\nimport { User, UserDocument } from 'src/users/schemas/user.schema';\n\nimport { UsersService } from 'src/users/users.service';\nimport { ADMIN_ROLE, INIT_PERMISSIONS, USER_ROLE } from './sample';\n\n@Injectable()\nexport class DatabasesService implements OnModuleInit {\n  private readonly logger = new Logger(DatabasesService.name);\n  constructor(\n    @InjectModel(Role.name)\n    private rolesModel: SoftDeleteModel,\n\n    @InjectModel(User.name)\n    private usersModel: SoftDeleteModel,\n\n    @InjectModel(Permission.name)\n    private permissionsModel: SoftDeleteModel,\n\n    private configService: ConfigService,\n    private usersService: UsersService,\n  ) {}\n  async onModuleInit() {\n    const isInit = this.configService.get('SHOULD_INIT');\n    if (Boolean(isInit)) {\n      const countUser = await this.usersModel.count({});\n      const countPermission = await this.permissionsModel.count({});\n      const countRole = await this.rolesModel.count({});\n\n      //create permissions\n      if (countPermission === 0) {\n        await this.permissionsModel.insertMany(INIT_PERMISSIONS);\n        //bulk create\n      }\n\n      // create role\n      if (countRole === 0) {\n        const permissions = await this.permissionsModel.find({}).select('_id');\n        await this.rolesModel.insertMany([\n          {\n            name: ADMIN_ROLE,\n            description: 'Admin thì full quyền :v',\n            isActive: true,\n            permissions: permissions,\n          },\n          {\n            name: USER_ROLE,\n            description: 'Người dùng/Ứng viên sử dụng hệ thống',\n            isActive: true,\n            permissions: [], //không set quyền, chỉ cần add ROLE\n          },\n        ]);\n      }\n\n      if (countUser === 0) {\n        const adminRole = await this.rolesModel.findOne({ name: ADMIN_ROLE });\n        const userRole = await this.rolesModel.findOne({ name: USER_ROLE });\n        await this.usersModel.insertMany([\n          {\n            name: \"I'm admin\",\n            email: 'admin@gmail.com',\n            password: this.usersService.getHashPassword(\n              this.configService.get('INIT_PASSWORD'),\n            ),\n            age: 69,\n            gender: 'MALE',\n            address: 'VietNam',\n            role: adminRole?._id,\n          },\n          {\n            name: \"I'm Hỏi Dân IT\",\n            email: 'hoidanit@gmail.com',\n            password: this.usersService.getHashPassword(\n              this.configService.get('INIT_PASSWORD'),\n            ),\n            age: 96,\n            gender: 'MALE',\n            address: 'VietNam',\n            role: adminRole?._id,\n          },\n          {\n            name: \"I'm normal user\",\n            email: 'user@gmail.com',\n            password: this.usersService.getHashPassword(\n              this.configService.get('INIT_PASSWORD'),\n            ),\n            age: 69,\n            gender: 'MALE',\n            address: 'VietNam',\n            role: userRole?._id,\n          },\n        ]);\n      }\n\n      if (countUser > 0 && countRole > 0 && countPermission > 0) {\n        this.logger.log('>>> ALREADY INIT SAMPLE DATA...');\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/File.html": { "url": "classes/File.html", "title": "class - File", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  File\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/entities/file.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class File {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/FilesController.html": { "url": "controllers/FilesController.html", "title": "controller - FilesController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  FilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateFileDto: UpdateFileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFileDto\n                                            \n                                                            UpdateFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('upload a file')@Post('upload')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/files/files.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { fileName: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  ParseFilePipeBuilder,\n  HttpStatus,\n} from '@nestjs/common';\nimport { FilesService } from './files.service';\nimport { CreateFileDto } from './dto/create-file.dto';\nimport { UpdateFileDto } from './dto/update-file.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ResponseMessage } from 'src/decorator/customize';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('files')\n@Controller('files')\nexport class FilesController {\n  constructor(private readonly filesService: FilesService) {}\n\n  @ResponseMessage('upload a file')\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('fileUpload'))\n  uploadFile(\n    @UploadedFile(\n      new ParseFilePipeBuilder()\n        .addFileTypeValidator({\n          fileType:\n            /^(image\\/jpeg|image\\/png|text\\/plain| application\\/pdf | application\\/msword|application\\/vnd.openxmlformats-officedocument.wordprocessingml.document|text\\/html)$/i,\n        })\n        .addMaxSizeValidator({\n          maxSize: 1024 * 1024,\n        })\n        .build({\n          errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\n        }),\n    )\n    file: Express.Multer.File,\n  ) {\n    return {\n      fileName: file.filename,\n    };\n  }\n\n  @Get()\n  findAll() {\n    return this.filesService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.filesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateFileDto: UpdateFileDto) {\n    return this.filesService.update(+id, updateFileDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.filesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/FilesModule.html": { "url": "modules/FilesModule.html", "title": "module - FilesModule", "body": "\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FilesService } from './files.service';\nimport { FilesController } from './files.controller';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { MulterConfigService } from './multer.config';\n\n@Module({\n  controllers: [FilesController],\n  providers: [FilesService],\n  imports: [\n    MulterModule.registerAsync({\n      useClass: MulterConfigService,\n    }),\n  ],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/FilesService.html": { "url": "injectables/FilesService.html", "title": "injectable - FilesService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFileDto: CreateFileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFileDto\n                                            \n                                                            CreateFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateFileDto: UpdateFileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/files.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFileDto\n                                            \n                                                            UpdateFileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateFileDto } from './dto/create-file.dto';\nimport { UpdateFileDto } from './dto/update-file.dto';\n\n@Injectable()\nexport class FilesService {\n  create(createFileDto: CreateFileDto) {\n    return 'This action adds a new file';\n  }\n\n  findAll() {\n    return `This action returns all files`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} file`;\n  }\n\n  update(id: number, updateFileDto: UpdateFileDto) {\n    return `This action updates a #${id} file`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} file`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/HealthController.html": { "url": "controllers/HealthController.html", "title": "controller - HealthController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Public()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheck,\n  HealthCheckService,\n  MongooseHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from 'src/decorator/customize';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('health')\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: MongooseHealthIndicator,\n  ) {}\n  @Get()\n  @Public()\n  @HealthCheck()\n  check() {\n    return this.health.check([() => this.db.pingCheck('database')]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/HealthModule.html": { "url": "modules/HealthModule.html", "title": "module - HealthModule", "body": "\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HealthController } from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "interfaces/IUser.html": { "url": "interfaces/IUser.html", "title": "interface - IUser", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            permissions\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        permissions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        permissions:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUser {\n  _id: string;\n  name: string;\n  email: string;\n  role: {\n    _id: string;\n    name: string;\n  };\n  permissions?: {\n    _id: string;\n    name: string;\n    apiPath: string;\n    method: string;\n    module: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Job.html": { "url": "classes/Job.html", "title": "class - Job", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Job\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/schemas/job.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                company\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                level\n                            \n                            \n                                    \n                                location\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                salary\n                            \n                            \n                                    \n                                skills\n                            \n                            \n                                    \n                                startDate\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        salary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        skills\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/schemas/job.schema.ts:67\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\n\nexport type JobDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Job {\n  // - level: string- description : html - startDate: date- endDate: date- isActive: boolean\n  // Thông tin riêng của module\n  @Prop()\n  name: string;\n\n  @Prop()\n  skills: string[];\n\n  @Prop({ type: Object })\n  company: {\n    _id: mongoose.Schema.Types.ObjectId;\n    name: string;\n  };\n\n  @Prop()\n  salary: number;\n\n  @Prop()\n  quantity: number;\n\n  @Prop()\n  level: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  location: string;\n\n  @Prop()\n  startDate: Date;\n\n  @Prop()\n  endDate: Date;\n\n  @Prop()\n  isActive: boolean;\n  //   Các trường thông tin mặc định\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n\n  @Prop()\n  isDeleted: boolean;\n\n  @Prop()\n  deletedAt: Date;\n\n  // các trường thông tin tùy chọn\n\n  @Prop({ type: Object })\n  createdBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  updatedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  deletedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n}\n\nexport const JobSchema = SchemaFactory.createForClass(Job);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/JobsController.html": { "url": "controllers/JobsController.html", "title": "controller - JobsController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  JobsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/jobs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                jobs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createJobDto: CreateJobDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Create a new Job')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/jobs/jobs.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createJobDto\n                                            \n                                                            CreateJobDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: string, limit: string, queryString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('Fetch company with paginate')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/jobs/jobs.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('fetch a job by id')@Get(':id')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/jobs/jobs.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Delete a job')@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/jobs/jobs.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateJobDto: UpdateJobDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('update a job')@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/jobs/jobs.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateJobDto\n                                            \n                                                            UpdateJobDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { JobsService } from './jobs.service';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { CreateJobDto } from './dto/create-job.dto';\nimport { IUser } from 'src/users/user.interface';\nimport { UpdateJobDto } from './dto/update-job.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('jobs')\n@Controller('jobs') // => /Jobs\nexport class JobsController {\n  constructor(private readonly jobsService: JobsService) {}\n\n  @ResponseMessage('Create a new Job')\n  @Post()\n  async create(@Body() createJobDto: CreateJobDto, @User() user: IUser) {\n    const newCreatedJob = await this.jobsService.create(createJobDto, user);\n    return {\n      _id: newCreatedJob._id,\n      createdAt: newCreatedJob.createdAt,\n    };\n  }\n\n  // update a job\n  @ResponseMessage('update a job')\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateJobDto: UpdateJobDto,\n    @User() user: IUser,\n  ) {\n    return this.jobsService.update(id, updateJobDto, user);\n  }\n\n  // delete a job\n  @ResponseMessage('Delete a job')\n  @Delete(':id')\n  remove(@Param('id') id: string, @User() user: IUser) {\n    return this.jobsService.remove(id, user);\n  }\n\n  // fetch a job by id\n\n  @ResponseMessage('fetch a job by id')\n  @Get(':id')\n  @Public()\n  findOne(\n    @Param('id')\n    id: string,\n  ) {\n    return this.jobsService.findOne(id);\n  }\n\n  // fetch job with paginate\n  @Get()\n  @ResponseMessage('Fetch company with paginate')\n  @Public()\n  findAll(\n    @Query('current') currentPage: string,\n    @Query('pageSize') limit: string,\n    @Query() queryString: string,\n  ) {\n    return this.jobsService.findAll(+currentPage, +limit, queryString);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/JobsModule.html": { "url": "modules/JobsModule.html", "title": "module - JobsModule", "body": "\n                   \n\n\n\n\n    Modules\n    JobsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JobsModule\n\n\n\ncluster_JobsModule_exports\n\n\n\ncluster_JobsModule_providers\n\n\n\n\nJobsService \n\nJobsService \n\n\n\nJobsModule\n\nJobsModule\n\nJobsService  -->\n\nJobsModule->JobsService \n\n\n\n\n\nJobsService\n\nJobsService\n\nJobsModule -->\n\nJobsService->JobsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/jobs/jobs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JobsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JobsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JobsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JobsService } from './jobs.service';\nimport { JobsController } from './jobs.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Job, JobSchema } from './schemas/job.schema';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: Job.name, schema: JobSchema }])],\n  controllers: [JobsController],\n  providers: [JobsService],\n  exports: [JobsService],\n})\nexport class JobsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/JobsService.html": { "url": "injectables/JobsService.html", "title": "injectable - JobsService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JobsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/jobs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jobModel: SoftDeleteModel)\n                    \n                \n                        \n                            \n                                Defined in src/jobs/jobs.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jobModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createJobDto: CreateJobDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/jobs/jobs.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createJobDto\n                                            \n                                                            CreateJobDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: number, limit: number, queryString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/jobs/jobs.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/jobs/jobs.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/jobs/jobs.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateJobDto: UpdateJobDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/jobs/jobs.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateJobDto\n                                            \n                                                            UpdateJobDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateJobDto } from './dto/create-job.dto';\nimport { UpdateJobDto } from './dto/update-job.dto';\nimport { IUser } from 'src/users/user.interface';\nimport { Job, JobDocument } from './schemas/job.schema';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport aqp from 'api-query-params';\nimport { error } from 'console';\n\n@Injectable()\nexport class JobsService {\n  constructor(\n    @InjectModel(Job.name)\n    private jobModel: SoftDeleteModel,\n  ) {}\n  async create(createJobDto: CreateJobDto, user: IUser) {\n    const {\n      name,\n      skills,\n      company,\n      salary,\n      quantity,\n      level,\n      description,\n      location,\n      startDate,\n      endDate,\n      isActive,\n    } = createJobDto;\n\n    const newCreatedJob = await this.jobModel.create({\n      name,\n      skills,\n      company,\n      salary,\n      quantity,\n      level,\n      description,\n      location,\n      startDate,\n      endDate,\n      isActive,\n    });\n    return newCreatedJob;\n  }\n\n  async update(id: string, updateJobDto: UpdateJobDto, user: IUser) {\n    return await this.jobModel.updateOne(\n      { _id: id },\n      {\n        ...updateJobDto,\n        updatedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n  }\n\n  async findAll(currentPage: number, limit: number, queryString: string) {\n    const { filter, skip, sort, projection, population } = aqp(queryString);\n\n    delete filter.current;\n    delete filter.pageSize;\n\n    const offset = (+currentPage - 1) * +limit;\n    const defaultLimit = +limit ? +limit : 10;\n    const totalItems = (await this.jobModel.find(filter)).length;\n    const totalPages = Math.ceil(totalItems / defaultLimit);\n    const result = await this.jobModel\n      .find(filter)\n      .skip(offset)\n      .limit(defaultLimit)\n      .sort(sort as any)\n      .populate(population)\n      .exec();\n    return {\n      meta: {\n        current: currentPage, //trang hiện tại\n        pageSize: limit, //số lượng bản ghi đã lấy\n        pages: totalPages, //tổng số trang với điều kiện query\n        total: totalItems, // tổng số phần tử (số bản ghi)\n      },\n      result, //kết quả query\n    };\n  }\n\n  findOne(id: string) {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new BadRequestException(`can't find this job with ${id}`);\n    }\n\n    return this.jobModel.findOne({\n      _id: id,\n    });\n  }\n\n  async remove(id: string, user: IUser) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return 'Công việc không tồn tại';\n    await this.jobModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        deletedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n    return this.jobModel.softDelete({\n      _id: id,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/JwtAuthGuard.html": { "url": "injectables/JwtAuthGuard.html", "title": "injectable - JwtAuthGuard", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info, context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  ForbiddenException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { IS_PUBLIC_KEY, IS_PUBLIC_PERMISSION } from 'src/decorator/customize';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info, context: ExecutionContext) {\n    const request: Request = context.switchToHttp().getRequest();\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n\n    const isSkipPermission = this.reflector.getAllAndOverride(\n      IS_PUBLIC_PERMISSION,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (err || !user) {\n      throw (\n        err ||\n        new UnauthorizedException(\n          'Token không hợp lệ hoặc không có Bearer token ở Header',\n        )\n      );\n    }\n    const targetMethod = request.method;\n    const targetEndpoint = request.route?.path as string;\n\n    const permissions = user?.permissions ?? [];\n    let isExist = permissions.find(\n      (permission) =>\n        targetMethod === permission.method &&\n        targetEndpoint === permission.apiPath,\n    );\n    if (targetEndpoint.startsWith('/api/v1/auth')) isExist = true;\n    if (!isExist && !isSkipPermission) {\n      throw new ForbiddenException('Bạn không có quyền truy cập endpoint này ');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/JwtStrategy.html": { "url": "injectables/JwtStrategy.html", "title": "injectable - JwtStrategy", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/passport/jwt.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { IUser } from 'src/users/user.interface';\nimport { RolesService } from 'src/roles/roles.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private rolesService: RolesService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n    });\n  }\n\n  async validate(payload: IUser) {\n    const { _id, name, email, role } = payload;\n    const userRole = role as unknown as { _id: string; name: string };\n    const temp = await this.rolesService.findOne(userRole._id);\n    return {\n      _id,\n      name,\n      email,\n      role,\n      permissions: temp?.permissions ?? [],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/LocalAuthGuard.html": { "url": "injectables/LocalAuthGuard.html", "title": "injectable - LocalAuthGuard", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/LocalStrategy.html": { "url": "injectables/LocalStrategy.html", "title": "injectable - LocalStrategy", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/passport/local.strategy.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException(\n        'Tên đăng nhập hoặc mật khẩu không đúng !',\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/MailController.html": { "url": "controllers/MailController.html", "title": "controller - MailController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  MailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mail\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                handleTestEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        handleTestEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTestEmail()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 8 * * 0')@Get()@Public()@ResponseMessage('Test email')\n                \n            \n\n                    \n                        \n                            Defined in src/mail/mail.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { Public, ResponseMessage } from 'src/decorator/customize';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport {\n  Subscriber,\n  SubscriberDocument,\n  SubscriberSchema,\n} from 'src/subscribers/schemas/subscriber.schema';\nimport { Job, JobDocument } from 'src/jobs/schemas/job.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ConfigService } from '@nestjs/config';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('mail')\n@Controller('mail')\nexport class MailController {\n  constructor(\n    private readonly mailService: MailService,\n    private mailerService: MailerService,\n    private configService: ConfigService,\n\n    @InjectModel(Subscriber.name)\n    private subscriberModel: SoftDeleteModel,\n    @InjectModel(Job.name)\n    private jobModel: SoftDeleteModel,\n  ) {}\n\n  @Cron('0 0 8 * * 0') // 8:00 every sunday\n  @Get()\n  @Public()\n  @ResponseMessage('Test email')\n  async handleTestEmail() {\n    const website_url = this.configService.get('WEB_URL');\n    console.log(website_url);\n\n    const subscribers = await this.subscriberModel.find({});\n\n    for (const subs of subscribers) {\n      const subsSkills = subs.skills;\n      const jobWithMatchingSkills = await this.jobModel.find({\n        skills: { $in: subsSkills },\n      });\n      if (jobWithMatchingSkills?.length) {\n        const jobsForSubscriber = jobWithMatchingSkills.map((item) => {\n          return {\n            name: item.name,\n            company: item.company.name,\n            salary:\n              `${item.salary}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + ' vnđ',\n            skills: item.skills,\n            jobUrl: `http://localhost:4173/job/fe-developer?id=${item._id}`,\n          };\n        });\n        await this.mailerService.sendMail({\n          to: 'thanhdotft@gmail.com',\n          from: '\"No reply\" ', // override default from\n          subject: 'Mail này gửi từ app, không phải từ mail',\n          template: 'new-job', // template body content\n          // interface của sendMail có trường là context , trường này dùng để truyền động biến vào trong file hbs\n          //\n          context: {\n            receiver: subs.name,\n            jobs: jobsForSubscriber,\n            website: website_url,\n          },\n        });\n      }\n      //build template\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/MailModule.html": { "url": "modules/MailModule.html", "title": "module - MailModule", "body": "\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService\n\nMailService\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MailController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { MailController } from './mail.controller';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { join } from 'path';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport {\n  Subscriber,\n  SubscriberSchema,\n} from 'src/subscribers/schemas/subscriber.schema';\nimport { Job, JobSchema } from 'src/jobs/schemas/job.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Subscriber.name, schema: SubscriberSchema },\n      { name: Job.name, schema: JobSchema },\n    ]),\n    MailerModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        transport: {\n          host: configService.get('EMAIL_HOST'),\n          secure: false,\n          auth: {\n            user: configService.get('EMAIL_AUTH_USER'),\n            pass: configService.get('EMAIL_AUTH_PASSWORD'),\n          },\n        },\n        preview: true,\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [MailController],\n  providers: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/MailService.html": { "url": "injectables/MailService.html", "title": "injectable - MailService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class MailService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/MulterConfigService.html": { "url": "injectables/MulterConfigService.html", "title": "injectable - MulterConfigService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MulterConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/multer.config.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getRootPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMulterOptions\n                            \n                            \n                                ensureExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMulterOptions\n                        \n                    \n                \n            \n            \n                \ncreateMulterOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/multer.config.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     MulterModuleOptions\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ensureExists\n                        \n                    \n                \n            \n            \n                \nensureExists(targetDirectory: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/files/multer.config.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetDirectory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getRootPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/files/multer.config.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  MulterModuleOptions,\n  MulterOptionsFactory,\n} from '@nestjs/platform-express';\n\nimport fs from 'fs';\nimport { diskStorage } from 'multer';\nimport path, { join } from 'path';\n@Injectable()\nexport class MulterConfigService implements MulterOptionsFactory {\n  getRootPath = () => {\n    return process.cwd();\n  };\n  ensureExists(targetDirectory: string) {\n    fs.mkdir(targetDirectory, { recursive: true }, (error) => {\n      if (!error) {\n        console.log('Directory successfully created, or it already exists.');\n        return;\n      }\n      switch (error.code) {\n        case 'EEXIST':\n          // Error:\n          // Requested location already exists, but it's not a directory.\n          break;\n        case 'ENOTDIR':\n          // Error:\n          // The parent hierarchy contains a file with the same name as the dir\n          // you're trying to create.\n          break;\n        default:\n          // Some other error like permission denied.\n          console.error(error);\n          break;\n      }\n    });\n  }\n  createMulterOptions(): MulterModuleOptions {\n    return {\n      storage: diskStorage({\n        destination: (req, file, cb) => {\n          const folder = req?.headers?.folder_type ?? 'default';\n          this.ensureExists(`public/images/${folder}`);\n          cb(null, join(this.getRootPath(), `public/images/${folder}`));\n        },\n        filename: (req, file, cb) => {\n          //get image extension\n          const extName = path.extname(file.originalname);\n          //get image's name (without extension)\n          const baseName = path.basename(file.originalname, extName);\n          const finalName = `${baseName}-${Date.now()}${extName}`;\n          cb(null, finalName);\n        },\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Permission.html": { "url": "classes/Permission.html", "title": "class - Permission", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Permission\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/schemas/permission.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                apiPath\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                method\n                            \n                            \n                                    \n                                module\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        apiPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permissions/schemas/permission.schema.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\n\nexport type PermissionDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Permission {\n  // Thông tin riêng của module\n  @Prop()\n  name: string;\n\n  @Prop()\n  apiPath: string;\n\n  @Prop()\n  method: string;\n\n  @Prop()\n  module: string;\n\n  //   Các trường thông tin mặc định\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n\n  @Prop()\n  isDeleted: boolean;\n\n  @Prop()\n  deletedAt: Date;\n\n  // các trường thông tin tùy chọn\n\n  @Prop({ type: Object })\n  createdBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  updatedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  deletedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n}\n\nexport const PermissionSchema = SchemaFactory.createForClass(Permission);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/PermissionsController.html": { "url": "controllers/PermissionsController.html", "title": "controller - PermissionsController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/permissions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                permissions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPermissionDto: CreatePermissionDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Create a new Job')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/permissions/permissions.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPermissionDto\n                                            \n                                                            CreatePermissionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: string, limit: string, queryString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('Fetch permission with paginate')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/permissions/permissions.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('fetch a Permission by id')@Get(':id')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/permissions/permissions.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Delete a Permission')@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/permissions/permissions.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePermissionDto: UpdatePermissionDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('update a Permission')@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/permissions/permissions.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePermissionDto\n                                            \n                                                            UpdatePermissionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { PermissionsService } from './permissions.service';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { CreatePermissionDto } from './dto/create-Permission.dto';\nimport { IUser } from 'src/users/user.interface';\nimport { UpdatePermissionDto } from './dto/update-Permission.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('permissions')\n@Controller('permissions') // => /Permissions\nexport class PermissionsController {\n  constructor(private readonly permissionsService: PermissionsService) {}\n\n  @ResponseMessage('Create a new Job')\n  @Post()\n  async create(\n    @Body() createPermissionDto: CreatePermissionDto,\n    @User() user: IUser,\n  ) {\n    const newCreatedPermission = await this.permissionsService.create(\n      createPermissionDto,\n      user,\n    );\n    return {\n      _id: newCreatedPermission._id,\n      createdAt: newCreatedPermission.createdAt,\n    };\n  }\n\n  // update a Permission\n  @ResponseMessage('update a Permission')\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updatePermissionDto: UpdatePermissionDto,\n    @User() user: IUser,\n  ) {\n    return this.permissionsService.update(id, updatePermissionDto, user);\n  }\n\n  // delete a Permission\n  @ResponseMessage('Delete a Permission')\n  @Delete(':id')\n  remove(@Param('id') id: string, @User() user: IUser) {\n    return this.permissionsService.remove(id, user);\n  }\n\n  // fetch a Permission by id\n\n  @ResponseMessage('fetch a Permission by id')\n  @Get(':id')\n  @Public()\n  findOne(\n    @Param('id')\n    id: string,\n  ) {\n    return this.permissionsService.findOne(id);\n  }\n\n  // fetch Permission with paginate\n  @Get()\n  @ResponseMessage('Fetch permission with paginate')\n  @Public()\n  findAll(\n    @Query('current') currentPage: string,\n    @Query('pageSize') limit: string,\n    @Query() queryString: string,\n  ) {\n    return this.permissionsService.findAll(+currentPage, +limit, queryString);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/PermissionsModule.html": { "url": "modules/PermissionsModule.html", "title": "module - PermissionsModule", "body": "\n                   \n\n\n\n\n    Modules\n    PermissionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PermissionsModule\n\n\n\ncluster_PermissionsModule_exports\n\n\n\ncluster_PermissionsModule_providers\n\n\n\n\nPermissionsService \n\nPermissionsService \n\n\n\nPermissionsModule\n\nPermissionsModule\n\nPermissionsService  -->\n\nPermissionsModule->PermissionsService \n\n\n\n\n\nPermissionsService\n\nPermissionsService\n\nPermissionsModule -->\n\nPermissionsService->PermissionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/permissions/permissions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PermissionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PermissionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PermissionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PermissionsService } from './permissions.service';\nimport { PermissionsController } from './permissions.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Permission, PermissionSchema } from './schemas/Permission.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Permission.name, schema: PermissionSchema },\n    ]),\n  ],\n  controllers: [PermissionsController],\n  providers: [PermissionsService],\n  exports: [PermissionsService],\n})\nexport class PermissionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/PermissionsService.html": { "url": "injectables/PermissionsService.html", "title": "injectable - PermissionsService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PermissionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/permissions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(permissionModel: SoftDeleteModel)\n                    \n                \n                        \n                            \n                                Defined in src/permissions/permissions.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        permissionModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPermissionDto: CreatePermissionDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/permissions/permissions.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPermissionDto\n                                            \n                                                            CreatePermissionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: number, limit: number, queryString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/permissions/permissions.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/permissions/permissions.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/permissions/permissions.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePermissionDto: UpdatePermissionDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/permissions/permissions.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePermissionDto\n                                            \n                                                            UpdatePermissionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreatePermissionDto } from './dto/create-Permission.dto';\nimport { UpdatePermissionDto } from './dto/update-Permission.dto';\nimport { IUser } from 'src/users/user.interface';\nimport { Permission, PermissionDocument } from './schemas/Permission.schema';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport aqp from 'api-query-params';\nimport { error } from 'console';\nimport { emitWarning } from 'process';\n\n@Injectable()\nexport class PermissionsService {\n  constructor(\n    @InjectModel(Permission.name)\n    private permissionModel: SoftDeleteModel,\n  ) {}\n  async create(createPermissionDto: CreatePermissionDto, user: IUser) {\n    const { name, apiPath, method, module } = createPermissionDto;\n    const isExist = await this.permissionModel.findOne({ apiPath, method });\n    if (isExist) {\n      throw new BadRequestException('Permission is exist');\n    }\n    const newCreatedPermission = await this.permissionModel.create({\n      name,\n      apiPath,\n      method,\n      module,\n      createdBy: {\n        _id: user._id,\n        email: user.email,\n      },\n    });\n    return newCreatedPermission;\n  }\n\n  async update(\n    id: string,\n    updatePermissionDto: UpdatePermissionDto,\n    user: IUser,\n  ) {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new BadRequestException('not found permission');\n    }\n    return await this.permissionModel.updateOne(\n      { _id: id },\n      {\n        ...updatePermissionDto,\n        updatedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n  }\n\n  async findAll(currentPage: number, limit: number, queryString: string) {\n    const { filter, skip, sort, projection, population } = aqp(queryString);\n\n    delete filter.current;\n    delete filter.pageSize;\n\n    const offset = (+currentPage - 1) * +limit;\n    const defaultLimit = +limit ? +limit : 10;\n    const totalItems = (await this.permissionModel.find(filter)).length;\n    const totalPages = Math.ceil(totalItems / defaultLimit);\n    const result = await this.permissionModel\n      .find(filter)\n      .skip(offset)\n      .limit(defaultLimit)\n      .sort(sort as any)\n      .populate(population)\n      .exec();\n    return {\n      meta: {\n        current: currentPage, //trang hiện tại\n        pageSize: limit, //số lượng bản ghi đã lấy\n        pages: totalPages, //tổng số trang với điều kiện query\n        total: totalItems, // tổng số phần tử (số bản ghi)\n      },\n      result, //kết quả query\n    };\n  }\n\n  findOne(id: string) {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new BadRequestException(`can't find this Permission with ${id}`);\n    }\n\n    return this.permissionModel.findById({\n      _id: id,\n    });\n  }\n\n  async remove(id: string, user: IUser) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return 'permission không tồn tại';\n    await this.permissionModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        deletedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n    return this.permissionModel.softDelete({\n      _id: id,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/RegisterUserDto.html": { "url": "classes/RegisterUserDto.html", "title": "class - RegisterUserDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Địa chỉ không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tuổi không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {message: 'Email không đúng định dạng'})@IsNotEmpty({message: 'Email không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Giới tính không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên người dùng không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Mật khẩu không được để trống'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n//data transfer object //\nclass Company {\n  @IsNotEmpty()\n  _id: mongoose.Schema.Types.ObjectId;\n  @IsNotEmpty()\n  name: string;\n}\nexport class CreateUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  address: string;\n\n  @IsNotEmpty({ message: 'Role có định dạng là mongoose ID' })\n  @IsMongoId()\n  role: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'Công ty không được để trống' })\n  @IsNotEmptyObject()\n  @IsObject()\n  @ValidateNested()\n  @Type(() => Company)\n  company: Company;\n}\n\nexport class RegisterUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Địa chỉ không được để trống' })\n  address: string;\n}\n\nexport class UserLoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'abc@gmail.com', description: 'username' })\n  readonly username: string;\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '000 000',\n    description: 'password',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "interfaces/Response.html": { "url": "interfaces/Response.html", "title": "interface - Response", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RESPONSE_MESSAGE } from 'src/decorator/customize';\n\nexport interface Response {\n  statusCode: number;\n  message?: string;\n  data: any;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  constructor(private reflector: Reflector) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(\n      map((data) => ({\n        statusCode: context.switchToHttp().getResponse().statusCode,\n        message:\n          this.reflector.get(RESPONSE_MESSAGE, context.getHandler()) ||\n          '',\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Resume.html": { "url": "classes/Resume.html", "title": "class - Resume", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Resume\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resumes/schemas/resume.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                companyId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                history\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                jobId\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                updatedBy\n                            \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        companyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        jobId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/resumes/schemas/resume.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { Company } from 'src/companies/schemas/company.schema';\nimport { Job } from 'src/jobs/schemas/job.schema';\n\nexport type ResumeDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Resume {\n  // Thông tin riêng của module\n  @Prop()\n  email: string;\n\n  @Prop()\n  userId: mongoose.Schema.Types.ObjectId;\n\n  @Prop()\n  url: string;\n\n  @Prop()\n  status: string;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: Company.name })\n  companyId: mongoose.Schema.Types.ObjectId;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: Job.name })\n  jobId: mongoose.Schema.Types.ObjectId;\n\n  @Prop({ type: mongoose.Schema.Types.Array })\n  history: {\n    status: string;\n    updateAt: Date;\n    updatedBy: {\n      _id: mongoose.Schema.Types.ObjectId;\n      email: string;\n    };\n  }[];\n\n  //   Các trường thông tin mặc định\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n\n  @Prop()\n  isDeleted: boolean;\n\n  @Prop()\n  deletedAt: Date;\n\n  // các trường thông tin tùy chọn\n\n  @Prop({ type: Object })\n  createdBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  updatedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  deletedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n}\n\nexport const ResumeSchema = SchemaFactory.createForClass(Resume);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/ResumesController.html": { "url": "controllers/ResumesController.html", "title": "controller - ResumesController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  ResumesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resumes/resumes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                resumes\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findCVbyUser\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createResumeDto: CreateResumeDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Create a new resume')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/resumes/resumes.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createResumeDto\n                                            \n                                                            CreateResumeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: string, limit: string, queryString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('Fetch all resumes with paginate')\n                \n            \n\n                    \n                        \n                            Defined in src/resumes/resumes.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findCVbyUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCVbyUser(user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('by-user')@ResponseMessage('Get Resumes by User')\n                \n            \n\n                    \n                        \n                            Defined in src/resumes/resumes.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('fetch a resume by id')@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/resumes/resumes.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Delete a resume')@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/resumes/resumes.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, status: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('\"Update status resume')@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/resumes/resumes.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { ResumesService } from './resumes.service';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { CreateResumeDto } from './dto/create-resume.dto';\nimport { IUser } from 'src/users/user.interface';\nimport { UpdateResumeDto } from './dto/update-resume.dto';\nimport { use } from 'passport';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('resumes')\n@Controller('resumes') // => /Jobs\nexport class ResumesController {\n  constructor(private readonly resumesService: ResumesService) {}\n\n  @ResponseMessage('Create a new resume')\n  @Post()\n  async create(@Body() createResumeDto: CreateResumeDto, @User() user: IUser) {\n    const newCreatedResume = await this.resumesService.create(\n      createResumeDto,\n      user,\n    );\n    return {\n      _id: newCreatedResume._id,\n      createdAt: newCreatedResume.createdAt,\n    };\n  }\n\n  // update a resume\n  @ResponseMessage('\"Update status resume')\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body('status') status: string,\n    @User() user: IUser,\n  ) {\n    return this.resumesService.update(id, status, user);\n  }\n\n  // delete a resume\n  @ResponseMessage('Delete a resume')\n  @Delete(':id')\n  remove(@Param('id') id: string, @User() user: IUser) {\n    return this.resumesService.remove(id, user);\n  }\n\n  // fetch a ersume by id\n\n  @ResponseMessage('fetch a resume by id')\n  @Get(':id')\n  findOne(\n    @Param('id')\n    id: string,\n  ) {\n    return this.resumesService.findOne(id);\n  }\n\n  // fetch job with paginate\n  @Get()\n  @ResponseMessage('Fetch all resumes with paginate')\n  findAll(\n    @Query('current') currentPage: string,\n    @Query('pageSize') limit: string,\n    @Query() queryString: string,\n  ) {\n    return this.resumesService.findAll(+currentPage, +limit, queryString);\n  }\n\n  @Post('by-user')\n  @ResponseMessage('Get Resumes by User')\n  findCVbyUser(@User() user: IUser) {\n    return this.resumesService.findByUser(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/ResumesModule.html": { "url": "modules/ResumesModule.html", "title": "module - ResumesModule", "body": "\n                   \n\n\n\n\n    Modules\n    ResumesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResumesModule\n\n\n\ncluster_ResumesModule_exports\n\n\n\ncluster_ResumesModule_providers\n\n\n\n\nResumesService \n\nResumesService \n\n\n\nResumesModule\n\nResumesModule\n\nResumesService  -->\n\nResumesModule->ResumesService \n\n\n\n\n\nResumesService\n\nResumesService\n\nResumesModule -->\n\nResumesService->ResumesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resumes/resumes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResumesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ResumesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResumesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ResumesService } from './resumes.service';\nimport { ResumesController } from './resumes.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Resume, ResumeSchema } from './schemas/Resume.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Resume.name, schema: ResumeSchema }]),\n  ],\n  controllers: [ResumesController],\n  providers: [ResumesService],\n  exports: [ResumesService],\n})\nexport class ResumesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/ResumesService.html": { "url": "injectables/ResumesService.html", "title": "injectable - ResumesService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResumesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resumes/resumes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(resumeModel: SoftDeleteModel)\n                    \n                \n                        \n                            \n                                Defined in src/resumes/resumes.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        resumeModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createResumeDto: CreateResumeDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resumes/resumes.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createResumeDto\n                                            \n                                                            CreateResumeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: number, limit: number, queryString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resumes/resumes.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUser(user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resumes/resumes.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resumes/resumes.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resumes/resumes.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, status: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/resumes/resumes.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateResumeDto } from './dto/create-resume.dto';\nimport { UpdateResumeDto } from './dto/update-resume.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { Resume, ResumeDocument } from './schemas/Resume.schema';\nimport { IUser } from 'src/users/user.interface';\nimport mongoose from 'mongoose';\nimport aqp from 'api-query-params';\n\n@Injectable()\nexport class ResumesService {\n  constructor(\n    @InjectModel(Resume.name)\n    private resumeModel: SoftDeleteModel,\n  ) {}\n  async create(createResumeDto: CreateResumeDto, user: IUser) {\n    const { url, companyId, jobId } = createResumeDto;\n\n    const newCreatedResume = await this.resumeModel.create({\n      url,\n      companyId,\n      userId: user._id,\n      jobId,\n      status: 'PENDING',\n      history: [\n        {\n          status: 'PENDING',\n          updatedAt: new Date(),\n          // phân biệt updatedAt : Date và updated: new Date() : Trong đoạn mã của bạn, updatedAt: new Date() được sử dụng để tạo ra một đối tượng Date mới đại diện cho thời gian hiện tại, tại thời điểm lệnh đó được thực thi. Đây là cách để đảm bảo rằng giá trị updatedAt chứa thời gian cụ thể khi sự kiện cập nhật xảy ra.\n          // Nếu bạn chỉ sử dụng Date, điều này sẽ không hoạt động vì Date chỉ là một lớp hoặc kiểu dữ liệu trong JavaScript, và nó cần được khởi tạo (tạo đối tượng cụ thể) bằng cách gọi new Date() để lấy thời gian hiện tại.\n          updatedBy: {\n            _id: user._id,\n            email: user.email,\n          },\n        },\n      ],\n    });\n    return newCreatedResume;\n  }\n\n  async findAll(currentPage: number, limit: number, queryString: string) {\n    const { filter, skip, sort, projection, population } = aqp(queryString);\n\n    delete filter.current;\n    delete filter.pageSize;\n\n    const offset = (+currentPage - 1) * +limit;\n    const defaultLimit = +limit ? +limit : 10;\n    const totalItems = (await this.resumeModel.find(filter)).length;\n    const totalPages = Math.ceil(totalItems / defaultLimit);\n    const result = await this.resumeModel\n      .find(filter)\n      .skip(offset)\n      .limit(defaultLimit)\n      .sort(sort as any)\n      .populate(population)\n      .select(projection as any)\n      .exec();\n    return {\n      meta: {\n        current: currentPage, //trang hiện tại\n        pageSize: limit, //số lượng bản ghi đã lấy\n        pages: totalPages, //tổng số trang với điều kiện query\n        total: totalItems, // tổng số phần tử (số bản ghi)\n      },\n      result, //kết quả query\n    };\n  }\n\n  async findOne(id: string) {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new BadRequestException('Không tìm thấy CV');\n    }\n\n    return await this.resumeModel.findOne({\n      _id: id,\n    });\n  }\n\n  async update(id: string, status: string, user: IUser) {\n    return await this.resumeModel.updateOne(\n      { _id: id },\n      {\n        status,\n        updatedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n        $push: {\n          history: {\n            status: status, // hoặc trạng thái mới bạn muốn cập nhật\n            updatedAt: new Date(),\n            updatedBy: {\n              _id: user._id,\n              email: user.email,\n            },\n          },\n        },\n      },\n    );\n  }\n\n  async remove(id: string, user: IUser) {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new BadRequestException('CV không tồn tại');\n    }\n    await this.resumeModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        deletedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n    return this.resumeModel.softDelete({\n      _id: id,\n    });\n  }\n\n  async findByUser(user: IUser) {\n    return await this.resumeModel\n      .find({\n        userId: user._id,\n      })\n      // lấy cv gần nhất\n      .sort('-createdAt')\n      .populate([\n        {\n          path: 'companyId',\n          select: { name: 1 },\n        },\n        {\n          path: 'jobId',\n          select: { name: 1 },\n        },\n      ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Role.html": { "url": "classes/Role.html", "title": "class - Role", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/schemas/role.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                permissions\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Permission[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/schemas/role.schema.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { Permission } from 'src/permissions/schemas/permission.schema';\n\nexport type RoleDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Role {\n  // Thông tin riêng của module\n  @Prop()\n  name: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  isActive: boolean;\n\n  @Prop({ type: [mongoose.Schema.Types.ObjectId], ref: Permission.name })\n  permissions: Permission[];\n\n  //   Các trường thông tin mặc định\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n\n  @Prop()\n  isDeleted: boolean;\n\n  @Prop()\n  deletedAt: Date;\n\n  // các trường thông tin tùy chọn\n\n  @Prop({ type: Object })\n  createdBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  updatedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  deletedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n}\n\nexport const RoleSchema = SchemaFactory.createForClass(Role);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/RolesController.html": { "url": "controllers/RolesController.html", "title": "controller - RolesController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRoleDto: CreateRoleDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Create a new Role')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoleDto\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: string, limit: string, queryString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('Fetch role with paginate')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('fetch a job by id')@Get(':id')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Delete a role')@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateRoleDto: UpdateRoleDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('update a role')@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoleDto\n                                            \n                                                            UpdateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { RolesService } from './roles.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { IUser } from 'src/users/user.interface';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('roles')\n@Controller('roles') // => role\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @ResponseMessage('Create a new Role')\n  @Post()\n  async create(@Body() createRoleDto: CreateRoleDto, @User() user: IUser) {\n    const newCreatedRole = await this.rolesService.create(createRoleDto, user);\n    return {\n      _id: newCreatedRole._id,\n      createdAt: newCreatedRole.createdAt,\n    };\n  }\n\n  // update a role\n  @ResponseMessage('update a role')\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateRoleDto: UpdateRoleDto,\n    @User() user: IUser,\n  ) {\n    return this.rolesService.update(id, updateRoleDto, user);\n  }\n\n  // delete a role\n  @ResponseMessage('Delete a role')\n  @Delete(':id')\n  remove(@Param('id') id: string, @User() user: IUser) {\n    return this.rolesService.remove(id, user);\n  }\n\n  // fetch a job by id\n\n  @ResponseMessage('fetch a job by id')\n  @Get(':id')\n  @Public()\n  findOne(\n    @Param('id')\n    id: string,\n  ) {\n    return this.rolesService.findOne(id);\n  }\n\n  // fetch role with paginate\n  @Get()\n  @ResponseMessage('Fetch role with paginate')\n  @Public()\n  findAll(\n    @Query('current') currentPage: string,\n    @Query('pageSize') limit: string,\n    @Query() queryString: string,\n  ) {\n    return this.rolesService.findAll(+currentPage, +limit, queryString);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/RolesModule.html": { "url": "modules/RolesModule.html", "title": "module - RolesModule", "body": "\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RolesController } from './roles.controller';\nimport { RolesService } from './roles.service';\nimport { Role, RoleSchema } from './schemas/role.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Role.name, schema: RoleSchema }]),\n  ],\n  controllers: [RolesController],\n  providers: [RolesService],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/RolesService.html": { "url": "injectables/RolesService.html", "title": "injectable - RolesService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleModel: SoftDeleteModel)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRoleDto: CreateRoleDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRoleDto\n                                            \n                                                            CreateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: number, limit: number, queryString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateRoleDto: UpdateRoleDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateRoleDto\n                                            \n                                                            UpdateRoleDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\n\nimport { IUser } from 'src/users/user.interface';\n\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport aqp from 'api-query-params';\nimport { error } from 'console';\nimport { Role, RoleDocument } from './schemas/role.schema';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { ADMIN_ROLE } from 'src/databases/sample';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectModel(Role.name)\n    private roleModel: SoftDeleteModel,\n  ) {}\n  async create(createRoleDto: CreateRoleDto, user: IUser) {\n    const { name, description, isActive, permissions } = createRoleDto;\n    const isExist = await this.roleModel.findOne({ name });\n    if (isExist)\n      throw new BadRequestException(`Role với name ${name} đã tồn tại`);\n    const newCreatedRole = await this.roleModel.create({\n      name,\n      description,\n      isActive,\n      permissions,\n      createdBy: {\n        _id: user._id,\n        email: user.email,\n      },\n    });\n    return newCreatedRole;\n  }\n\n  async update(id: string, updateRoleDto: UpdateRoleDto, user: IUser) {\n    return await this.roleModel.updateOne(\n      { _id: id },\n      {\n        ...updateRoleDto,\n        updatedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n  }\n\n  async findAll(currentPage: number, limit: number, queryString: string) {\n    const { filter, skip, sort, projection, population } = aqp(queryString);\n\n    delete filter.current;\n    delete filter.pageSize;\n\n    const offset = (+currentPage - 1) * +limit;\n    const defaultLimit = +limit ? +limit : 10;\n    const totalItems = (await this.roleModel.find(filter)).length;\n    const totalPages = Math.ceil(totalItems / defaultLimit);\n    const result = await this.roleModel\n      .find(filter)\n      .skip(offset)\n      .limit(defaultLimit)\n      .sort(sort as any)\n      .populate(population)\n      .exec();\n    return {\n      meta: {\n        current: currentPage, //trang hiện tại\n        pageSize: limit, //số lượng bản ghi đã lấy\n        pages: totalPages, //tổng số trang với điều kiện query\n        total: totalItems, // tổng số phần tử (số bản ghi)\n      },\n      result, //kết quả query\n    };\n  }\n\n  async findOne(id: string) {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new BadRequestException(`can't find this role with ${id}`);\n    }\n\n    return (await this.roleModel.findById(id)).populate({\n      path: 'permissions',\n      select: { _id: 1, apiPath: 1, name: 1, method: 1, module: 1 },\n    });\n  }\n\n  async remove(id: string, user: IUser) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return 'Công việc không tồn tại';\n    // không cho xóa role admin\n    const foundedRole = await this.roleModel.findById(id);\n    if (foundedRole.name === ADMIN_ROLE) {\n      throw new BadRequestException('Không thể xóa vai trò admin');\n    }\n    await this.roleModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        deletedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n    return this.roleModel.softDelete({\n      _id: id,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Subscriber.html": { "url": "classes/Subscriber.html", "title": "class - Subscriber", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/schemas/subscriber.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                skills\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/schemas/subscriber.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/schemas/subscriber.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/schemas/subscriber.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        skills\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/schemas/subscriber.schema.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\n\nexport type SubscriberDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Subscriber {\n  // Thông tin riêng của module\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  name: string;\n\n  @Prop()\n  skills: string[];\n\n  @Prop({ type: Object })\n  createdBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n}\n\nexport const SubscriberSchema = SchemaFactory.createForClass(Subscriber);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/SubscribersController.html": { "url": "controllers/SubscribersController.html", "title": "controller - SubscribersController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscribers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                getUserSkills\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createSubscriberDto: CreateSubscriberDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Create a new subscriber')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSubscriberDto\n                                            \n                                                            CreateSubscriberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: string, limit: string, queryString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ResponseMessage('Fetch company with paginate')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('fetch a subscriber by id')@Get(':id')@Public()\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getUserSkills\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserSkills(user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('skills')@ResponseMessage('Get subscriber's skills')@SkipCheckPermission()\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Delete a subscriber')@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateSubscriberDto: UpdateSubscriberDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('update a subscriber')@Patch()@SkipCheckPermission()\n                \n            \n\n                    \n                        \n                            Defined in src/subscribers/subscribers.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateSubscriberDto\n                                            \n                                                            UpdateSubscriberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { SubscribersService } from './subscribers.service';\nimport { CreateSubscriberDto } from './dto/create-subscriber.dto';\nimport { IUser } from 'src/users/user.interface';\nimport {\n  Public,\n  ResponseMessage,\n  SkipCheckPermission,\n  User,\n} from 'src/decorator/customize';\nimport { UpdateSubscriberDto } from './dto/update-subscriber.dto';\nimport { response } from 'express';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('subscribers')\n@Controller('subscribers') // => /subscribers\nexport class SubscribersController {\n  constructor(private readonly subscribersService: SubscribersService) {}\n\n  @ResponseMessage('Create a new subscriber')\n  @Post()\n  async create(\n    @Body() createSubscriberDto: CreateSubscriberDto,\n    @User() user: IUser,\n  ) {\n    const newCreatedSubscriber = await this.subscribersService.create(\n      createSubscriberDto,\n      user,\n    );\n    return {\n      _id: newCreatedSubscriber._id,\n      createdBy: newCreatedSubscriber.createdBy,\n    };\n  }\n\n  @Post('skills')\n  @ResponseMessage(\"Get subscriber's skills\")\n  @SkipCheckPermission()\n  getUserSkills(@User() user: IUser) {\n    return this.subscribersService.getSkills(user);\n  }\n\n  // update a subscriber\n  @ResponseMessage('update a subscriber')\n  @Patch()\n  @SkipCheckPermission()\n  update(\n    @Body() updateSubscriberDto: UpdateSubscriberDto,\n    @User() user: IUser,\n  ) {\n    return this.subscribersService.update(updateSubscriberDto, user);\n  }\n\n  // delete a subscriber\n  @ResponseMessage('Delete a subscriber')\n  @Delete(':id')\n  remove(@Param('id') id: string, @User() user: IUser) {\n    return this.subscribersService.remove(id, user);\n  }\n\n  // fetch a subscriber by id\n\n  @ResponseMessage('fetch a subscriber by id')\n  @Get(':id')\n  @Public()\n  findOne(\n    @Param('id')\n    id: string,\n  ) {\n    return this.subscribersService.findOne(id);\n  }\n\n  // fetch subscriber with paginate\n  @Get()\n  @ResponseMessage('Fetch company with paginate')\n  @Public()\n  findAll(\n    @Query('current') currentPage: string,\n    @Query('pageSize') limit: string,\n    @Query() queryString: string,\n  ) {\n    return this.subscribersService.findAll(+currentPage, +limit, queryString);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/SubscribersModule.html": { "url": "modules/SubscribersModule.html", "title": "module - SubscribersModule", "body": "\n                   \n\n\n\n\n    Modules\n    SubscribersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SubscribersModule\n\n\n\ncluster_SubscribersModule_exports\n\n\n\ncluster_SubscribersModule_providers\n\n\n\n\nSubscribersService \n\nSubscribersService \n\n\n\nSubscribersModule\n\nSubscribersModule\n\nSubscribersService  -->\n\nSubscribersModule->SubscribersService \n\n\n\n\n\nSubscribersService\n\nSubscribersService\n\nSubscribersModule -->\n\nSubscribersService->SubscribersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscribers/subscribers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubscribersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SubscribersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubscribersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Subscriber, SubscriberSchema } from './schemas/subscriber.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SubscribersController } from './subscribers.controller';\nimport { SubscribersService } from './subscribers.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Subscriber.name, schema: SubscriberSchema },\n    ]),\n  ],\n  controllers: [SubscribersController],\n  providers: [SubscribersService],\n  exports: [SubscribersService],\n})\nexport class SubscribersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/SubscribersService.html": { "url": "injectables/SubscribersService.html", "title": "injectable - SubscribersService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubscribersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getSkills\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriberModel: SoftDeleteModel)\n                    \n                \n                        \n                            \n                                Defined in src/subscribers/subscribers.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriberModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createSubscriberDto: CreateSubscriberDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/subscribers.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createSubscriberDto\n                                            \n                                                            CreateSubscriberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: number, limit: number, queryString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/subscribers.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/subscribers.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSkills\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSkills(user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/subscribers.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/subscribers.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateSubscriberDto: UpdateSubscriberDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/subscribers/subscribers.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateSubscriberDto\n                                            \n                                                            UpdateSubscriberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport aqp from 'api-query-params';\nimport { error } from 'console';\nimport { Subscriber, SubscriberDocument } from './schemas/subscriber.schema';\nimport { CreateSubscriberDto } from './dto/create-subscriber.dto';\nimport { IUser } from 'src/users/user.interface';\nimport { UpdateSubscriberDto } from './dto/update-subscriber.dto';\n\n@Injectable()\nexport class SubscribersService {\n  constructor(\n    @InjectModel(Subscriber.name)\n    private subscriberModel: SoftDeleteModel,\n  ) {}\n  async create(createSubscriberDto: CreateSubscriberDto, user: IUser) {\n    const { email, name, skills } = createSubscriberDto;\n    const isExist = this.subscriberModel.findOne({ email });\n    if (isExist) throw new BadRequestException('tài khoản này đã tồn tại');\n\n    const newCreatedSubscriber = await this.subscriberModel.create({\n      email,\n      name,\n      skills,\n      createdBy: {\n        _id: user._id,\n        email: user.email,\n      },\n    });\n    return newCreatedSubscriber;\n  }\n\n  async update(updateSubscriberDto: UpdateSubscriberDto, user: IUser) {\n    return await this.subscriberModel.updateOne(\n      // tim theo email\n      { email: user.email },\n      {\n        ...updateSubscriberDto,\n        updatedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n      // sử dụng upsert : nếu bản ghi đã tồn tại, update, nếu bản ghi chưa tồn tại : tạo mới\n      { upsert: true },\n    );\n  }\n\n  // get subscriber email\n\n  async getSkills(user: IUser) {\n    const { email } = user;\n    return await this.subscriberModel.findOne({ email }, { skills: 1 });\n  }\n\n  async findAll(currentPage: number, limit: number, queryString: string) {\n    const { filter, skip, sort, projection, population } = aqp(queryString);\n\n    delete filter.current;\n    delete filter.pageSize;\n\n    const offset = (+currentPage - 1) * +limit;\n    const defaultLimit = +limit ? +limit : 10;\n    const totalItems = (await this.subscriberModel.find(filter)).length;\n    const totalPages = Math.ceil(totalItems / defaultLimit);\n    const result = await this.subscriberModel\n      .find(filter)\n      .skip(offset)\n      .limit(defaultLimit)\n      .sort(sort as any)\n      .populate(population)\n      .exec();\n    return {\n      meta: {\n        current: currentPage, //trang hiện tại\n        pageSize: limit, //số lượng bản ghi đã lấy\n        pages: totalPages, //tổng số trang với điều kiện query\n        total: totalItems, // tổng số phần tử (số bản ghi)\n      },\n      result, //kết quả query\n    };\n  }\n\n  findOne(id: string) {\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      throw new BadRequestException(`can't find this subscriber with ${id}`);\n    }\n\n    return this.subscriberModel.findOne({\n      _id: id,\n    });\n  }\n\n  async remove(id: string, user: IUser) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return 'Không còn tồn tại';\n    await this.subscriberModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        deletedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n    return this.subscriberModel.softDelete({\n      _id: id,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/TransformInterceptor.html": { "url": "injectables/TransformInterceptor.html", "title": "injectable - TransformInterceptor", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/transform.interceptor.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/transform.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RESPONSE_MESSAGE } from 'src/decorator/customize';\n\nexport interface Response {\n  statusCode: number;\n  message?: string;\n  data: any;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  constructor(private reflector: Reflector) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(\n      map((data) => ({\n        statusCode: context.switchToHttp().getResponse().statusCode,\n        message:\n          this.reflector.get(RESPONSE_MESSAGE, context.getHandler()) ||\n          '',\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateCompanyDto.html": { "url": "classes/UpdateCompanyDto.html", "title": "class - UpdateCompanyDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCompanyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/companies/dto/update-company.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCompanyDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCompanyDto } from './create-company.dto';\n\nexport class UpdateCompanyDto extends PartialType(CreateCompanyDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateFileDto.html": { "url": "classes/UpdateFileDto.html", "title": "class - UpdateFileDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/dto/update-file.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateFileDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateFileDto } from './create-file.dto';\n\nexport class UpdateFileDto extends PartialType(CreateFileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateJobDto.html": { "url": "classes/UpdateJobDto.html", "title": "class - UpdateJobDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateJobDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/dto/update-job.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateJobDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateJobDto } from './create-job.dto';\n\nexport class UpdateJobDto extends PartialType(CreateJobDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdatePermissionDto.html": { "url": "classes/UpdatePermissionDto.html", "title": "class - UpdatePermissionDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permissions/dto/update-permission.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePermissionDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePermissionDto } from './create-permission.dto';\n\nexport class UpdatePermissionDto extends PartialType(CreatePermissionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateResumeDto.html": { "url": "classes/UpdateResumeDto.html", "title": "class - UpdateResumeDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateResumeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resumes/dto/update-resume.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateResumeDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateResumeDto } from './create-resume.dto';\n\nexport class UpdateResumeDto extends PartialType(CreateResumeDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateRoleDto.html": { "url": "classes/UpdateRoleDto.html", "title": "class - UpdateRoleDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/update-role.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateRoleDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateSubscriberDto.html": { "url": "classes/UpdateSubscriberDto.html", "title": "class - UpdateSubscriberDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSubscriberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/dto/update-subscriber.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateSubscriberDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateSubscriberDto } from './create-subscriber.dto';\n\nexport class UpdateSubscriberDto extends PartialType(CreateSubscriberDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UpdateUserDto.html": { "url": "classes/UpdateUserDto.html", "title": "class - UpdateUserDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CreateUserDto, [\n  'password',\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends OmitType(CreateUserDto, [\n  'password',\n] as const) {\n  _id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/User.html": { "url": "classes/User.html", "title": "class - User", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                company\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                deletedBy\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { Role } from 'src/roles/schemas/role.schema';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class User {\n  @Prop()\n  name: string;\n\n  @Prop({ required: true })\n  email: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop()\n  age: string;\n\n  @Prop()\n  gender: string;\n\n  @Prop()\n  address: string;\n\n  @Prop({ type: Object })\n  company: {\n    _id: mongoose.Schema.Types.ObjectId;\n    name: string;\n  };\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: Role.name })\n  role: mongoose.Schema.Types.ObjectId;\n\n  @Prop()\n  refreshToken: string;\n\n  //   Các trường thông tin mặc định\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n\n  @Prop()\n  isDeleted: boolean;\n\n  @Prop()\n  deletedAt: Date;\n\n  // các trường thông tin tùy chọn\n\n  @Prop({ type: Object })\n  createdBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  updatedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n\n  @Prop({ type: Object })\n  deletedBy: {\n    _id: mongoose.Schema.Types.ObjectId;\n    email: string;\n  };\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/UserLoginDto.html": { "url": "classes/UserLoginDto.html", "title": "class - UserLoginDto", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({example: '000 000', description: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({example: 'abc@gmail.com', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsNotEmptyObject,\n  IsObject,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport mongoose from 'mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n//data transfer object //\nclass Company {\n  @IsNotEmpty()\n  _id: mongoose.Schema.Types.ObjectId;\n  @IsNotEmpty()\n  name: string;\n}\nexport class CreateUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  address: string;\n\n  @IsNotEmpty({ message: 'Role có định dạng là mongoose ID' })\n  @IsMongoId()\n  role: mongoose.Schema.Types.ObjectId;\n\n  @IsNotEmpty({ message: 'Công ty không được để trống' })\n  @IsNotEmptyObject()\n  @IsObject()\n  @ValidateNested()\n  @Type(() => Company)\n  company: Company;\n}\n\nexport class RegisterUserDto {\n  @IsNotEmpty({ message: 'Tên người dùng không được để trống' })\n  name: string;\n\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsNotEmpty({ message: 'Email không được để trống' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được để trống' })\n  password: string;\n\n  @IsNotEmpty({ message: 'Tuổi không được để trống' })\n  age: string;\n\n  @IsNotEmpty({ message: 'Giới tính không được để trống' })\n  gender: string;\n\n  @IsNotEmpty({ message: 'Địa chỉ không được để trống' })\n  address: string;\n}\n\nexport class UserLoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'abc@gmail.com', description: 'username' })\n  readonly username: string;\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '000 000',\n    description: 'password',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/UsersController.html": { "url": "controllers/UsersController.html", "title": "controller - UsersController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Create a new user')@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: string, limit: string, queryString: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Fetch user with paginate')@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ResponseMessage('fetch a user by id')@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Delete a user')@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateUserDto: UpdateUserDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResponseMessage('Update a user')@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { IUser } from './user.interface';\nimport { use } from 'passport';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users') // => /users\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ResponseMessage('Create a new user')\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto, @User() user: IUser) {\n    const newCreatedUser = await this.usersService.create(createUserDto, user);\n    return {\n      _id: newCreatedUser._id,\n      createdAt: newCreatedUser.createdAt,\n    };\n  }\n\n  @ResponseMessage('Fetch user with paginate')\n  @Get()\n  findAll(\n    @Query('current') currentPage: string,\n    @Query('pageSize') limit: string,\n    @Query() queryString: string,\n  ) {\n    return this.usersService.findAll(+currentPage, +limit, queryString);\n  }\n\n  @Public()\n  @ResponseMessage('fetch a user by id')\n  @Get(':id')\n  findOne(\n    @Param('id')\n    id: string,\n  ) {\n    return this.usersService.findOne(id);\n  }\n\n  @ResponseMessage('Update a user')\n  @Patch()\n  update(@Body() updateUserDto: UpdateUserDto, @User() user: IUser) {\n    return this.usersService.update(updateUserDto, user);\n  }\n\n  @ResponseMessage('Delete a user')\n  @Delete(':id')\n  remove(@Param('id') id: string, @User() user: IUser) {\n    return this.usersService.remove(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/UsersModule.html": { "url": "modules/UsersModule.html", "title": "module - UsersModule", "body": "\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { Role, RoleSchema } from 'src/roles/schemas/role.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: User.name, schema: UserSchema },\n      { name: Role.name, schema: RoleSchema },\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/UsersService.html": { "url": "injectables/UsersService.html", "title": "injectable - UsersService", "body": "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getHashPassword\n                            \n                            \n                                updateRefreshTokenUser\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                findOneByUsername\n                            \n                            \n                                    Async\n                                findUserByRefreshToken\n                            \n                            \n                                isValidPassword\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: SoftDeleteModel, roleModel: SoftDeleteModel)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleModel\n                                                  \n                                                        \n                                                                        SoftDeleteModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(currentPage: number, limit: number, queryString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queryString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \nfindOneByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByRefreshToken(refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isValidPassword\n                        \n                    \n                \n            \n            \n                \nisValidPassword(password: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(newRegisterUser: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newRegisterUser\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateUserDto: UpdateUserDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getHashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRefreshTokenUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:175\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateUserDto, RegisterUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport mongoose, { Model } from 'mongoose';\nimport { genSaltSync, hashSync, compareSync } from 'bcryptjs';\nimport { SoftDeleteModel } from 'soft-delete-plugin-mongoose';\nimport { IsEmail } from 'class-validator';\nimport { IUser } from './user.interface';\nimport aqp from 'api-query-params';\nimport { Role, RoleDocument } from 'src/roles/schemas/role.schema';\nimport { USER_ROLE } from 'src/databases/sample';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name)\n    private userModel: SoftDeleteModel,\n\n    @InjectModel(Role.name)\n    private roleModel: SoftDeleteModel,\n  ) {}\n\n  getHashPassword = (password: string) => {\n    const salt = genSaltSync(10);\n    const hash = hashSync(password, salt);\n    return hash;\n  };\n\n  async create(createUserDto: CreateUserDto, user: IUser) {\n    const { name, email, password, age, gender, address, role, company } =\n      createUserDto;\n\n    const isExist = await this.userModel.findOne({ email });\n    if (isExist) {\n      throw new BadRequestException(\n        `Email : ${email} đã tồn tại, vui lòng tạo email khác`,\n      );\n    }\n\n    const hashPassword = this.getHashPassword(password);\n    const newCreated = await this.userModel.create({\n      name,\n      email,\n      password: hashPassword,\n      age,\n      gender,\n      address,\n      role: 'USER',\n      company,\n      createdBy: {\n        _id: user._id,\n        email: user.email,\n      },\n    });\n    return newCreated;\n  }\n\n  // register a user\n  async register(newRegisterUser: RegisterUserDto) {\n    const { name, email, password, age, gender, address } = newRegisterUser;\n\n    const isExist = await this.userModel.findOne({ email });\n    if (isExist) {\n      throw new BadRequestException(\n        `Email : ${email} đã tồn tại, vui lòng sử dụng email khác`,\n      );\n    }\n\n    // fetch user role\n\n    const userRole = await this.roleModel.findOne({ name: USER_ROLE });\n    const hashPassword = this.getHashPassword(password);\n    const newRegister = await this.userModel.create({\n      name,\n      email,\n      password: hashPassword,\n      age,\n      gender,\n      address,\n      role: userRole?._id,\n    });\n    return newRegister;\n  }\n\n  async findAll(currentPage: number, limit: number, queryString: string) {\n    const { filter, skip, sort, projection, population } = aqp(queryString);\n\n    delete filter.current;\n    delete filter.pageSize;\n\n    const offset = (+currentPage - 1) * +limit;\n    const defaultLimit = +limit ? +limit : 10;\n    const totalItems = (await this.userModel.find(filter)).length;\n    const totalPages = Math.ceil(totalItems / defaultLimit);\n    const result = await this.userModel\n      .find(filter)\n      .skip(offset)\n      .limit(defaultLimit)\n      .select('-password')\n      .sort(sort as any)\n      .populate(population)\n      .exec();\n    return {\n      meta: {\n        current: currentPage, //trang hiện tại\n        pageSize: limit, //số lượng bản ghi đã lấy\n        pages: totalPages, //tổng số trang với điều kiện query\n        total: totalItems, // tổng số phần tử (số bản ghi)\n      },\n      result, //kết quả query\n    };\n  }\n\n  findOne(id: string) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return `Người dùng không tồn tại`;\n\n    return this.userModel\n      .findOne({\n        _id: id,\n      })\n      .select('-password')\n      .populate({ path: 'role', select: { name: 1, _id: 1 } });\n  }\n\n  findOneByUsername(username: string) {\n    return this.userModel\n      .findOne({\n        email: username,\n      })\n      .populate({ path: 'role', select: { name: 1 } });\n  }\n\n  isValidPassword(password: string, hash: string) {\n    return compareSync(password, hash);\n  }\n\n  async update(updateUserDto: UpdateUserDto, user: IUser) {\n    return await this.userModel.updateOne(\n      { _id: updateUserDto._id },\n      {\n        ...updateUserDto,\n        updatedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n  }\n\n  async remove(id: string, user: IUser) {\n    if (!mongoose.Types.ObjectId.isValid(id)) return `Người dùng không tồn tại`;\n    // không cho xóa tài khoản admin\n    const foundedUser: IUser = await this.userModel.findById(id);\n    if (foundedUser && foundedUser.email === 'admin@gmail.com') {\n      throw new BadRequestException('Không thể xóa tài khoản admin');\n    }\n    await this.userModel.updateOne(\n      {\n        _id: id,\n      },\n      {\n        deletedBy: {\n          _id: user._id,\n          email: user.email,\n        },\n      },\n    );\n    return this.userModel.softDelete({\n      _id: id,\n    });\n  }\n\n  updateRefreshTokenUser = async (_id: string, refreshToken: string) => {\n    return await this.userModel.updateOne(\n      {\n        _id,\n      },\n      {\n        refreshToken,\n      },\n    );\n  };\n\n  async findUserByRefreshToken(refreshToken: string) {\n    return await this.userModel\n      .findOne({\n        refreshToken,\n      })\n      .populate({\n        path: 'role',\n        select: { name: 1 },\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "coverage.html": { "url": "coverage.html", "title": "coverage - coverage", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/passport/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/companies/companies.controller.ts\n            \n            controller\n            CompaniesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/companies/companies.service.ts\n            \n            injectable\n            CompaniesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/companies/dto/create-company.dto.ts\n            \n            class\n            CreateCompanyDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/companies/dto/update-company.dto.ts\n            \n            class\n            UpdateCompanyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/companies/schemas/company.schema.ts\n            \n            class\n            Company\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/companies/schemas/company.schema.ts\n            \n            variable\n            CompanySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/companies/schemas/company.schema.ts\n            \n            type alias\n            CompanyDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/databases/databases.controller.ts\n            \n            controller\n            DatabasesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/databases/databases.service.ts\n            \n            injectable\n            DatabasesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/databases/sample.ts\n            \n            variable\n            ADMIN_ROLE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/databases/sample.ts\n            \n            variable\n            INIT_PERMISSIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/databases/sample.ts\n            \n            variable\n            USER_ROLE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            IS_PUBLIC_PERMISSION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            RESPONSE_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            ResponseMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            SkipCheckPermission\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/dto/create-file.dto.ts\n            \n            class\n            CreateFileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/dto/update-file.dto.ts\n            \n            class\n            UpdateFileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/entities/file.entity.ts\n            \n            class\n            File\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/files.controller.ts\n            \n            controller\n            FilesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/files/multer.config.ts\n            \n            injectable\n            MulterConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/jobs/dto/create-job.dto.ts\n            \n            class\n            Company\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/jobs/dto/create-job.dto.ts\n            \n            class\n            CreateJobDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/jobs/dto/update-job.dto.ts\n            \n            class\n            UpdateJobDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/jobs/jobs.controller.ts\n            \n            controller\n            JobsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/jobs/jobs.service.ts\n            \n            injectable\n            JobsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/jobs/schemas/job.schema.ts\n            \n            class\n            Job\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                        src/jobs/schemas/job.schema.ts\n            \n            variable\n            JobSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/jobs/schemas/job.schema.ts\n            \n            type alias\n            JobDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/mail.controller.ts\n            \n            controller\n            MailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permissions/dto/create-permission.dto.ts\n            \n            class\n            CreatePermissionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/permissions/dto/update-permission.dto.ts\n            \n            class\n            UpdatePermissionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/permissions/permissions.controller.ts\n            \n            controller\n            PermissionsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/permissions/permissions.service.ts\n            \n            injectable\n            PermissionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/permissions/schemas/permission.schema.ts\n            \n            class\n            Permission\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/permissions/schemas/permission.schema.ts\n            \n            variable\n            PermissionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/permissions/schemas/permission.schema.ts\n            \n            type alias\n            PermissionDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resumes/dto/create-resume.dto.ts\n            \n            class\n            CreateCVDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/resumes/dto/create-resume.dto.ts\n            \n            class\n            CreateResumeDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/resumes/dto/update-resume.dto.ts\n            \n            class\n            UpdateResumeDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/resumes/resumes.controller.ts\n            \n            controller\n            ResumesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/resumes/resumes.service.ts\n            \n            injectable\n            ResumesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/resumes/schemas/resume.schema.ts\n            \n            class\n            Resume\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                        src/resumes/schemas/resume.schema.ts\n            \n            variable\n            ResumeSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/resumes/schemas/resume.schema.ts\n            \n            type alias\n            ResumeDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/schemas/role.schema.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/roles/schemas/role.schema.ts\n            \n            variable\n            RoleSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/roles/schemas/role.schema.ts\n            \n            type alias\n            RoleDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscribers/dto/create-subscriber.dto.ts\n            \n            class\n            CreateSubscriberDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/dto/update-subscriber.dto.ts\n            \n            class\n            UpdateSubscriberDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscribers/schemas/subscriber.schema.ts\n            \n            class\n            Subscriber\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/subscribers/schemas/subscriber.schema.ts\n            \n            variable\n            SubscriberSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/subscribers/schemas/subscriber.schema.ts\n            \n            type alias\n            SubscriberDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.controller.ts\n            \n            controller\n            SubscribersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.service.ts\n            \n            injectable\n            SubscribersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            Company\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            UserLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                        src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/schemas/user.schema.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/13)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "dependencies.html": { "url": "dependencies.html", "title": "package-dependencies - dependencies", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : 1.8.1\n        \n            @nestjs/common : 9.4.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : 9.4.0\n        \n            @nestjs/jwt : 10.0.3\n        \n            @nestjs/mapped-types : 1.2.2\n        \n            @nestjs/mongoose : 9.2.2\n        \n            @nestjs/passport : 9.0.3\n        \n            @nestjs/platform-express : 9.4.0\n        \n            @nestjs/schedule : 3.0.1\n        \n            @nestjs/swagger : 7.0.4\n        \n            @nestjs/terminus : 10.0.1\n        \n            @nestjs/throttler : ^6.2.1\n        \n            api-query-params : 5.4.0\n        \n            bcrypt-ts : ^5.0.2\n        \n            bcryptjs : 2.4.3\n        \n            class-transformer : 0.5.1\n        \n            class-validator : 0.14.0\n        \n            cookie-parser : 1.4.7\n        \n            cron : 2.4.3\n        \n            ejs : 3.1.9\n        \n            handlebars : 4.7.7\n        \n            helmet : ^8.0.0\n        \n            mongoose : 7.1.0\n        \n            ms : 2.1.3\n        \n            nodemailer : ^6.9.3\n        \n            passport : 0.6.0\n        \n            passport-jwt : 4.0.1\n        \n            passport-local : 1.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rxjs : 7.2.0\n        \n            soft-delete-plugin-mongoose : 1.0.15\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "miscellaneous/functions.html": { "url": "miscellaneous/functions.html", "title": "miscellaneous-functions - functions", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "index.html": { "url": "index.html", "title": "getting-started - index", "body": "\n                   \n\nCác bước cần làm để chạy dự án NestJS\n1. Cài đặt thư viện với câu lệnh: npm i\n2. Chạy dự án với câu lệnh: npm run dev\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules.html": { "url": "modules.html", "title": "modules - modules", "body": "\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompaniesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabasesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JobsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PermissionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResumesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscribersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "overview.html": { "url": "overview.html", "title": "overview - overview", "body": "\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CompaniesModule\n\n\n\ncluster_CompaniesModule_providers\n\n\n\ncluster_DatabasesModule\n\n\n\ncluster_DatabasesModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_JobsModule\n\n\n\ncluster_JobsModule_exports\n\n\n\ncluster_JobsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PermissionsModule\n\n\n\ncluster_PermissionsModule_exports\n\n\n\ncluster_PermissionsModule_providers\n\n\n\ncluster_ResumesModule\n\n\n\ncluster_ResumesModule_exports\n\n\n\ncluster_ResumesModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_SubscribersModule\n\n\n\ncluster_SubscribersModule_exports\n\n\n\ncluster_SubscribersModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCompaniesModule\n\nCompaniesModule\n\nAppModule -->\n\nCompaniesModule->AppModule\n\n\n\n\n\nDatabasesModule\n\nDatabasesModule\n\nAppModule -->\n\nDatabasesModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nJobsModule\n\nJobsModule\n\nAppModule -->\n\nJobsModule->AppModule\n\n\n\n\n\nJobsService \n\nJobsService \n\nJobsService  -->\n\nJobsModule->JobsService \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPermissionsModule\n\nPermissionsModule\n\nAppModule -->\n\nPermissionsModule->AppModule\n\n\n\n\n\nPermissionsService \n\nPermissionsService \n\nPermissionsService  -->\n\nPermissionsModule->PermissionsService \n\n\n\n\n\nResumesModule\n\nResumesModule\n\nAppModule -->\n\nResumesModule->AppModule\n\n\n\n\n\nResumesService \n\nResumesService \n\nResumesService  -->\n\nResumesModule->ResumesService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nSubscribersService \n\nSubscribersService \n\nSubscribersService  -->\n\nSubscribersModule->SubscribersService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCompaniesService\n\nCompaniesService\n\nCompaniesModule -->\n\nCompaniesService->CompaniesModule\n\n\n\n\n\nDatabasesService\n\nDatabasesService\n\nDatabasesModule -->\n\nDatabasesService->DatabasesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nDatabasesModule -->\n\nUsersService->DatabasesModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nJobsService\n\nJobsService\n\nJobsModule -->\n\nJobsService->JobsModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nPermissionsService\n\nPermissionsService\n\nPermissionsModule -->\n\nPermissionsService->PermissionsModule\n\n\n\n\n\nResumesService\n\nResumesService\n\nResumesModule -->\n\nResumesService->ResumesModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nSubscribersService\n\nSubscribersService\n\nSubscribersModule -->\n\nSubscribersService->SubscribersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    29 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "properties.html": { "url": "properties.html", "title": "package-properties - properties", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : https://hoidanit.com.vn/\n        \n            License : UNLICENSED\n        \n            Author : Hỏi Dân IT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "miscellaneous/typealiases.html": { "url": "miscellaneous/typealiases.html", "title": "miscellaneous-typealiases - typealiases", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CompanyDocument   (src/.../company.schema.ts)\n                        \n                        \n                            JobDocument   (src/.../job.schema.ts)\n                        \n                        \n                            PermissionDocument   (src/.../permission.schema.ts)\n                        \n                        \n                            ResumeDocument   (src/.../resume.schema.ts)\n                        \n                        \n                            RoleDocument   (src/.../role.schema.ts)\n                        \n                        \n                            SubscriberDocument   (src/.../subscriber.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/companies/schemas/company.schema.ts\n    \n    \n        \n            \n                \n                    \n                    CompanyDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/jobs/schemas/job.schema.ts\n    \n    \n        \n            \n                \n                    \n                    JobDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/permissions/schemas/permission.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PermissionDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/resumes/schemas/resume.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ResumeDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/roles/schemas/role.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RoleDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/subscribers/schemas/subscriber.schema.ts\n    \n    \n        \n            \n                \n                    \n                    SubscriberDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "miscellaneous/variables.html": { "url": "miscellaneous/variables.html", "title": "miscellaneous-variables - variables", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ADMIN_ROLE   (src/.../sample.ts)\n                        \n                        \n                            CompanySchema   (src/.../company.schema.ts)\n                        \n                        \n                            INIT_PERMISSIONS   (src/.../sample.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../customize.ts)\n                        \n                        \n                            IS_PUBLIC_PERMISSION   (src/.../customize.ts)\n                        \n                        \n                            JobSchema   (src/.../job.schema.ts)\n                        \n                        \n                            PermissionSchema   (src/.../permission.schema.ts)\n                        \n                        \n                            Public   (src/.../customize.ts)\n                        \n                        \n                            RESPONSE_MESSAGE   (src/.../customize.ts)\n                        \n                        \n                            ResponseMessage   (src/.../customize.ts)\n                        \n                        \n                            ResumeSchema   (src/.../resume.schema.ts)\n                        \n                        \n                            RoleSchema   (src/.../role.schema.ts)\n                        \n                        \n                            SkipCheckPermission   (src/.../customize.ts)\n                        \n                        \n                            SubscriberSchema   (src/.../subscriber.schema.ts)\n                        \n                        \n                            User   (src/.../customize.ts)\n                        \n                        \n                            USER_ROLE   (src/.../sample.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/databases/sample.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ADMIN_ROLE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SUPER_ADMIN'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INIT_PERMISSIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    _id: '648ab415f4328bd3153ee211',\n    name: 'Get Company with paginate',\n    apiPath: '/api/v1/companies',\n    method: 'GET',\n    module: 'COMPANIES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T06:47:49.369Z',\n    updatedAt: '2023-06-15T06:54:05.131Z',\n    __v: 0,\n    updatedBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n  },\n  {\n    _id: '648ab436f4328bd3153ee216',\n    name: 'Create Company',\n    apiPath: '/api/v1/companies',\n    method: 'POST',\n    module: 'COMPANIES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T06:48:22.224Z',\n    updatedAt: '2023-06-15T06:48:22.224Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab4d5f4328bd3153ee21b',\n    name: 'Update Company',\n    apiPath: '/api/v1/companies/:id',\n    method: 'PATCH',\n    module: 'COMPANIES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T06:51:01.241Z',\n    updatedAt: '2023-06-15T06:51:01.241Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab4ebf4328bd3153ee220',\n    name: 'Delete Company',\n    apiPath: '/api/v1/companies/:id',\n    method: 'DELETE',\n    module: 'COMPANIES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T06:51:23.973Z',\n    updatedAt: '2023-06-15T06:51:23.973Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab5a8072f2a2ef910638d',\n    name: 'Get Company by id',\n    apiPath: '/api/v1/companies/:id',\n    method: 'GET',\n    module: 'COMPANIES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T06:54:32.799Z',\n    updatedAt: '2023-06-15T06:54:32.799Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab6d3fa16b294212e4033',\n    name: 'Create User',\n    apiPath: '/api/v1/users',\n    method: 'POST',\n    module: 'USERS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T06:59:31.898Z',\n    updatedAt: '2023-06-15T06:59:31.898Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab6e7fa16b294212e4038',\n    name: 'Get User by Id',\n    apiPath: '/api/v1/users/:id',\n    method: 'GET',\n    module: 'USERS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T06:59:51.041Z',\n    updatedAt: '2023-06-15T06:59:51.041Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab6fdfa16b294212e403d',\n    name: 'Get User with paginate',\n    apiPath: '/api/v1/users',\n    method: 'GET',\n    module: 'USERS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T07:00:13.364Z',\n    updatedAt: '2023-06-15T07:00:13.364Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab719fa16b294212e4042',\n    name: 'Update User',\n    apiPath: '/api/v1/users/:id',\n    method: 'PATCH',\n    module: 'USERS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T07:00:41.934Z',\n    updatedAt: '2023-06-15T07:00:41.934Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab728fa16b294212e4047',\n    name: 'Delete User',\n    apiPath: '/api/v1/users/:id',\n    method: 'DELETE',\n    module: 'USERS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T07:00:56.274Z',\n    updatedAt: '2023-06-15T07:00:56.274Z',\n    __v: 0,\n  },\n  {\n    _id: '648ab750fa16b294212e404c',\n    name: 'Upload Single File',\n    apiPath: '/api/v1/files/upload',\n    method: 'POST',\n    module: 'FILES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T07:01:36.923Z',\n    updatedAt: '2023-06-15T07:01:36.923Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad488dafdb9754f40b846',\n    name: 'Create a Job',\n    apiPath: '/api/v1/jobs',\n    method: 'POST',\n    module: 'JOBS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:06:16.508Z',\n    updatedAt: '2023-06-15T09:06:16.508Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad499dafdb9754f40b84b',\n    name: 'Get a job by id',\n    apiPath: '/api/v1/jobs/:id',\n    method: 'GET',\n    module: 'JOBS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:06:33.697Z',\n    updatedAt: '2023-06-15T09:06:33.697Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad4a6dafdb9754f40b850',\n    name: 'Update a Job',\n    apiPath: '/api/v1/jobs/:id',\n    method: 'PATCH',\n    module: 'JOBS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:06:46.085Z',\n    updatedAt: '2023-06-15T09:06:46.085Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad4ccdafdb9754f40b859',\n    name: 'Get Job with paginate',\n    apiPath: '/api/v1/jobs',\n    method: 'GET',\n    module: 'JOBS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:07:24.175Z',\n    updatedAt: '2023-06-15T09:07:24.175Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad4d9dafdb9754f40b85e',\n    name: 'Delete a Job',\n    apiPath: '/api/v1/jobs/:id',\n    method: 'DELETE',\n    module: 'JOBS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:07:37.896Z',\n    updatedAt: '2023-06-15T09:07:37.896Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad4fedafdb9754f40b863',\n    name: 'Create a Resume',\n    apiPath: '/api/v1/resumes',\n    method: 'POST',\n    module: 'RESUMES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:08:14.659Z',\n    updatedAt: '2023-06-15T09:08:14.659Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad511dafdb9754f40b868',\n    name: 'Fetch resume with paginate',\n    apiPath: '/api/v1/resumes',\n    method: 'GET',\n    module: 'RESUMES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:08:33.395Z',\n    updatedAt: '2023-06-15T09:08:33.395Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad522dafdb9754f40b86d',\n    name: 'Get resume by id',\n    apiPath: '/api/v1/resumes/:id',\n    method: 'GET',\n    module: 'RESUMES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:08:50.801Z',\n    updatedAt: '2023-06-15T09:08:50.801Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad53bdafdb9754f40b872',\n    name: 'Delete a resume',\n    apiPath: '/api/v1/resumes/:id',\n    method: 'DELETE',\n    module: 'RESUMES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:09:15.785Z',\n    updatedAt: '2023-06-15T09:09:15.785Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad555dafdb9754f40b877',\n    name: 'Update resume status',\n    apiPath: '/api/v1/resumes/:id',\n    method: 'PATCH',\n    module: 'RESUMES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:09:41.694Z',\n    updatedAt: '2023-06-15T09:09:41.694Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad56ddafdb9754f40b87c',\n    name: 'Fetch resumes by user',\n    apiPath: '/api/v1/resumes/by-user',\n    method: 'POST',\n    module: 'RESUMES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:10:05.961Z',\n    updatedAt: '2023-06-15T09:10:05.961Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad59adafdb9754f40b881',\n    name: 'Create a permission',\n    apiPath: '/api/v1/permissions',\n    method: 'POST',\n    module: 'PERMISSIONS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:10:50.946Z',\n    updatedAt: '2023-06-15T09:10:50.946Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad5aedafdb9754f40b886',\n    name: 'Fetch Permission with paginate',\n    apiPath: '/api/v1/permissions',\n    method: 'GET',\n    module: 'PERMISSIONS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:11:10.914Z',\n    updatedAt: '2023-06-15T09:11:10.914Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad5c5dafdb9754f40b88b',\n    name: 'Fetch permission by id',\n    apiPath: '/api/v1/permissions/:id',\n    method: 'GET',\n    module: 'PERMISSIONS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:11:33.234Z',\n    updatedAt: '2023-06-15T09:11:33.234Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad5d4dafdb9754f40b890',\n    name: 'Update a permission',\n    apiPath: '/api/v1/permissions/:id',\n    method: 'PATCH',\n    module: 'PERMISSIONS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:11:48.081Z',\n    updatedAt: '2023-06-15T09:11:48.081Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad5ebdafdb9754f40b895',\n    name: 'Delete a permission',\n    apiPath: '/api/v1/permissions/:id',\n    method: 'DELETE',\n    module: 'PERMISSIONS',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:12:11.323Z',\n    updatedAt: '2023-06-15T09:12:11.323Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad613dafdb9754f40b89a',\n    name: 'Create Role',\n    apiPath: '/api/v1/roles',\n    method: 'POST',\n    module: 'ROLES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:12:51.974Z',\n    updatedAt: '2023-06-15T09:12:51.974Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad622dafdb9754f40b89f',\n    name: 'Fetch roles with paginate',\n    apiPath: '/api/v1/roles',\n    method: 'GET',\n    module: 'ROLES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:13:06.618Z',\n    updatedAt: '2023-06-15T09:13:06.618Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad630dafdb9754f40b8a6',\n    name: 'Fetch role by id',\n    apiPath: '/api/v1/roles/:id',\n    method: 'GET',\n    module: 'ROLES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:13:20.853Z',\n    updatedAt: '2023-06-15T09:13:20.853Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad640dafdb9754f40b8ab',\n    name: 'Update Role',\n    apiPath: '/api/v1/roles/:id',\n    method: 'PATCH',\n    module: 'ROLES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:13:36.836Z',\n    updatedAt: '2023-06-15T09:13:36.836Z',\n    __v: 0,\n  },\n  {\n    _id: '648ad650dafdb9754f40b8b0',\n    name: 'Delete a Role',\n    apiPath: '/api/v1/roles/:id',\n    method: 'DELETE',\n    module: 'ROLES',\n    createdBy: {\n      _id: '647b5108a8a243e8191855b5',\n      email: 'hoidanit@gmail.com',\n    },\n    isDeleted: false,\n    deletedAt: null,\n    createdAt: '2023-06-15T09:13:52.798Z',\n    updatedAt: '2023-06-15T09:13:52.798Z',\n    __v: 0,\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ROLE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NORMAL_USER'\n                    \n                \n\n\n        \n    \n\n    src/companies/schemas/company.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CompanySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Company)\n                    \n                \n\n\n        \n    \n\n    src/decorator/customize.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_PERMISSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublicPermission'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSE_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'response_message'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ResponseMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (message: string) =>\n  SetMetadata(RESPONSE_MESSAGE, message)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SkipCheckPermission\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () =>\n  SetMetadata(IS_PUBLIC_PERMISSION, true)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/jobs/schemas/job.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JobSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Job)\n                    \n                \n\n\n        \n    \n\n    src/permissions/schemas/permission.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PermissionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Permission)\n                    \n                \n\n\n        \n    \n\n    src/resumes/schemas/resume.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResumeSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Resume)\n                    \n                \n\n\n        \n    \n\n    src/roles/schemas/role.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Role)\n                    \n                \n\n\n        \n    \n\n    src/subscribers/schemas/subscriber.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SubscriberSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Subscriber)\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" } }
}
